{"version":3,"sources":["helpers/leases/enums/LeaseClassification.ts","helpers/leases/enums/PaymentFrequency.ts","components/navbar/StyledNavbar.ts","components/navbar/Navbar.tsx","helpers/utils/dateFunctions.ts","helpers/utils/formatting.ts","pages/CreateLease.tsx","helpers/leases/utils/roundNumber.ts","helpers/leases/utils/addMonth.ts","helpers/leases/utils/monthlyCalculation.ts","helpers/leases/classes/Liability/LiabilityMonthly.ts","helpers/leases/utils/calculateLiability.ts","helpers/leases/classes/Asset/AssetMonthly.ts","helpers/leases/utils/calculateAssetSchedule.ts","helpers/leases/classes/Asset/AssetBase.ts","helpers/leases/classes/Asset/AssetFinance.ts","helpers/leases/classes/Asset/AssetOperating.ts","helpers/leases/classes/Liability/Liability.ts","helpers/leases/classes/Payments/Payment.ts","helpers/leases/classes/Payments/Payments.ts","helpers/leases/classes/Lease.ts","helpers/utils/createLease.ts","helpers/utils/discountRate.ts","helpers/utils/calculatePresentValue.ts","components/Payments.tsx","components/Download.tsx","hooks/useForm.ts","components/input/Input.tsx","components/table/StyledDataTable.ts","components/table/DataTable.tsx","pages/StyledCreatLease.ts","hooks/usePayments.ts","helpers/utils/createExcelData.ts","pages/HomePage.tsx","pages/StyledPresentValueCalc.ts","pages/PresentValueCalculator.tsx","pages/FinanceLeaseCriteria.tsx","pages/InitialRecognition.tsx","pages/Subsequent Recognition.tsx","App.tsx","index.tsx"],"names":["LeaseClassification","PaymentFrequency","StyledNavbar","styled","div","Navbar","to","getLastDay","value","dateArr","split","date","Date","Number","newDate","getFullYear","getMonth","setDate","getDate","month","monthCorrection","year","day","monthNumber","toString","capitalizeFirstLetter","word","toUpperCase","substring","formatDate","InputTypes","roundNumber","number","decimals","toFixed","addMonth","months","monthlyCalculation","y","startDate","payment","frequency","nextMonth","monthlyPayment","Annual","SemiAnnual","Quarterly","LiabilityMonthly","beginningBalance","interestRate","interestExpense","endingBalance","prepaid","shortTermBalance","longTermBalance","this","calculateLiability","startingBalance","index","paymentsLength","schedule","principal","endBalance","getMonthlyData","currentMonthInterestExpense","interestPayment","currentMonthEndingBalance","calculateSTLTBalances","liabilitySchedule","result","stBalance","ltBalance","sort","a","b","valueOf","i","length","generateLiability","paymentStream","payments","correctedInterestRate","discountRate","push","AssetMonthly","depreciation","calculateAssetSchedule","data","straightLineRent","life","monthlyDepreciation","classification","OPERATING","AssetBase","monthlyTransactions","map","toLocaleDateString","callback","AssetFinance","useEconomicLife","economicLife","calculatedLife","setProperties","calculateDepreciationWithEconomicLife","calculateDepreciation","setMonthlyTransactions","calculateMonthlySchedule","getStartingBalance","setMonthlyDepreciation","getLife","assetData","FINANCE","AssetOperating","deferredRent","leaseIncentive","initialDirectCosts","totalPayments","reduce","accumulator","currentValue","Liability","Payment","config","endDate","Payments","forEach","sumPayments","getPaymentInformation","getPayments","arr","streamLength","Lease","name","description","liability","asset","quantityOfPayments","presentValue","getSumOfPayments","getQuantityOfPayments","getPaymentsArray","calculatePresentValue","liabilityBalance","getLiabilityData","setPropertiesFinance","Error","setPropertiesOperating","getLiabilitySchedule","lease","leaseClassification","paymentArray","el","Monthly","paymentObjects","setPropertiesJSON","setPropertiesFromJSON","paymentsArray","paymentInformation","getPaymentStream","getAssetSchedule","filter","schedules","sumAllPayments","getAssetData","generatePaymentStream","amount","stDate","edDate","reducerFunction","calcPresentValue","rateOfReturn","Math","pow","onChange","onClickAdd","onClickDelete","paymentsArr","useState","error","setError","handleChange","e","updatedValue","currentTarget","id","indexValue","getFirstDay","start","checkDateIsAfter","oldPayment","updatedPayment","oldArray","onClick","type","min","ExcelFile","ReactExport","ExcelSheet","Download","fileName","filename","element","dataSet","useForm","initialValues","values","setValues","event","Input","props","label","options","show","required","undefined","Select","htmlFor","option","text","StyledDataTable","table","DataTable","dataArray","tableRows","row","Object","keys","key","Intl","NumberFormat","minimumFractionDigits","format","tableHeader","headers","header","combinedText","style","height","createTableHeaders","StyledCreateLease","usePayments","setPayments","updatedPayments","preventDefault","newStartDate","getNextDay","pop","leaseInitialValues","CreateLeasePage","_props","generatedLease","setGeneratedLease","leaseInfo","setLeaseInfo","onChangePayments","onClickAddPayment","onClickDeletePayment","useEffect","leaseExcelData","obj","assetSchedule","columns","toLocaleString","maximumFractionDigits","ySteps","xSteps","createExcelData","inputObject","Text","className","onSubmit","genLease","leasePayments","createLease","getAllLeaseInformation","input","HomePage","StyledPresentValueCalc","PresentValueCalculatorPage","setPresentValue","FinanceLeaseCriteria","InitialRecognition","SubsequentRecognition","App","path","CreateLease","PresentValueCalculator","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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DACA,uBACA,2CAEF,uBACA,wDACA,uBACA,yEACA,+BACE,oDACA,yCACA,0BAEF,+BACE,iDACA,uBACA,4CAEF,uBACA,yDACA,+BACE,iDACA,wCACA,0BAEF,+BACE,oDACA,uBACA,2CAEF,uBACA,sDACA,+BACE,oDACA,2CAEF,+BACE,8CACA,uBACA,2CAEF,uBACA,6DACA,+BACE,oDACA,0CAEF,+BACE,kDACA,uBACA,uDC0BGiC,GApNe,SAACjC,GAAD,OAC5B,qCACE,gCACE,+CACA,qDACA,+BACE,sDACA,4DACA,kEACA,sDACA,qDACA,wDAEF,sLAKA,kCACE,+BACE,sCACA,6BACE,sDAEF,8CAEF,+BACE,oDACA,uBACA,8CAEF,+BACE,wCACA,yCACA,8CAEF,+BACE,wCACA,yCACA,8CAEF,+BACE,wCACA,yCACA,8CAEF,+BACE,wCACA,yCACA,4CAEF,+BACE,wCACA,yCACA,uCAEF,+BACE,uCACA,iDAGJ,gCACE,sKAIA,kCACE,+BACE,6CACA,gDACA,uDACA,sDACA,yDACA,qDAEF,+BACE,oDACA,uBACA,uBACA,uBACA,uBACA,8CAEF,+BACE,wCACA,uBACA,uBACA,uBACA,wCACA,8CAEF,+BACE,wCACA,uCACA,wCACA,wCACA,wCACA,8CAEF,+BACE,wCACA,uCACA,wCACA,wCACA,wCACA,8CAEF,+BACE,wCACA,uCACA,0CACA,wCACA,wCACA,8CAEF,+BACE,wCACA,uCACA,0CACA,wCACA,uCACA,gDAKR,gCACE,iDACA,oDACA,+BACE,oDACA,0DACA,iEACA,sDACA,wDAEF,qOAKA,gLAIA,8OAKA,iDACA,kCACE,+BACE,sCACA,gDACA,mDACA,8CAEF,+BACE,8CACA,uBACA,uBACA,4CAEF,+BACE,wCACA,yCACA,2CACA,4CAEF,+BACE,wCACA,yCACA,yCACA,0CAGJ,6CACA,kCACE,+BACE,6CACA,8DACA,8DACA,qDACA,8CAEF,+BACE,8CACA,uBACA,uBACA,uBACA,4CAEF,+BACE,wCACA,yCACA,2CACA,4CACA,+CAEF,+BACE,wCACA,yCACA,yCACA,4CACA,sDChLKkC,GApBH,WACV,OACE,sBAAKd,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAUe,KAAK,mBACf,cAAC,GAAD,CAAsBA,KAAM,mCAC5B,cAAC,GAAD,CAAoBA,KAAM,sCAC1B,cAAC,GAAD,CACEA,KAAM,yCAER,cAACC,GAAD,CAAiBD,KAAK,+BACtB,cAACE,GAAD,CAA4BF,KAAK,mDCpB3CG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.24cf28c4.chunk.js","sourcesContent":["export enum LeaseClassification {\r\n  FINANCE = 'finance',\r\n  OPERATING = 'operating'\r\n}\r\n","export enum PaymentFrequency {\r\n  Annual = 'annual',\r\n  SemiAnnual = 'semiannual',\r\n  Quarterly = 'quarterly',\r\n  Monthly = 'monthly'\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst StyledNavbar = styled.div`\r\n  background-color: #3c6382;\r\n  width: 80vw;\r\n  max-width: 1500px;\r\n  margin: auto;\r\n\r\n  ul {\r\n    list-style-type: none;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n  }\r\n\r\n  a,\r\n  a:visited {\r\n    text-decoration: none;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nexport default StyledNavbar;\r\n","import { Link } from \"@reach/router\";\nimport StyledNavbar from \"./StyledNavbar\";\n\nconst Navbar = () => {\n  return (\n    <StyledNavbar>\n      <ul>\n        <li>\n          <Link to=\"/leases-react/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/leases-react/finance-criteria\">\n            Finance Lease Criteria\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/leases-react/initial-recognition\">\n            Initial Recognition\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/leases-react/subsequent-recognition\">\n            Subsequent Recognition\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/leases-react/create-lease\">Create Lease</Link>\n        </li>\n        <li>\n          <Link to=\"/leases-react/present-value-calculator\">\n            Present Value Calculator\n          </Link>\n        </li>\n      </ul>\n    </StyledNavbar>\n  );\n};\n\nexport default Navbar;\n","/**\r\n * takes a date as string returns the first day of the month\r\n * @param value\r\n */\r\nexport const getFirstDay = (value: string): string => {\r\n  const dateArr = value.split(\"-\");\r\n  const newDate = new Date(\r\n    Number(dateArr[0]),\r\n    Number(dateArr[1]) - 1,\r\n    Number(dateArr[2])\r\n  );\r\n\r\n  const month = monthCorrection(newDate.getMonth());\r\n\r\n  const day = \"01\";\r\n  const year = newDate.getFullYear();\r\n\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\n/**\r\n * takes a date as string returns last day of the month\r\n * @param value\r\n */\r\nexport const getLastDay = (value: string): string => {\r\n  const dateArr = value.split(\"-\");\r\n  const date = new Date(\r\n    Number(dateArr[0]),\r\n    Number(dateArr[1]) - 1,\r\n    Number(dateArr[2])\r\n  );\r\n\r\n  const newDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);\r\n\r\n  newDate.setDate(newDate.getDate() - 1);\r\n\r\n  const month = monthCorrection(newDate.getMonth());\r\n  const year = newDate.getFullYear();\r\n  const day = newDate.getDate();\r\n\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nexport const getNextDay = (value: string): string => {\r\n  const date = new Date(value);\r\n  const day = \"01\";\r\n  const newDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);\r\n  const month = monthCorrection(newDate.getMonth());\r\n  return `${newDate.getFullYear()}-${month}-${day}`;\r\n};\r\n\r\n/**\r\n * corrects the month to two digits\r\n * @param month\r\n */\r\nexport const monthCorrection = (month: number | string): string => {\r\n  const monthNumber = Number(month);\r\n\r\n  const correctedMonth =\r\n    monthNumber + 1 < 10 ? `0${monthNumber + 1}` : monthNumber + 1;\r\n\r\n  return correctedMonth.toString();\r\n};\r\n\r\n/**\r\n * Checks if the start date is after the end date\r\n * @param startDate\r\n * @param endDate\r\n */\r\nexport const checkDateIsAfter = (\r\n  startDate: string,\r\n  endDate: string\r\n): boolean => {\r\n  const start = new Date(startDate);\r\n  const end = new Date(endDate);\r\n\r\n  return end.valueOf() > start.valueOf();\r\n};\r\n","export const capitalizeFirstLetter = (word: string) =>\r\n  word[0].toUpperCase() + word.substring(1);\r\n\r\nexport const formatDate = (value: string) => {\r\n  const dateArr = value.split('-');\r\n\r\n  return `${dateArr[1]}/${dateArr[2]}/${dateArr[0]}`;\r\n};\r\n\r\nexport const formatNumberDecimal = (value: number): string =>\r\n  value.toLocaleString('en-US', {\r\n    maximumFractionDigits: 2,\r\n    style: 'decimal'\r\n  });\r\n\r\nexport const formatNumberPercent = (value: number): string =>\r\n  value.toLocaleString('en-US', {\r\n    maximumFractionDigits: 2,\r\n    style: 'percent'\r\n  });\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Payments from \"../components/Payments\";\r\nimport Download from \"../components/Download\";\r\n\r\nimport { createExcelData, createLease } from \"../helpers/utils\";\r\nimport { GeneratedLease } from \"../interfaces\";\r\nimport { useForm } from \"../hooks/useForm\";\r\nimport Input from \"../components/input/Input\";\r\nimport DataTable from \"../components/table/DataTable\";\r\nimport { StyledCreateLease } from \"./StyledCreatLease\";\r\n\r\nimport { RouteComponentProps } from \"@reach/router\";\r\nimport { usePayments } from \"../hooks/usePayments\";\r\n\r\nexport enum InputTypes {\r\n  Select = \"select\",\r\n  Text = \"text\",\r\n  Number = \"number\",\r\n}\r\n\r\nconst leaseInitialValues = {\r\n  name: \"\",\r\n  description: \"\",\r\n  classification: \"operating\",\r\n  prepaid: \"true\",\r\n  interestRate: 0,\r\n  deferredRent: 0,\r\n  leaseIncentive: 0,\r\n  initialDirectCosts: 0,\r\n  useEconomicLife: \"false\",\r\n  economicLife: 0,\r\n};\r\n\r\nconst CreateLeasePage = (_props: RouteComponentProps) => {\r\n  const [generatedLease, setGeneratedLease] = useState<GeneratedLease>({\r\n    lease: \"\",\r\n    description: \"\",\r\n    classification: \"\",\r\n    interestRate: 0,\r\n    totalPayments: 0,\r\n    quantityOfPayments: 0,\r\n    presentValue: 0,\r\n    prepaid: true,\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    payments: [],\r\n    asset: [],\r\n    liability: [],\r\n  });\r\n  const [leaseInfo, setLeaseInfo] = useState([]);\r\n\r\n  const [values, handleChange] = useForm(leaseInitialValues);\r\n\r\n  const [\r\n    payments,\r\n    onChangePayments,\r\n    onClickAddPayment,\r\n    onClickDeletePayment,\r\n  ] = usePayments();\r\n\r\n  useEffect(() => {\r\n    if (generatedLease.lease === \"\") return;\r\n    const leaseExcelData = createExcelData(generatedLease);\r\n\r\n    setLeaseInfo(leaseExcelData);\r\n  }, [generatedLease]);\r\n\r\n  useEffect(() => {}, [values]);\r\n\r\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const genLease = createLease(payments, values);\r\n\r\n    setGeneratedLease(genLease.getAllLeaseInformation());\r\n  };\r\n\r\n  const inputObject = [\r\n    {\r\n      label: \"Name:\",\r\n      type: InputTypes.Text,\r\n      name: \"name\",\r\n      id: \"name\",\r\n      value: values.name,\r\n      onChange: handleChange,\r\n      required: true,\r\n    },\r\n    {\r\n      label: \"Description:\",\r\n      type: InputTypes.Text,\r\n      name: \"description\",\r\n      id: \"description\",\r\n      value: values.description,\r\n      onChange: handleChange,\r\n      required: true,\r\n    },\r\n    {\r\n      label: \"Classification:\",\r\n      type: InputTypes.Select,\r\n      name: \"classification\",\r\n      id: \"classification\",\r\n      value: values.classification,\r\n      onChange: handleChange,\r\n      options: [\r\n        { text: \"Operating\", value: \"operating\" },\r\n        { text: \"Finance\", value: \"finance\" },\r\n      ],\r\n    },\r\n    {\r\n      label: \"Use Economic Life:\",\r\n      type: InputTypes.Select,\r\n      name: \"useEconomicLife\",\r\n      id: \"useEconomicLife\",\r\n      value: values.useEconomicLife,\r\n      onChange: handleChange,\r\n      options: [\r\n        { text: \"Yes\", value: \"true\" },\r\n        { text: \"No\", value: \"false\" },\r\n      ],\r\n      show: values.classification === \"finance\",\r\n    },\r\n    {\r\n      label: \"Economic Life (years):\",\r\n      type: InputTypes.Number,\r\n      name: \"economicLife\",\r\n      id: \"economicLife\",\r\n      value: values.economicLife,\r\n      onChange: handleChange,\r\n      show:\r\n        values.useEconomicLife === \"true\" &&\r\n        values.classification === \"finance\",\r\n    },\r\n    {\r\n      label: \"Prepaid:\",\r\n      type: InputTypes.Select,\r\n      name: \"prepaid\",\r\n      id: \"prepaid\",\r\n      value: values.prepaid,\r\n      onChange: handleChange,\r\n      options: [\r\n        { text: \"Yes\", value: \"true\" },\r\n        { text: \"No\", value: \"false\" },\r\n      ],\r\n      required: true,\r\n    },\r\n\r\n    {\r\n      label: \"Interest Rate:\",\r\n      type: InputTypes.Number,\r\n      name: \"interestRate\",\r\n      id: \"interestRate\",\r\n      value: values.interestRate,\r\n      onChange: handleChange,\r\n      required: true,\r\n    },\r\n    {\r\n      label: \"Deferred Rent:\",\r\n      type: InputTypes.Number,\r\n      name: \"deferredRent\",\r\n      id: \"deferredRent\",\r\n      value: values.deferredRent,\r\n      onChange: handleChange,\r\n    },\r\n    {\r\n      label: \"Lease Incentive:\",\r\n      type: InputTypes.Number,\r\n      name: \"leaseIncentive\",\r\n      id: \"leaseIncentive\",\r\n      value: values.leaseIncentive,\r\n      onChange: handleChange,\r\n    },\r\n    {\r\n      label: \"Initial Direct Costs:\",\r\n      type: InputTypes.Number,\r\n      name: \"initialDirectCosts\",\r\n      id: \"initialDirectCosts\",\r\n      value: values.initialDirectCosts,\r\n      onChange: handleChange,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <StyledCreateLease className=\"create-lease-container\">\r\n      <h3>Create Lease</h3>\r\n      <form onSubmit={onSubmit}>\r\n        {inputObject.map((input, index) => (\r\n          <div key={`${input}-${index}`} className=\"input-container\">\r\n            <Input config={input} />\r\n          </div>\r\n        ))}\r\n        <div className=\"payments-container\">\r\n          <Payments\r\n            onChange={onChangePayments}\r\n            onClickAdd={onClickAddPayment}\r\n            onClickDelete={onClickDeletePayment}\r\n            paymentsArr={payments}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Create Lease</button>\r\n      </form>\r\n      {generatedLease.asset.length !== 0 ? (\r\n        <Download lease={leaseInfo} fileName={values.name} />\r\n      ) : null}\r\n\r\n      <div className=\"schedule-container\">\r\n        <div>\r\n          {generatedLease.liability.length !== 0 ? (\r\n            <>\r\n              <h3>Liability Schedule</h3>\r\n              <DataTable data={generatedLease.liability} />\r\n            </>\r\n          ) : null}\r\n        </div>\r\n        <div>\r\n          {generatedLease.asset.length !== 0 ? (\r\n            <>\r\n              <h3>Asset Schedule</h3>\r\n              <DataTable data={generatedLease.asset} />\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </StyledCreateLease>\r\n  );\r\n};\r\n\r\nexport default CreateLeasePage;\r\n","export const roundNumber = (number: number, decimals: number): number => {\r\n  return Number(number.toFixed(decimals));\r\n};\r\n","export const addMonth = (date: Date, months: number): Date => {\r\n  const month = date.getMonth() + months - 1;\r\n  const year = date.getFullYear();\r\n\r\n  if (month === 11) {\r\n    return new Date(year + 1, 0, 1);\r\n  } else {\r\n    return new Date(year, month + 1, 1);\r\n  }\r\n};\r\n","import { PaymentFrequency } from '../enums';\r\nimport { addMonth } from './addMonth';\r\n/**\r\n *Calculates the next month and next payment depending on the payment frequency.\r\n */\r\nconst monthlyCalculation = (\r\n  y: number,\r\n  startDate: string,\r\n  payment: number,\r\n  frequency: PaymentFrequency\r\n): { nextMonth: Date; monthlyPayment: number } => {\r\n  let nextMonth = addMonth(new Date(startDate), y);\r\n  let monthlyPayment = payment;\r\n\r\n  if (y === 0) {\r\n    nextMonth = new Date(startDate);\r\n  } else if (frequency === PaymentFrequency.Annual) {\r\n    if (y % 12 !== 0) {\r\n      monthlyPayment = 0;\r\n    }\r\n  } else if (frequency === PaymentFrequency.SemiAnnual) {\r\n    if (y % 6 !== 0) {\r\n      monthlyPayment = 0;\r\n    }\r\n  } else if (frequency === PaymentFrequency.Quarterly) {\r\n    if (y % 3 !== 0) {\r\n      monthlyPayment = 0;\r\n    }\r\n  }\r\n\r\n  return { nextMonth, monthlyPayment };\r\n};\r\n\r\nexport default monthlyCalculation;\r\n","import { LiabilityMonthlyValues } from '../../interfaces';\r\n\r\nexport class LiabilityMonthly {\r\n  shortTermBalance?: number;\r\n  longTermBalance?: number;\r\n\r\n  constructor(\r\n    public date: Date,\r\n    public payment: number,\r\n    public beginningBalance: number,\r\n    public interestRate: number,\r\n    public interestExpense: number,\r\n    public endingBalance: number,\r\n    public prepaid?: boolean\r\n  ) {\r\n    this.date = date;\r\n    this.beginningBalance = beginningBalance;\r\n    this.interestRate = interestRate;\r\n    this.interestExpense = interestExpense;\r\n    this.payment = payment;\r\n    this.endingBalance = endingBalance;\r\n  }\r\n\r\n  getMonthlyData(): LiabilityMonthlyValues {\r\n    return {\r\n      date: this.date,\r\n      beginningBalance: this.beginningBalance,\r\n      payment: this.payment,\r\n      interestExpense: this.interestExpense,\r\n      endingBalance: this.endingBalance,\r\n      shortTermBalance: this.shortTermBalance,\r\n      longTermBalance: this.longTermBalance\r\n    };\r\n  }\r\n}\r\n","import { roundNumber } from \".\";\r\nimport { LiabilityMonthly } from \"../classes/Liability/LiabilityMonthly\";\r\nimport { PaymentStream } from \"../interfaces\";\r\nimport { discountRate } from \"../../utils\";\r\n\r\n/**\r\n *Calculates liability monthly schedule.\r\n */\r\nconst generateLiability = (\r\n  paymentStream: PaymentStream[],\r\n  startingBalance: number,\r\n  interestRate: number,\r\n  prepaid: boolean\r\n) => {\r\n  let result = [];\r\n  const payments = [...paymentStream];\r\n\r\n  for (let i = 0; i < payments.length; i++) {\r\n    const date = new Date(payments[i].month);\r\n    const { payment } = payments[i];\r\n\r\n    const correctedInterestRate = discountRate(interestRate);\r\n\r\n    result.push(\r\n      calculateLiability(\r\n        startingBalance,\r\n        payment,\r\n        correctedInterestRate,\r\n        date,\r\n        prepaid,\r\n        i,\r\n        payments.length,\r\n        result\r\n      )\r\n    );\r\n  }\r\n\r\n  result = calculateSTLTBalances(result);\r\n\r\n  return result;\r\n};\r\n\r\nconst calculateLiability = (\r\n  startingBalance: number,\r\n  payment: number,\r\n  interestRate: number,\r\n  date: Date,\r\n  prepaid: boolean,\r\n  index: number,\r\n  paymentsLength: number,\r\n  schedule: any[]\r\n) => {\r\n  if (index === 0) {\r\n    const principal = payment;\r\n    const interestPayment = 0;\r\n\r\n    if (prepaid) {\r\n      const interestExpense = (startingBalance - payment) * interestRate;\r\n\r\n      const endingBalance = endBalance(\r\n        startingBalance,\r\n        interestExpense,\r\n        principal,\r\n        interestPayment\r\n      );\r\n\r\n      return new LiabilityMonthly(\r\n        date,\r\n        payment,\r\n        roundNumber(startingBalance, 2),\r\n        interestRate,\r\n        roundNumber(interestExpense, 2),\r\n        roundNumber(endingBalance, 2),\r\n        prepaid\r\n      );\r\n    } else {\r\n      const interestExpense = startingBalance * interestRate;\r\n      const endingBalance = endBalance(\r\n        startingBalance,\r\n        interestExpense,\r\n        principal,\r\n        interestPayment\r\n      );\r\n\r\n      return new LiabilityMonthly(\r\n        date,\r\n        payment,\r\n        roundNumber(startingBalance, 2),\r\n        interestRate,\r\n        roundNumber(interestExpense, 2),\r\n        roundNumber(endingBalance, 2),\r\n        prepaid\r\n      );\r\n    }\r\n  } else {\r\n    // get prior month ending balance and interest expense for\r\n    // current months beginning balance and interest payment\r\n    const { interestExpense, endingBalance } = schedule[\r\n      index - 1\r\n    ].getMonthlyData();\r\n\r\n    if (prepaid) {\r\n      let currentMonthInterestExpense =\r\n        (endingBalance - payment) * interestRate;\r\n\r\n      let principal = payment - interestExpense;\r\n      let interestPayment = interestExpense;\r\n\r\n      if (payment === 0) {\r\n        principal = 0;\r\n        interestPayment = 0;\r\n      }\r\n\r\n      if (index === paymentsLength - 1) {\r\n        currentMonthInterestExpense = 0;\r\n      }\r\n\r\n      const currentMonthEndingBalance = endBalance(\r\n        endingBalance,\r\n        currentMonthInterestExpense,\r\n        principal,\r\n        interestPayment\r\n      );\r\n\r\n      return new LiabilityMonthly(\r\n        date,\r\n        payment,\r\n        roundNumber(endingBalance, 2),\r\n        interestRate,\r\n        roundNumber(currentMonthInterestExpense, 2),\r\n        roundNumber(currentMonthEndingBalance, 2),\r\n        prepaid\r\n      );\r\n    } else {\r\n      const currentMonthInterestExpense = endingBalance * interestRate;\r\n\r\n      const principal = payment;\r\n\r\n      const interestPayment = 0;\r\n\r\n      const currentMonthEndingBalance =\r\n        endingBalance +\r\n        currentMonthInterestExpense -\r\n        principal -\r\n        interestPayment;\r\n\r\n      return new LiabilityMonthly(\r\n        date,\r\n        payment,\r\n        roundNumber(endingBalance, 2),\r\n        interestRate,\r\n        roundNumber(currentMonthInterestExpense, 2),\r\n        roundNumber(currentMonthEndingBalance, 2),\r\n        prepaid\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate the ending balance for the month\r\n * @param beginningBalance\r\n * @param interestExpense\r\n * @param principal\r\n * @param interestPayment\r\n * @returns\r\n */\r\nconst endBalance = (\r\n  beginningBalance: number,\r\n  interestExpense: number,\r\n  principal: number,\r\n  interestPayment: number\r\n): number => beginningBalance + interestExpense - principal - interestPayment;\r\n\r\n/**\r\n * Calculates the ST and LT balances for the liability schedule\r\n * @param liabilitySchedule\r\n * @returns\r\n */\r\nconst calculateSTLTBalances = (liabilitySchedule) => {\r\n  let result = [...liabilitySchedule];\r\n  let stBalance = 0;\r\n  let ltBalance = 0;\r\n\r\n  result.sort(\r\n    (a, b) => new Date(a.date).valueOf() - new Date(b.date).valueOf()\r\n  );\r\n\r\n  for (let i = 0; i < result.length; i++) {\r\n    // long term balance is equal to the ending balance 12 months out excluding month 1\r\n    // outside of that lt balance is equal to 0\r\n    if (result[i + 11]) {\r\n      ltBalance = result[i + 11].endingBalance;\r\n    } else {\r\n      ltBalance = 0;\r\n    }\r\n\r\n    stBalance = result[i].endingBalance - ltBalance;\r\n\r\n    if (i < result.length - 12) {\r\n      result[i].shortTermBalance = stBalance;\r\n      result[i].longTermBalance = ltBalance;\r\n    } else {\r\n      result[i].shortTermBalance = result[i].endingBalance;\r\n      result[i].longTermBalance = 0;\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default generateLiability;\r\n","import { roundNumber } from \"../../utils\";\r\n\r\nexport class AssetMonthly {\r\n  public endingBalance: number;\r\n\r\n  constructor(\r\n    public date: Date,\r\n    public beginningBalance: number,\r\n    public depreciation: number\r\n  ) {\r\n    this.beginningBalance = beginningBalance;\r\n    this.depreciation = depreciation;\r\n\r\n    const endBalance = this.beginningBalance - this.depreciation;\r\n    this.endingBalance = roundNumber(endBalance, 2);\r\n\r\n    this.date = date;\r\n  }\r\n\r\n  getMonthlyData() {\r\n    return {\r\n      date: this.date,\r\n      beginningBalance: this.beginningBalance,\r\n      depreciation: this.depreciation,\r\n      endingBalance: this.endingBalance,\r\n    };\r\n  }\r\n}\r\n","import { AssetMonthly } from \"../classes/Asset/AssetMonthly\";\r\nimport { LeaseClassification } from \"../enums\";\r\nimport { LiabilitySchedulePrint } from \"../interfaces\";\r\nimport { addMonth } from \"./addMonth\";\r\n\r\nconst calculateAssetSchedule = (\r\n  data: {\r\n    liabilitySchedule?: LiabilitySchedulePrint[];\r\n    totalPayments?: number;\r\n    classification: LeaseClassification;\r\n    startDate: Date;\r\n    life: number;\r\n    startingBalance: number;\r\n    monthlyDepreciation?: number;\r\n  },\r\n  straightLineRent?\r\n) => {\r\n  const {\r\n    startDate,\r\n    life,\r\n    startingBalance,\r\n    monthlyDepreciation,\r\n    liabilitySchedule,\r\n    classification,\r\n  } = data;\r\n\r\n  let result = [];\r\n\r\n  for (let i = 0; i < life; i++) {\r\n    let depreciation = monthlyDepreciation;\r\n\r\n    if (i === 0) {\r\n      if (classification === LeaseClassification.OPERATING) {\r\n        depreciation = straightLineRent - liabilitySchedule[i].interestExpense;\r\n      }\r\n      const month = new AssetMonthly(startDate, startingBalance, depreciation);\r\n\r\n      result.push(month);\r\n    } else {\r\n      const { endingBalance } = result[i - 1].getMonthlyData();\r\n      if (classification === LeaseClassification.OPERATING) {\r\n        depreciation = straightLineRent - liabilitySchedule[i].interestExpense;\r\n      }\r\n\r\n      const nextMonth = addMonth(startDate, i);\r\n      const month = new AssetMonthly(nextMonth, endingBalance, depreciation);\r\n\r\n      result.push(month);\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default calculateAssetSchedule;\r\n","import { AssetSchedulePrint } from \"../../interfaces\";\r\nimport { roundNumber } from \"../../utils\";\r\nimport { AssetMonthly } from \"./AssetMonthly\";\r\n\r\nexport class AssetBase {\r\n  startDate!: Date;\r\n  monthlyDepreciation!: number;\r\n  monthlyTransactions!: AssetMonthly[];\r\n  startingBalance!: number;\r\n  life!: number;\r\n\r\n  setProperties(startDate: string, startingBalance: number, life: number) {\r\n    this.startDate = new Date(startDate);\r\n    this.startingBalance = roundNumber(startingBalance, 2);\r\n    this.life = life;\r\n  }\r\n\r\n  // setPropertiesFromJSON(schedule: any) {\r\n  //   const { date, beginningBalance } = schedule[0];\r\n  //   const life = schedule.length;\r\n  //   this.setProperties(date, beginningBalance, life);\r\n  //\r\n  //   this.setMonthlyTransactionsFromJSON(schedule);\r\n  // }\r\n\r\n  getStartingBalance(): number {\r\n    return this.startingBalance;\r\n  }\r\n\r\n  getLife(): number {\r\n    return this.life;\r\n  }\r\n\r\n  getMonthlyTransactions(): AssetMonthly[] {\r\n    return this.monthlyTransactions;\r\n  }\r\n\r\n  getAssetData(): AssetSchedulePrint[] {\r\n    return this.monthlyTransactions.map((month) => {\r\n      const {\r\n        date,\r\n        beginningBalance,\r\n        depreciation,\r\n        endingBalance,\r\n      } = month.getMonthlyData();\r\n\r\n      // check if the ending balance is less than 1\r\n      // if so add it to the depreciation amount to account for rounding\r\n      // set ending balance to 0\r\n      if (endingBalance < 1) {\r\n        return {\r\n          date: date.toLocaleDateString(),\r\n          beginningBalance,\r\n          depreciation: roundNumber(endingBalance + depreciation, 2),\r\n          endingBalance: endingBalance - endingBalance,\r\n        };\r\n      } else {\r\n        return {\r\n          date: date.toLocaleDateString(),\r\n          beginningBalance,\r\n          depreciation,\r\n          endingBalance,\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  setMonthlyDepreciation(depreciation: number): void {\r\n    this.monthlyDepreciation = roundNumber(depreciation, 2);\r\n  }\r\n\r\n  setMonthlyTransactions(callback: Function): void {\r\n    this.monthlyTransactions = callback(\r\n      this.startDate,\r\n      this.life,\r\n      this.startingBalance,\r\n      this.monthlyDepreciation\r\n    );\r\n  }\r\n\r\n  // setMonthlyTransactionsFromJSON(data: any): void {\r\n  //   this.monthlyTransactions = data.map(\r\n  //     (month) =>\r\n  //       new AssetMonthly(\r\n  //         new Date(month.date),\r\n  //         month.beginningBalance,\r\n  //         month.depreciation\r\n  //       )\r\n  //   );\r\n  // }\r\n}\r\n","import { AssetMonthly } from \"./AssetMonthly\";\r\nimport { calculateAssetSchedule } from \"../../utils/index\";\r\nimport { AssetBase } from \"./AssetBase\";\r\nimport { LeaseClassification } from \"../../enums\";\r\n\r\nexport class AssetFinance extends AssetBase {\r\n  setPropertiesFinance(\r\n    startDate: string,\r\n    startingBalance: number,\r\n    life: number,\r\n    useEconomicLife: boolean,\r\n    economicLife?: number\r\n  ): void {\r\n    if (useEconomicLife) {\r\n      // economic life is corrected to months\r\n      const calculatedLife = economicLife * 12;\r\n      this.setProperties(startDate, startingBalance, calculatedLife);\r\n      this.calculateDepreciationWithEconomicLife(calculatedLife);\r\n    } else {\r\n      this.setProperties(startDate, startingBalance, life);\r\n      this.calculateDepreciation();\r\n    }\r\n\r\n    this.setMonthlyTransactions(this.calculateMonthlySchedule);\r\n  }\r\n\r\n  calculateDepreciationWithEconomicLife(economicLife): void {\r\n    const depreciation = this.getStartingBalance() / economicLife;\r\n\r\n    this.setMonthlyDepreciation(depreciation);\r\n  }\r\n\r\n  calculateDepreciation(): void {\r\n    const depreciation = this.getStartingBalance() / this.getLife();\r\n\r\n    this.setMonthlyDepreciation(depreciation);\r\n  }\r\n\r\n  calculateMonthlySchedule(\r\n    startDate: Date,\r\n    life: number,\r\n    startingBalance: number,\r\n    monthlyDepreciation: number\r\n  ): AssetMonthly[] {\r\n    const assetData = {\r\n      startDate,\r\n      life,\r\n      startingBalance,\r\n      monthlyDepreciation,\r\n      classification: LeaseClassification.FINANCE,\r\n    };\r\n\r\n    return calculateAssetSchedule(assetData);\r\n  }\r\n}\r\n","import { LeaseClassification } from \"../../enums\";\r\nimport { LiabilitySchedulePrint } from \"../../interfaces\";\r\nimport { calculateAssetSchedule } from \"../../utils\";\r\nimport { AssetBase } from \"./AssetBase\";\r\n\r\nexport class AssetOperating extends AssetBase {\r\n  private straightLineRent: number;\r\n\r\n  setPropertiesOperating(\r\n    startDate: string,\r\n    startingBalance: number,\r\n    deferredRent: number,\r\n    leaseIncentive: number,\r\n    initialDirectCosts: number,\r\n    life: number,\r\n    liabilitySchedule: LiabilitySchedulePrint[]\r\n  ): void {\r\n    // beginning balance is equal to PV less deferred rent less lease incentives plus initial direct costs\r\n    const beginningBalance =\r\n      startingBalance - deferredRent - leaseIncentive + initialDirectCosts;\r\n\r\n    this.setProperties(startDate, beginningBalance, life);\r\n    this.setMonthlyTransactions(\r\n      this.calculateMonthlySchedule(\r\n        liabilitySchedule,\r\n        leaseIncentive,\r\n        deferredRent,\r\n        initialDirectCosts\r\n      )\r\n    );\r\n  }\r\n\r\n  calculateMonthlySchedule(\r\n    liabilitySchedule: LiabilitySchedulePrint[],\r\n    leaseIncentive: number,\r\n    deferredRent: number,\r\n    initialDirectCosts: number\r\n  ) {\r\n    const totalPayments = liabilitySchedule.reduce(\r\n      (accumulator, currentValue) => accumulator + currentValue.payment,\r\n      0\r\n    );\r\n\r\n    return (startDate: Date, life: number, startingBalance: number) => {\r\n      this.straightLineRent =\r\n        (totalPayments - leaseIncentive - deferredRent + initialDirectCosts) /\r\n        life;\r\n\r\n      const assetData = {\r\n        startDate,\r\n        life,\r\n        startingBalance,\r\n        liabilitySchedule,\r\n        totalPayments,\r\n        classification: LeaseClassification.OPERATING,\r\n      };\r\n\r\n      return calculateAssetSchedule(assetData, this.straightLineRent);\r\n    };\r\n  }\r\n}\r\n","import {\r\n  LiabilitySchedulePrint,\r\n  LiabilityValues,\r\n  PaymentStream,\r\n} from \"../../interfaces\";\r\nimport { generateLiability } from \"../../utils\";\r\nimport { LiabilityMonthly } from \"./LiabilityMonthly\";\r\nimport { LeaseClassification } from \"../../enums\";\r\n\r\nexport class Liability implements LiabilityValues {\r\n  startDate: Date;\r\n  monthlyTransactions: LiabilityMonthly[];\r\n  payment: number;\r\n  paymentStream: PaymentStream[];\r\n  interestRate: number;\r\n  startingBalance: number;\r\n  life: number;\r\n  prepaid: boolean;\r\n\r\n  setProperties(\r\n    startDate: string,\r\n    payment: number,\r\n    paymentStream: PaymentStream[],\r\n    interestRate: number,\r\n    startingBalance: number,\r\n    life: number,\r\n    prepaid: boolean,\r\n    classification: string\r\n  ) {\r\n    if (classification === LeaseClassification.OPERATING) {\r\n      this.startingBalance = startingBalance;\r\n    } else {\r\n      this.startingBalance = startingBalance;\r\n    }\r\n\r\n    this.startDate = new Date(startDate);\r\n    this.paymentStream = paymentStream;\r\n    this.payment = payment;\r\n    this.interestRate = interestRate;\r\n    this.life = life;\r\n    this.prepaid = prepaid;\r\n\r\n    this.monthlyTransactions = this.calculateMonthlySchedule();\r\n  }\r\n\r\n  // setPropertiesJSON(data, paymentStream, interestRate, life, prepaid) {\r\n  // const { date, beginningBalance, payment } = data[0];\r\n  // this.startingBalance = beginningBalance;\r\n  // this.startDate = new Date(date);\r\n  // this.paymentStream = paymentStream;\r\n  // this.payment = payment;\r\n  // this.interestRate = interestRate;\r\n  // this.life = life;\r\n  // this.prepaid = prepaid;\r\n  // const liabilityMonthly = data.map((month) => {\r\n  //   const monthLblity = new LiabilityMonthly(\r\n  //     new Date(month.date),\r\n  //     month.payment,\r\n  //     month.beginningBalance,\r\n  //     this.interestRate,\r\n  //     month.interestPayment,\r\n  //     this.prepaid\r\n  //   );\r\n  //   monthLblity.shortTermBalance = month.shortTermBalance;\r\n  //   monthLblity.longTermBalance = month.longTermBalance;\r\n  //   return monthLblity;\r\n  // });\r\n  // this.monthlyTransactions = liabilityMonthly;\r\n  // }\r\n\r\n  calculateMonthlySchedule(): LiabilityMonthly[] {\r\n    return generateLiability(\r\n      this.paymentStream,\r\n      this.startingBalance,\r\n      this.interestRate,\r\n      this.prepaid\r\n    );\r\n  }\r\n\r\n  getLiabilityData(): LiabilitySchedulePrint[] {\r\n    return this.monthlyTransactions.map((month) => {\r\n      const {\r\n        date,\r\n        beginningBalance,\r\n        payment,\r\n        interestExpense,\r\n        endingBalance,\r\n        shortTermBalance,\r\n        longTermBalance,\r\n      } = month.getMonthlyData();\r\n\r\n      return {\r\n        date: date.toLocaleDateString(),\r\n        beginningBalance,\r\n        payment,\r\n        interestExpense,\r\n        endingBalance,\r\n        shortTermBalance,\r\n        longTermBalance,\r\n      };\r\n    });\r\n  }\r\n}\r\n","import { PaymentFrequency } from \"../../enums\";\r\nimport { PaymentValues } from \"../../interfaces\";\r\n// payment class\r\nexport class Payment {\r\n  private readonly payment: number;\r\n  private readonly frequency: PaymentFrequency;\r\n  private startDate: Date;\r\n  private endDate: Date;\r\n  private readonly payments: number;\r\n\r\n  constructor(config: PaymentValues) {\r\n    const { payment, frequency, startDate, endDate } = config;\r\n\r\n    this.payment = payment;\r\n    this.frequency = frequency;\r\n    this.startDate = new Date(startDate);\r\n    this.endDate = new Date(endDate);\r\n\r\n    // calculate the number of months between the start date and end date\r\n    let years = this.endDate.getFullYear() - this.startDate.getFullYear();\r\n    let months =\r\n      years * 12 + (this.endDate.getMonth() - this.startDate.getMonth()) + 1;\r\n\r\n    if (months <= 0) {\r\n      this.payments = 0;\r\n    } else {\r\n      this.payments = months;\r\n    }\r\n  }\r\n\r\n  getPaymentInformation() {\r\n    return {\r\n      payment: this.payment,\r\n      frequency: this.frequency,\r\n      startDate: this.startDate.toLocaleDateString(),\r\n      endDate: this.endDate.toLocaleDateString(),\r\n      payments: this.payments,\r\n    };\r\n  }\r\n\r\n  sumPayments(): number {\r\n    return this.payment * this.payments;\r\n  }\r\n\r\n  getPayments() {\r\n    return this.payments;\r\n  }\r\n}\r\n","import { PaymentStream } from \"../../interfaces\";\r\nimport { monthlyCalculation } from \"../../utils\";\r\nimport { Payment } from \"./Payment\";\r\nimport { PaymentInformation } from \"../../interfaces\";\r\n\r\nexport class Payments {\r\n  payments: Payment[];\r\n  constructor(payments: Payment[]) {\r\n    this.payments = payments;\r\n  }\r\n\r\n  sumAllPayments(): number {\r\n    let result = 0;\r\n    this.payments.forEach((payment) => {\r\n      result += payment.sumPayments();\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  paymentInformation(): PaymentInformation[] {\r\n    return this.payments.map((payment) => payment.getPaymentInformation());\r\n  }\r\n\r\n  quantityOfPayments(): number {\r\n    return this.payments.reduce((a, b) => a + b.getPayments(), 0);\r\n  }\r\n\r\n  paymentStream(): PaymentStream[] {\r\n    let arr = [];\r\n    // loop through all payment streams\r\n    for (let i = 0; i < this.payments.length; i++) {\r\n      const { startDate } = this.payments[i].getPaymentInformation();\r\n      const streamLength = this.payments[i].getPaymentInformation().payments;\r\n\r\n      // loop through payments to create an array of payments with dates to pass to the liability\r\n      for (let y = 0; y < streamLength; y++) {\r\n        const { payment, frequency } = this.payments[i].getPaymentInformation();\r\n        const { nextMonth, monthlyPayment } = monthlyCalculation(\r\n          y,\r\n          startDate,\r\n          payment,\r\n          frequency\r\n        );\r\n\r\n        arr.push({\r\n          month: nextMonth,\r\n          payment: monthlyPayment,\r\n          frequency: frequency,\r\n        });\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  }\r\n}\r\n","import { LeaseClassification } from \"../enums\";\r\nimport { AssetFinance } from \"./Asset/AssetFinance\";\r\nimport { AssetOperating } from \"./Asset/AssetOperating\";\r\nimport { Liability } from \"./Liability/Liability\";\r\nimport { Payment } from \"./Payments/Payment\";\r\nimport { LeaseValues } from \"../interfaces\";\r\nimport { PaymentFrequency } from \"../enums\";\r\nimport { Payments } from \"./Payments/Payments\";\r\nimport { AssetSchedulePrint } from \"../interfaces\";\r\nimport { LiabilitySchedulePrint } from \"../interfaces\";\r\nimport { PaymentInformation } from \"../interfaces\";\r\nimport { PaymentStream } from \"../interfaces\";\r\nimport { calculatePresentValue } from \"../../utils\";\r\n\r\n// interface LeaseInformation {\r\n//   lease: string;\r\n//   prepaid: boolean;\r\n//   description: string;\r\n//   classification: string;\r\n//   interestRate: number;\r\n//   totalPayments: number;\r\n//   quantityOfPayments: number;\r\n//   presentValue: number;\r\n//   startDate: string;\r\n//   endDate: string;\r\n// }\r\n\r\ninterface AllLeaseInformation {\r\n  lease: string;\r\n  prepaid: boolean;\r\n  description: string;\r\n  classification: string;\r\n  interestRate: number;\r\n  totalPayments: number;\r\n  quantityOfPayments: number;\r\n  presentValue: number;\r\n  startDate: string;\r\n  endDate: string;\r\n  payments: any[];\r\n  asset: AssetSchedulePrint[];\r\n  liability: LiabilitySchedulePrint[];\r\n}\r\n\r\ninterface PropertiesJSON {\r\n  lease: string;\r\n  prepaid: boolean;\r\n  description: string;\r\n  classification: string;\r\n  interestRate: number;\r\n  presentValue: number;\r\n  startDate: string;\r\n  endDate: string;\r\n  payments: {\r\n    payment: number;\r\n    frequency: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    payments: number;\r\n  }[];\r\n  asset: {}[];\r\n  liability: any[];\r\n}\r\n\r\n// parent class\r\nexport class Lease implements LeaseValues {\r\n  name: string;\r\n  description: string;\r\n  classification!: LeaseClassification;\r\n  interestRate: number;\r\n  payments!: Payments;\r\n  prepaid: boolean;\r\n  liability?: any;\r\n  asset?: any;\r\n  totalPayments: number;\r\n  paymentStream!: PaymentStream[];\r\n  quantityOfPayments: number;\r\n  presentValue: number;\r\n  startDate: string;\r\n  endDate: string;\r\n  deferredRent: number;\r\n  leaseIncentive: number;\r\n  initialDirectCosts: number;\r\n  useEconomicLife: boolean;\r\n  economicLife: number;\r\n\r\n  constructor() {\r\n    this.name = \"\";\r\n    this.description = \"\";\r\n    this.totalPayments = 0;\r\n    this.quantityOfPayments = 0;\r\n    this.presentValue = 0;\r\n    this.startDate = \"\";\r\n    this.endDate = \"\";\r\n    this.interestRate = 0;\r\n    this.prepaid = false;\r\n  }\r\n\r\n  setProperties(\r\n    name: string,\r\n    description: string,\r\n    classification: LeaseClassification,\r\n    interestRate: number,\r\n    payments: Payments,\r\n    prepaid: boolean,\r\n    deferredRent?: number,\r\n    leaseIncentive?: number,\r\n    initialDirectCosts?: number,\r\n    useEconomicLife?: boolean,\r\n    economicLife?: number\r\n  ): void {\r\n    this.name = name;\r\n    this.description = description;\r\n    this.classification = classification;\r\n    this.payments = payments;\r\n    this.totalPayments = this.getSumOfPayments();\r\n    this.interestRate = interestRate / 100;\r\n    this.prepaid = prepaid;\r\n    this.quantityOfPayments = this.getQuantityOfPayments();\r\n    this.deferredRent = deferredRent;\r\n    this.leaseIncentive = leaseIncentive;\r\n    this.initialDirectCosts = initialDirectCosts;\r\n    this.useEconomicLife = useEconomicLife;\r\n    this.economicLife = economicLife;\r\n\r\n    // create and sort the payments array to get the start and end dates of the lease\r\n    const [startDate, endDate, paymentStream] = this.getPaymentsArray();\r\n\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n    this.paymentStream = paymentStream;\r\n\r\n    this.presentValue = this.calculatePresentValue();\r\n\r\n    // Liability is calculated first because it is needed to calculate the\r\n    // operating lease asset schedule\r\n    this.liability = new Liability();\r\n\r\n    this.liability.setProperties(\r\n      this.startDate,\r\n      this.getSumOfPayments(),\r\n      this.paymentStream,\r\n      this.interestRate,\r\n      this.presentValue,\r\n      this.quantityOfPayments,\r\n      this.prepaid,\r\n      this.classification\r\n    );\r\n\r\n    const liabilityBalance = this.liability.getLiabilityData()[0]\r\n      .beginningBalance;\r\n\r\n    // create and calculate a new asset based off of classification\r\n    if (this.classification === LeaseClassification.FINANCE) {\r\n      this.asset = new AssetFinance();\r\n\r\n      this.asset.setPropertiesFinance(\r\n        this.startDate,\r\n        liabilityBalance,\r\n        this.paymentStream.length,\r\n        this.useEconomicLife,\r\n        this.economicLife\r\n      );\r\n    } else if (this.classification === LeaseClassification.OPERATING) {\r\n      this.asset = new AssetOperating();\r\n\r\n      this.asset.setPropertiesOperating(\r\n        this.startDate,\r\n        liabilityBalance,\r\n        this.deferredRent,\r\n        this.leaseIncentive,\r\n        this.initialDirectCosts,\r\n        this.paymentStream.length,\r\n        this.getLiabilitySchedule()\r\n      );\r\n    } else {\r\n      throw new Error(\r\n        \"Lease must be classified as either an operating or finance\"\r\n      );\r\n    }\r\n  }\r\n\r\n  setPropertiesFromJSON(data: PropertiesJSON): void {\r\n    const {\r\n      lease,\r\n      prepaid,\r\n      description,\r\n      classification,\r\n      interestRate,\r\n      payments,\r\n      asset,\r\n      liability,\r\n    } = data;\r\n\r\n    const leaseClassification =\r\n      classification === \"operating\"\r\n        ? LeaseClassification.OPERATING\r\n        : LeaseClassification.FINANCE;\r\n\r\n    const paymentArray = payments.map((el) => {\r\n      let frequency;\r\n      if (el.frequency === \"annual\") {\r\n        frequency = PaymentFrequency.Annual;\r\n      } else if (el.frequency === \"semiannual\") {\r\n        frequency = PaymentFrequency.SemiAnnual;\r\n      } else if (el.frequency === \"quarterly\") {\r\n        frequency = PaymentFrequency.Quarterly;\r\n      } else {\r\n        frequency = PaymentFrequency.Monthly;\r\n      }\r\n      return new Payment({\r\n        payment: el.payment,\r\n        frequency: frequency,\r\n        startDate: new Date(el.startDate).toLocaleDateString(),\r\n        endDate: new Date(el.endDate).toLocaleDateString(),\r\n      });\r\n    });\r\n\r\n    const paymentObjects = new Payments(paymentArray);\r\n\r\n    this.name = lease;\r\n    this.description = description;\r\n    this.classification = leaseClassification;\r\n    this.interestRate = interestRate;\r\n    this.payments = paymentObjects;\r\n    this.prepaid = prepaid;\r\n    this.totalPayments = this.getSumOfPayments();\r\n    this.quantityOfPayments = this.getQuantityOfPayments();\r\n\r\n    const [startDate, endDate, paymentStream] = this.getPaymentsArray();\r\n\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n    this.paymentStream = paymentStream;\r\n\r\n    this.liability = new Liability();\r\n    this.liability.setPropertiesJSON(\r\n      liability,\r\n      this.paymentStream,\r\n      this.interestRate,\r\n      liability.length,\r\n      this.prepaid\r\n    );\r\n\r\n    // create and calculate a new asset based off of classification\r\n    if (this.classification === LeaseClassification.FINANCE) {\r\n      this.asset = new AssetFinance();\r\n      this.asset.setPropertiesFromJSON(asset);\r\n    } else if (this.classification === LeaseClassification.OPERATING) {\r\n      this.asset = new AssetOperating();\r\n      this.asset.setPropertiesFromJSON(asset);\r\n    } else {\r\n      throw new Error(\r\n        \"Lease must be classified as either an operating or finance\"\r\n      );\r\n    }\r\n\r\n    this.presentValue = this.liability.getLiabilityData()[0].beginningBalance;\r\n  }\r\n\r\n  getPaymentsArray(): [string, string, PaymentStream[]] {\r\n    const paymentsArray = this.payments\r\n      .paymentInformation()\r\n      .sort(\r\n        (a, b) =>\r\n          new Date(a.startDate).valueOf() - new Date(b.startDate).valueOf()\r\n      );\r\n\r\n    const startDate = paymentsArray[0].startDate;\r\n    const endDate = paymentsArray[paymentsArray.length - 1].endDate;\r\n    const paymentStream = this.getPaymentStream();\r\n\r\n    return [startDate, endDate, paymentStream];\r\n  }\r\n\r\n  /**\r\n   * gets an array of payments\r\n   */\r\n  getPayments(): PaymentInformation[] {\r\n    return this.payments.paymentInformation();\r\n  }\r\n  /**\r\n   * gets the lease data\r\n   */\r\n  // getLeaseInformation(): LeaseInformation {\r\n  //   return {\r\n  //     lease: this.name,\r\n  //     prepaid: this.prepaid,\r\n  //     description: this.description,\r\n  //     classification: this.classification,\r\n  //     interestRate: this.interestRate,\r\n  //     totalPayments: this.totalPayments,\r\n  //     quantityOfPayments: this.quantityOfPayments,\r\n  //     presentValue: this.presentValue,\r\n  //     startDate: this.startDate,\r\n  //     endDate: this.endDate,\r\n  //   };\r\n  // }\r\n\r\n  /**\r\n   * gets all of the lease data\r\n   */\r\n  getAllLeaseInformation(): AllLeaseInformation {\r\n    return {\r\n      lease: this.name,\r\n      prepaid: this.prepaid,\r\n      description: this.description,\r\n      classification: this.classification,\r\n      interestRate: this.interestRate,\r\n      totalPayments: this.totalPayments,\r\n      quantityOfPayments: this.quantityOfPayments,\r\n      presentValue: this.presentValue,\r\n      startDate: this.startDate,\r\n      endDate: this.endDate,\r\n      payments: this.getPayments(),\r\n      asset: this.getAssetSchedule(),\r\n      liability: this.getLiabilitySchedule(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves the current month asset and liability schedules by providing the month requested as a string\r\n   * @param month\r\n   */\r\n  getCurrentMonth(\r\n    month: string\r\n  ): { lease: string; schedules: { asset; liability } } {\r\n    const asset = this.getAssetSchedule().filter(\r\n      (el) => new Date(month).valueOf() === new Date(el.date).valueOf()\r\n    );\r\n\r\n    const liability = this.getLiabilitySchedule().filter(\r\n      (el) => new Date(month).valueOf() === new Date(el.date).valueOf()\r\n    );\r\n\r\n    return {\r\n      lease: this.name,\r\n      schedules: {\r\n        asset,\r\n        liability,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * gets the total payments\r\n   */\r\n  getSumOfPayments(): number {\r\n    return this.payments.sumAllPayments();\r\n  }\r\n\r\n  /**\r\n   * gets the quantity of payments\r\n   */\r\n  getQuantityOfPayments(): number {\r\n    return this.payments.quantityOfPayments();\r\n  }\r\n  /**\r\n   * gets all of the payments as an array\r\n   */\r\n  getPaymentStream(): PaymentStream[] {\r\n    return this.payments.paymentStream();\r\n  }\r\n  /**\r\n   * gets the asset schedule as an array\r\n   */\r\n  getAssetSchedule(): AssetSchedulePrint[] {\r\n    return this.asset.getAssetData();\r\n  }\r\n  /**\r\n   * gets the liability schedule as an array\r\n   */\r\n  getLiabilitySchedule(): LiabilitySchedulePrint[] {\r\n    return this.liability.getLiabilityData();\r\n  }\r\n  /**\r\n   * Private function that calculates the present value of all payments\r\n   */\r\n  private calculatePresentValue(): number {\r\n    const paymentStream = this.paymentStream.map((month) => {\r\n      return { payment: month.payment, frequency: month.frequency };\r\n    });\r\n\r\n    return calculatePresentValue(\r\n      paymentStream,\r\n      this.interestRate,\r\n      this.prepaid\r\n    );\r\n  }\r\n}\r\n","import { formatDate } from \".\";\r\nimport {\r\n  Lease,\r\n  LeaseClassification,\r\n  Payment,\r\n  PaymentFrequency,\r\n  Payments,\r\n} from \"../leases\";\r\nimport { LeaseType } from \"../../hooks/useForm\";\r\n\r\nexport const generatePaymentStream = (payments): Payments => {\r\n  const paymentStream = payments.map((el) => {\r\n    const { amount, frequency, startDate, endDate } = el;\r\n    const stDate = formatDate(startDate);\r\n    const edDate = formatDate(endDate);\r\n\r\n    return new Payment({\r\n      payment: amount,\r\n      frequency:\r\n        frequency === \"monthly\"\r\n          ? PaymentFrequency.Monthly\r\n          : frequency === \"quarterly\"\r\n          ? PaymentFrequency.Quarterly\r\n          : frequency === \"semiAnnual\"\r\n          ? PaymentFrequency.SemiAnnual\r\n          : PaymentFrequency.Annual,\r\n      startDate: stDate,\r\n      endDate: edDate,\r\n    });\r\n  });\r\n\r\n  return new Payments(paymentStream);\r\n};\r\n\r\nexport const createLease = (payments, leaseInfo: LeaseType) => {\r\n  const {\r\n    name,\r\n    description,\r\n    interestRate,\r\n    deferredRent,\r\n    leaseIncentive,\r\n    initialDirectCosts,\r\n    economicLife,\r\n  } = leaseInfo;\r\n\r\n  const leasePayments = generatePaymentStream(payments);\r\n\r\n  const lease = new Lease();\r\n\r\n  const leaseClassification =\r\n    leaseInfo.classification === \"operating\"\r\n      ? LeaseClassification.OPERATING\r\n      : LeaseClassification.FINANCE;\r\n\r\n  const prepaid = leaseInfo.prepaid === \"true\";\r\n  const useEconomicLife = leaseInfo.useEconomicLife === \"true\";\r\n\r\n  lease.setProperties(\r\n    name,\r\n    description,\r\n    leaseClassification,\r\n    interestRate,\r\n    leasePayments,\r\n    prepaid,\r\n    Number(deferredRent),\r\n    Number(leaseIncentive),\r\n    Number(initialDirectCosts),\r\n    useEconomicLife,\r\n    Number(economicLife)\r\n  );\r\n\r\n  return lease;\r\n};\r\n","export const discountRate = (interestRate: number): number => interestRate / 12;\r\n","import { discountRate } from \"./index\";\r\n\r\nexport const calculatePresentValue = (\r\n  payments,\r\n  interestRate: number,\r\n  prepaid: boolean\r\n): number => {\r\n  const paymentStream = payments.map((month) => {\r\n    return { payment: month.payment, frequency: month.frequency };\r\n  });\r\n\r\n  const reducerFunction = calcPresentValue(interestRate, prepaid);\r\n\r\n  return paymentStream.reduce(reducerFunction, 0);\r\n};\r\n\r\n/**\r\n * Generates the reducer function for PV calculation\r\n * @param interestRate\r\n * @param prepaid\r\n * @returns\r\n */\r\nexport const calcPresentValue = (interestRate: number, prepaid: boolean) => {\r\n  return (\r\n    accumulator: number,\r\n    currentValue: { payment: number; frequency: string },\r\n    index: number\r\n  ) => {\r\n    const { payment } = currentValue;\r\n\r\n    const rateOfReturn = discountRate(interestRate);\r\n\r\n    if (prepaid) {\r\n      if (index === 0) return payment;\r\n\r\n      return accumulator + payment / Math.pow(1 + rateOfReturn, index);\r\n    } else {\r\n      return accumulator + payment / Math.pow(1 + rateOfReturn, index + 1);\r\n    }\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { checkDateIsAfter, getFirstDay, getLastDay } from \"../helpers/utils\";\r\n\r\nconst Payments = ({ onChange, onClickAdd, onClickDelete, paymentsArr }) => {\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleChange = (\r\n    e: React.FormEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n  ) => {\r\n    const { name, id, value } = e.currentTarget;\r\n    const indexValue = id.split(\" \")[1];\r\n\r\n    setError(\"\");\r\n\r\n    let updatedValue: string | number;\r\n\r\n    if (name === \"startDate\") {\r\n      updatedValue = getFirstDay(value);\r\n    } else if (name === \"endDate\") {\r\n      updatedValue = getLastDay(value);\r\n\r\n      if (!checkDateIsAfter(paymentsArr[indexValue].startDate, updatedValue)) {\r\n        setError(\"End date must be after start date\");\r\n        return;\r\n      }\r\n    } else if (name === \"amount\") {\r\n      updatedValue = Number(value);\r\n    } else {\r\n      updatedValue = value;\r\n    }\r\n\r\n    const oldPayment: {\r\n      startDate: string;\r\n      endDate: string;\r\n      frequency: string;\r\n      amount: number;\r\n    } = paymentsArr[indexValue];\r\n\r\n    const updatedPayment = {\r\n      ...oldPayment,\r\n      [name]: updatedValue,\r\n    };\r\n\r\n    const oldArray = [...paymentsArr];\r\n\r\n    oldArray[indexValue] = updatedPayment;\r\n\r\n    onChange(oldArray);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <button onClick={onClickAdd}>Add Payment</button>\r\n        <button onClick={onClickDelete}>Delete Payment</button>\r\n      </div>\r\n      {/* TODO create error component */}\r\n      {error !== \"\" ? <p>{error}</p> : null}\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Start Date</th>\r\n            <th>End Date</th>\r\n            <th>Frequency</th>\r\n            <th>Amount</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {paymentsArr.map((payment, index) => (\r\n            <tr key={index}>\r\n              <td>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"startDate\"\r\n                  id={`payment ${index}`}\r\n                  value={payment.startDate}\r\n                  onChange={handleChange}\r\n                  min={payment.min}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"endDate\"\r\n                  id={`payment ${index}`}\r\n                  value={payment.endDate}\r\n                  onChange={handleChange}\r\n                  min={getLastDay(payment.min)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <select\r\n                  name=\"frequency\"\r\n                  id={`payment ${index}`}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"monthly\">Monthly</option>\r\n                  <option value=\"quarterly\">Quarterly</option>\r\n                  <option value=\"semiAnnual\">Semi Annual</option>\r\n                  <option value=\"annual\">Annual</option>\r\n                </select>\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"amount\"\r\n                  id={`payment ${index}`}\r\n                  value={payment.amount}\r\n                  onChange={handleChange}\r\n                />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Payments;\r\n","import ReactExport from 'react-export-excel';\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n\r\nconst Download = ({ lease, fileName }) => {\r\n  return (\r\n    <ExcelFile\r\n      filename={fileName}\r\n      element={<button>Download Schedules</button>}\r\n    >\r\n      <ExcelSheet dataSet={lease} name=\"Organization\" />\r\n    </ExcelFile>\r\n  );\r\n};\r\n\r\nexport default Download;\r\n","import React, { useState } from 'react';\r\n\r\nexport interface LeaseType {\r\n  economicLife?: number;\r\n  useEconomicLife?: string;\r\n  name?: string;\r\n  description?: string;\r\n  classification?: string;\r\n  prepaid?: string;\r\n  interestRate?: number;\r\n  deferredRent?: number;\r\n  leaseIncentive?: number;\r\n  initialDirectCosts?: number;\r\n}\r\n\r\nconst useForm = (\r\n  initialValues: LeaseType\r\n): [\r\n  LeaseType,\r\n  (\r\n    event:\r\n      | React.FormEvent<HTMLInputElement>\r\n      | React.ChangeEvent<HTMLSelectElement>\r\n  ) => void\r\n] => {\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const handleChange = (\r\n    event:\r\n      | React.FormEvent<HTMLInputElement>\r\n      | React.ChangeEvent<HTMLSelectElement>\r\n  ): void => {\r\n    const { id, value } = event.currentTarget;\r\n\r\n    setValues({ ...values, [id]: value });\r\n  };\r\n\r\n  return [values, handleChange];\r\n};\r\n\r\nexport { useForm };\r\n","import { InputTypes } from \"../../pages/CreateLease\";\r\nimport React from \"react\";\r\n\r\ninterface ConfigObject {\r\n  label: string;\r\n  type: InputTypes;\r\n  id: string;\r\n  name: string;\r\n  value: string | number;\r\n  onChange: (\r\n    event:\r\n      | React.FormEvent<HTMLInputElement>\r\n      | React.ChangeEvent<HTMLSelectElement>\r\n  ) => void;\r\n  options?: { text: string; value: string }[];\r\n  show?: boolean;\r\n  required?: boolean;\r\n}\r\n\r\ninterface InputProps {\r\n  config: ConfigObject;\r\n}\r\n\r\nconst Input = (props: InputProps) => {\r\n  const {\r\n    label,\r\n    type,\r\n    name,\r\n    id,\r\n    value,\r\n    onChange,\r\n    options,\r\n    show,\r\n    required,\r\n  } = props.config;\r\n\r\n  if (show === undefined || show) {\r\n    if (type === InputTypes.Select) {\r\n      return (\r\n        <>\r\n          <label htmlFor={id}>{label}</label>\r\n          <select name={name} id={id} value={value} onChange={onChange}>\r\n            {options.map((option, index) => (\r\n              <option key={`${option}-${index}`} value={option.value}>\r\n                {option.text}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <label htmlFor={id}>{label}</label>\r\n        <input\r\n          type={type}\r\n          name={name}\r\n          id={id}\r\n          value={value}\r\n          onChange={onChange}\r\n          required={required}\r\n        />\r\n      </>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default Input;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledDataTable = styled.table`\r\n  border-collapse: collapse;\r\n  width: 50%;\r\n  margin-bottom: 5rem;\r\n  overflow: auto;\r\n\r\n  tr {\r\n    border-bottom: 1px solid black;\r\n  }\r\n\r\n  td {\r\n    vertical-align: bottom;\r\n    text-align: center;\r\n    padding: 0.5rem 2rem;\r\n  }\r\n\r\n  th {\r\n    vertical-align: bottom;\r\n    text-align: center;\r\n    padding-bottom: 0;\r\n    color: black;\r\n  }\r\n\r\n  tr:nth-child(even) {\r\n    background: #ecf0f1;\r\n  }\r\n`;\r\n\r\nexport { StyledDataTable };\r\n","import { capitalizeFirstLetter } from \"../../helpers/utils\";\r\nimport { StyledDataTable } from \"./StyledDataTable\";\r\n\r\ninterface Config {\r\n  data: {}[];\r\n}\r\n\r\n/**\r\n * Generates the rows for the data table\r\n * @param dataArray\r\n * @returns\r\n */\r\nconst createTableRows = (dataArray: {}[]) => (\r\n  <tbody>\r\n    {dataArray.map((row, index) => (\r\n      <tr key={`${row}-${index}`}>\r\n        {Object.keys(row).map((key) => {\r\n          if (typeof row[key] === \"number\") {\r\n            return (\r\n              <td key={key}>\r\n                {new Intl.NumberFormat(\"en-US\", {\r\n                  minimumFractionDigits: 2,\r\n                }).format(row[key])}\r\n              </td>\r\n            );\r\n          }\r\n          return <td key={key}>{row[key]}</td>;\r\n        })}\r\n      </tr>\r\n    ))}\r\n  </tbody>\r\n);\r\n\r\n/**\r\n * Generates the headers from an array of objects\r\n * @param dataArray\r\n * @returns\r\n */\r\nconst createTableHeaders = (dataArray: {}[]) => {\r\n  const headers = Object.keys(dataArray[0]);\r\n  let result = [];\r\n  headers\r\n    .map((header) => header.split(/(?=[A-Z])/))\r\n    .forEach((el) => {\r\n      let combinedText = \"\";\r\n      for (let i = 0; i < el.length; i++) {\r\n        combinedText = combinedText + \" \" + capitalizeFirstLetter(el[i]);\r\n      }\r\n      result.push(combinedText);\r\n    });\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {result.map((word, index) => (\r\n          <th key={`${word}-${index}`} style={{height: '40px'}}>{word}</th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\n/**\r\n * Datatable that automatically converts and array of objects to a table\r\n * with headers\r\n * @param props\r\n * @returns\r\n */\r\nconst DataTable = (props: Config) => {\r\n  const { data } = props;\r\n\r\n  const tableRows = createTableRows(data);\r\n  const tableHeader = createTableHeaders(data);\r\n\r\n  return (\r\n    <StyledDataTable>\r\n      {tableHeader}\r\n      {tableRows}\r\n    </StyledDataTable>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledCreateLease = styled.div`\r\n  font-family: inherit;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 2.5rem auto auto;\r\n  width: 50%;\r\n\r\n  h3 {\r\n    margin: 0 0 1rem;\r\n    background-size: 100% 100%;\r\n    color: black;\r\n    padding-bottom: 1rem;\r\n  }\r\n\r\n  .create-lease-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 50%;\r\n    margin: auto;\r\n  }\r\n\r\n  .schedule-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n  }\r\n\r\n  .schedule-container > div {\r\n    width: min-content;\r\n    margin: 0 auto auto 2rem;\r\n  }\r\n\r\n  .schedule-container > div > h3 {\r\n    text-align: center;\r\n  }\r\n\r\n  span {\r\n    align-self: center;\r\n  }\r\n\r\n  .input-container {\r\n    margin: auto;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .payments-container {\r\n    width: 75%;\r\n    display: flex;\r\n    margin: 1rem auto auto;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .payments-container > div {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n  }\r\n\r\n  .input-container > input,\r\n  .input-container > label,\r\n  .input-container > select {\r\n    margin-top: 0.5rem;\r\n    width: 50%;\r\n    font: inherit;\r\n    padding: 2px 2px;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  input,\r\n  select {\r\n    border-bottom: 1px solid grey;\r\n    border-top: none;\r\n    border-right: none;\r\n    border-left: none;\r\n    text-align: right;\r\n  }\r\n\r\n  input:focus,\r\n  select:focus {\r\n    background: #55efc4;\r\n  }\r\n\r\n  input[type=\"number\"] {\r\n    -moz-appearance: textfield;\r\n  }\r\n\r\n  button {\r\n    padding: 0.25rem;\r\n    font-family: inherit;\r\n    margin-left: 1rem;\r\n    font-size: 16px;\r\n    background-color: #3498db;\r\n    width: 8.5rem;\r\n  }\r\n\r\n  button[type=\"submit\"] {\r\n    margin: 2rem auto;\r\n    padding: 0.25rem 0.5rem;\r\n    font-weight: normal;\r\n    font-size: 18px;\r\n  }\r\n\r\n  .payments-container > table > tbody > tr > td > input {\r\n    margin-left: 0.25rem;\r\n  }\r\n\r\n  button:hover {\r\n    background-color: #74b9ff;\r\n  }\r\n\r\n  @media (min-width: 40rem) {\r\n    margin: 2.5rem auto auto;\r\n    width: 50%;\r\n  }\r\n`;\r\n\r\nexport { StyledCreateLease };\r\n","import React, { useState } from \"react\";\r\nimport { getNextDay } from \"../helpers/utils\";\r\n\r\nexport const usePayments = () => {\r\n  const [payments, setPayments] = useState([\r\n    { startDate: \"\", endDate: \"\", frequency: \"monthly\", amount: 0, min: \"\" },\r\n  ]);\r\n\r\n  const onChangePayments = (updatedPayments: []): void => {\r\n    setPayments(updatedPayments);\r\n  };\r\n\r\n  const onClickAddPayment = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    e.preventDefault();\r\n    const arr = [...payments];\r\n\r\n    const priorEndDate = arr[arr.length - 1].endDate;\r\n    const newStartDate = getNextDay(priorEndDate);\r\n\r\n    arr.push({\r\n      startDate: newStartDate,\r\n      endDate: \"\",\r\n      frequency: \"monthly\",\r\n      amount: 0,\r\n      min: newStartDate,\r\n    });\r\n\r\n    setPayments(arr);\r\n  };\r\n\r\n  const onClickDeletePayment = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    if (payments.length === 1) return;\r\n\r\n    const arr = [...payments];\r\n\r\n    arr.pop();\r\n\r\n    setPayments(arr);\r\n  };\r\n\r\n  return [payments, onChangePayments, onClickAddPayment, onClickDeletePayment];\r\n};\r\n","import { GeneratedLease } from \"../../interfaces\";\r\nimport { capitalizeFirstLetter } from \"./index\";\r\nimport { formatNumberPercent } from \"./formatting\";\r\n\r\nexport const createExcelData = (lease: GeneratedLease): any[] => {\r\n  const obj = { ...lease };\r\n\r\n  const assetSchedule = obj.asset.map((month) => [\r\n    month.date,\r\n    month.beginningBalance,\r\n    month.depreciation,\r\n    month.endingBalance,\r\n  ]);\r\n\r\n  const liabilitySchedule = obj.liability.map((month) => [\r\n    month.date,\r\n    month.beginningBalance,\r\n    month.payment,\r\n    month.interestExpense,\r\n    month.endingBalance,\r\n    month.shortTermBalance,\r\n    month.longTermBalance,\r\n  ]);\r\n\r\n  return [\r\n    {\r\n      columns: [\"\"],\r\n      data: [\r\n        [\"Name: \", capitalizeFirstLetter(obj.lease)],\r\n        [\"Description: \", capitalizeFirstLetter(obj.description)],\r\n        [\"Classification: \", capitalizeFirstLetter(obj.classification)],\r\n        [\"Prepaid\", obj.prepaid],\r\n        [\"Discount Rate: \", formatNumberPercent(obj.interestRate)],\r\n        [\"Total Payments: \", obj.totalPayments],\r\n        [\"Present Value: \", obj.presentValue],\r\n        [\"Start Date: \", obj.startDate],\r\n        [\"End Date: \", obj.endDate],\r\n      ],\r\n    },\r\n    { ySteps: 5, columns: [\"Asset Schedule\"], data: [[\"\"]] },\r\n    {\r\n      // xSteps: 1, // Will start putting cell with 1 empty cell on left most\r\n      ySteps: -1, //will put space of 5 rows,\r\n      columns: [\"Date\", \"Beginning Balance\", \"Depreciation\", \"Ending Balance\"],\r\n      data: assetSchedule,\r\n    },\r\n    {\r\n      ySteps: -assetSchedule.length - 2,\r\n      xSteps: 6,\r\n      columns: [\"Liability Schedule\"],\r\n      data: [[\"\"]],\r\n    },\r\n    {\r\n      ySteps: -1,\r\n      xSteps: 6,\r\n      columns: [\r\n        \"Date\",\r\n        \"Beginning Balance\",\r\n        \"Payment\",\r\n        \"Interest Expense\",\r\n        \"Ending Balance\",\r\n        \"Short Term Balance\",\r\n        \"Long Term Balance\",\r\n      ],\r\n      data: liabilitySchedule,\r\n    },\r\n  ];\r\n};\r\n","import { RouteComponentProps } from \"@reach/router\";\n\nconst HomePage = (_props: RouteComponentProps) => {\n  return (\n    <div>\n      <h4>Welcome!</h4>\n      <p>\n        This site is to help calculate a lease schedule in accordance with ASC\n        842 for lesee accounting.\n      </p>\n      <p>Please follow the links at the top</p>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import styled from \"styled-components\";\r\n\r\nconst StyledPresentValueCalc = styled.div`\r\n  font-family: inherit;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 2.5rem auto auto;\r\n  width: 50%;\r\n\r\n  button {\r\n    padding: 0.25rem;\r\n    font-family: inherit;\r\n  }\r\n\r\n  .payments-container {\r\n    margin-top: 2rem;\r\n  }\r\n\r\n  .payments-container,\r\n  .submit-button-container,\r\n  .input-container,\r\n  .presentvalue-container,\r\n  .payments-container > div {\r\n    display: flex;\r\n  }\r\n\r\n  .payments-container,\r\n  .submit-button-container {\r\n    align-content: center;\r\n  }\r\n\r\n  .submit-button-container {\r\n    justify-content: center;\r\n  }\r\n\r\n  .input-container,\r\n  .payments-container > div {\r\n    margin-top: 1rem;\r\n  }\r\n\r\n  .payments-container {\r\n    flex-direction: column;\r\n    align-content: center;\r\n  }\r\n\r\n  .error {\r\n    margin: 0;\r\n  }\r\n\r\n  .input-container,\r\n  .presentvalue-container {\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .payments-container > p {\r\n    margin: 0;\r\n  }\r\n\r\n  .presentvalue-container {\r\n    font-weight: bold;\r\n  }\r\n\r\n  .input-container > select,\r\n  .payments-container > table > tbody > tr > td > input,\r\n  .payments-container > table > tbody > tr > td > select {\r\n    width: 8rem;\r\n    padding: 2px 2px;\r\n  }\r\n\r\n  .payments-container > table > tbody > tr > td > select {\r\n    padding-bottom: 1px;\r\n  }\r\n\r\n  .payments-container > div,\r\n  .payments-container > table {\r\n    align-self: center;\r\n  }\r\n\r\n  .payments-container > div > button,\r\n  .submit-button-container > button {\r\n    margin-left: 1rem;\r\n    font-size: 16px;\r\n    background-color: #3498db;\r\n    width: 8.5rem;\r\n  }\r\n\r\n  .payments-container > div > button:hover,\r\n  .form-submit:hover {\r\n    background-color: #74b9ff;\r\n  }\r\n\r\n  button[type=\"submit\"] {\r\n    margin: 2rem auto;\r\n    padding: 0.25rem 0.5rem;\r\n    font-weight: normal;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n\r\nexport default StyledPresentValueCalc;\r\n","import { RouteComponentProps } from \"@reach/router\";\r\nimport Payments from \"../components/Payments\";\r\nimport { usePayments } from \"../hooks/usePayments\";\r\nimport React, { useState } from \"react\";\r\nimport { generatePaymentStream } from \"../helpers/utils\";\r\nimport { InputTypes } from \"./CreateLease\";\r\nimport { useForm } from \"../hooks/useForm\";\r\nimport Input from \"../components/input/Input\";\r\nimport { calculatePresentValue, formatNumberDecimal } from \"../helpers/utils\";\r\nimport StyledPresentValueCalc from \"./StyledPresentValueCalc\";\r\n\r\nconst leaseInitialValues = {\r\n  prepaid: \"true\",\r\n  interestRate: 0,\r\n};\r\n\r\nconst PresentValueCalculatorPage = (_props: RouteComponentProps) => {\r\n  const [presentValue, setPresentValue] = useState(0);\r\n  const [error, setError] = useState(\"\");\r\n  const [values, handleChange] = useForm(leaseInitialValues);\r\n\r\n  const [\r\n    payments,\r\n    onChangePayments,\r\n    onClickAddPayment,\r\n    onClickDeletePayment,\r\n  ] = usePayments();\r\n\r\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setError(\"\");\r\n\r\n    if (payments[0].startDate === \"\" && payments[0].endDate === \"\") {\r\n      setError(\"Please enter a payment start and end date\");\r\n\r\n      return;\r\n    } else if (payments[0].amount === 0) {\r\n      setError(\"Please enter a payment amount\");\r\n\r\n      return;\r\n    }\r\n\r\n    const leasePayments = generatePaymentStream(payments).paymentStream();\r\n\r\n    let prepaid: boolean;\r\n    prepaid = values.prepaid === \"true\";\r\n\r\n    setPresentValue(\r\n      calculatePresentValue(leasePayments, values.interestRate / 100, prepaid)\r\n    );\r\n  };\r\n\r\n  const inputObject = [\r\n    {\r\n      label: \"Prepaid:\",\r\n      type: InputTypes.Select,\r\n      name: \"prepaid\",\r\n      id: \"prepaid\",\r\n      value: values.prepaid,\r\n      onChange: handleChange,\r\n      options: [\r\n        { text: \"Yes\", value: \"true\" },\r\n        { text: \"No\", value: \"false\" },\r\n      ],\r\n      required: true,\r\n    },\r\n\r\n    {\r\n      label: \"Interest Rate:\",\r\n      type: InputTypes.Number,\r\n      name: \"interestRate\",\r\n      id: \"interestRate\",\r\n      value: values.interestRate,\r\n      onChange: handleChange,\r\n      required: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <StyledPresentValueCalc>\r\n      <h4>PV Calculator</h4>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"presentvalue-container\">\r\n          <p>Calculated Present Value: </p>\r\n          <p>{formatNumberDecimal(presentValue)}</p>\r\n        </div>\r\n        {inputObject.map((input, index) => (\r\n          <div key={`${input}-${index}`} className=\"input-container\">\r\n            <Input config={input} />\r\n          </div>\r\n        ))}\r\n        <div className=\"payments-container\">\r\n          <div className=\"error\">\r\n            <p>{error !== \"\" ? error : null}</p>\r\n          </div>\r\n          <Payments\r\n            onChange={onChangePayments}\r\n            onClickAdd={onClickAddPayment}\r\n            onClickDelete={onClickDeletePayment}\r\n            paymentsArr={payments}\r\n          />\r\n        </div>\r\n        <div className=\"submit-button-container\">\r\n          <button type=\"submit\" className=\"form-submit\">\r\n            Calculate PV\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </StyledPresentValueCalc>\r\n  );\r\n};\r\n\r\nexport default PresentValueCalculatorPage;\r\n","import { RouteComponentProps } from \"@reach/router\";\n\nconst FinanceLeaseCriteria = (_props: RouteComponentProps) => (\n  <>\n    <div>\n      <h4>\n        ASC 842-10-25-2 -:{\" \"}\n        <em>\n          \"A lessee shall classify a lease as a finance lease and a lessor shall\n          classify a lease as a sales-type lease when the lease meets any of the\n          following criteria at lease commencement:\"\n        </em>\n      </h4>\n    </div>\n    <div>\n      <ul>\n        <li>\n          Does the lease transfer ownership of the underlying asset to the\n          lessee by the end of the lease term?\n         </li>\n        <li>\n          Does the lease grant the lessee an option to purchase the underlying\n          asset that the lessee is reasonably certain to exercise.\n        </li>\n        <li>\n          Is the lease term for a major part of the remaining economic life of\n          the underlying asset?\n          <ul>\n            <li>\n              Consider a lease term to be for a major part if it is equal to or greater than 75% of the underlying asset's remaining economic life.\n            </li>\n            <li>\n              Leases that commence at or near the end of the underlying asset's economic life are exempt from applying this particular lease classification criterion.\n            </li>\n          </ul>\n        </li>\n        <li>\n          Is the present value of the sum of the lease payments and any residual\n          value guaranteed by the lessee that is not otherwise included in the\n          lease payments, substantially all of the fair value of the underlying\n          asset?\n        </li>\n        <li>\n          Is the underlying asset of such a specialized nature that it is\n          expected to have no alternative use to the lessor at the end of the\n          lease term?\n        </li>\n      </ul>\n    </div>\n    <div>\n      <p>If yes is answered to any of the criteria above then the lease must be classified as a finance lease.</p>\n    </div>\n  </>\n);\n\nexport default FinanceLeaseCriteria;\n","import { RouteComponentProps } from \"@reach/router\";\n\nconst InitialRecognition = (_props: RouteComponentProps) => (\n  <>\n    <div>\n      <h3>Lease Recognition</h3>\n    </div>\n    <div>\n      <h4>Lease Liability</h4>\n      <p>\n        On lease commencemnt, a lessee is required to measure and record a lease\n        liability equal to the present value of the remaining lease payments,\n        discounted using the rate implicit in the lease or the lessee's\n        incremental borrowing rate.\n      </p>\n      <p>\n        Lease payments used in measuring the lease liability are amounts due tot\n        he lessor excluding any payments that a lessee makes before lease\n        commencement.\n      </p>\n      <div>\n        <p>\n          Interest expense is recognized using the interest method\n        </p>\n      </div>\n    </div>\n    <div>\n      <h4>Right of Use Asset</h4>\n      <p>\n        At the commencement date the cost of the right of use asset shall\n        consist of all of the following\n      </p>\n      <ul>\n        <li>The amount of the initial measurement of the lease liability.</li>\n        <li>\n          Any Lease payments made to the lessor at or before the commencement\n          date, minus any lease incentives received.\n          <ul>\n            <li>\n              Lease payments made prior to lease commencement should be recorded\n              as prepaid rent. This prepaid amount should then be reclassified\n              to the right of use asset on the lease commencement date.\n            </li>\n          </ul>\n        </li>\n        <li>\n          Any initial direct costs incurred by the lessee.\n          <ul>\n            <li>\n              Should be recorded as an increase in the lessee's right of use\n              asset but should not be recorded as part of the lease liability.\n            </li>\n            <li>\n              Incremental costs of a lease that would not have been incurred had\n              the lease not been executed.\n            </li>\n            <table>\n              <tr>\n                <th>Included</th>\n                <th>Excluded</th>\n              </tr>\n              <tr>\n                <td>Commissions</td>\n                <td>Employee Salaries</td>\n              </tr>\n              <tr>\n                <td>Legal fees resulting from teh execution of the lease</td>\n                <td>\n                  Legal fees for services rendered before the execution of the\n                  lease\n                </td>\n              </tr>\n              <tr>\n                <td>Lease document preparation costs</td>\n                <td>Negotiating lease term and conditions</td>\n              </tr>\n              <tr>\n                <td>Certain payments to existing tenants to move out</td>\n                <td>Advertising</td>\n              </tr>\n              <tr>\n                <td>\n                  Consideration paid for a guarantee of a residual asset by an\n                  unrelated third party\n                </td>\n                <td>Depreciation</td>\n              </tr>\n              <tr>\n                <td></td>\n                <td>Costs related to an idle asset</td>\n              </tr>\n            </table>\n          </ul>\n        </li>\n      </ul>\n      <div>\n        <p>Asset is amortized using the straight line method over the shorter of the useful life of the asset or the lease term.</p>\n      </div>\n    </div>\n    <div>\n      <h4>Recording Lease</h4>\n      <p>Initial recording of a lease is the same for a finance and operating leases. It's the subsequent recognition and measurements that differ.</p>\n      <div>\n        <ul>\n          <li>Initial measurement of lease liability : $900,000</li>\n          <li>\n            Lease payments made to lessor before commencement date: $10,000\n          </li>\n          <li>Lease incentives received form lessor: $(50000)</li>\n          <li>Initial direct costs: $1,000</li>\n          <li>Initial measurement of right of use asset: $861,000</li>\n        </ul>\n        <table>\n          <tr>\n            <th>Account</th>\n            <th>Debit</th>\n            <th>Credit</th>\n          </tr>\n          <tr>On Lease execution.</tr>\n          <br />\n          <tr>Record initial lease payment</tr>\n          <tr>\n            <td>Prepaid Rent</td>\n            <td>10,000</td>\n          </tr>\n          <tr>\n            <td>Cash</td>\n            <td></td>\n            <td>10,000</td>\n          </tr>\n          <br />\n          <tr>Record receipt of lease incentive</tr>\n          <tr>\n            <td>Cash</td>\n            <td>50,000</td>\n            <td></td>\n          </tr>\n          <tr>\n            <td>Lease Incentive</td>\n            <td></td>\n            <td>50,000</td>\n          </tr>\n          <br />\n          <tr>On Lease commencement.</tr>\n          <br />\n          <tr>Record right of use asset and liability</tr>\n          <tr>\n            <td>Right of use asset</td>\n            <td>900,000</td>\n            <td></td>\n          </tr>\n          <tr>\n            <td>Lease Liability</td>\n            <td></td>\n            <td>900,000</td>\n          </tr>\n          <br />\n          <tr>Reclass lease incentive</tr>\n          <tr>\n            <td>Lease Incentive</td>\n            <td>50,000</td>\n            <td></td>\n          </tr>\n          <tr>\n            <td>Right of use asset</td>\n            <td></td>\n            <td>50,000</td>\n          </tr>\n          <br />\n          <tr>Reclass prepaid rent</tr>\n          <tr>\n            <td>Right of use asset</td>\n            <td>10,000</td>\n          </tr>\n          <tr>\n            <td>Prepaid Rent</td>\n            <td></td>\n            <td>10,000</td>\n          </tr>\n          <br />\n          <tr>Record Initial Direct Costs</tr>\n          <tr>\n            <td>Right of use asset</td>\n            <td>1,000</td>\n          </tr>\n          <tr>\n            <td>Accrued expenses</td>\n            <td></td>\n            <td>1,000</td>\n          </tr>\n        </table>\n      </div>\n    </div>\n  </>\n);\n\nexport default InitialRecognition;\n","import { RouteComponentProps } from \"@reach/router\";\n\nconst SubsequentRecognition = (_props: RouteComponentProps) => (\n  <>\n    <div>\n      <h3>Finance Lease</h3>\n      <p> Initial Recognition</p>\n      <ul>\n        <li>ROU Asset: $4,020.89</li>\n        <li>Lease Liability: $4,020.89</li>\n        <li>Lease payment of $1,250 annually</li>\n        <li>Discount Rate: 6.50%</li>\n        <li>Lease Term: 5 years</li>\n        <li>Rent is not prepaid</li>\n      </ul>\n      <p>\n        ROU Asset is amortized over the lease term because the economic life is\n        greater than the lease term. Yearly amortization expense = $1,000\n        ($5,000/5).\n      </p>\n      <table>\n        <tr>\n          <th>Year</th>\n          <th>\n            <p>Amortization &emsp;</p>\n          </th>\n          <th>ROU Asset</th>\n        </tr>\n        <tr>\n          <td>Lease Commencement</td>\n          <td></td>\n          <td>$4,020.89</td>\n        </tr>\n        <tr>\n          <td>Year 1</td>\n          <td>$804.18</td>\n          <td>$3,216.71</td>\n        </tr>\n        <tr>\n          <td>Year 2</td>\n          <td>$804.18</td>\n          <td>$2,412.53</td>\n        </tr>\n        <tr>\n          <td>Year 3</td>\n          <td>$804.18</td>\n          <td>$1,608.36</td>\n        </tr>\n        <tr>\n          <td>Year 4</td>\n          <td>$804.18</td>\n          <td>$804.18</td>\n        </tr>\n        <tr>\n          <td>Year 5</td>\n          <td>$804.18</td>\n          <td>$0</td>\n        </tr>\n        <tr>\n          <td>Total</td>\n          <td>$4,020.89</td>\n        </tr>\n      </table>\n      <div>\n        <p>\n          Interest expense on the lease liability would be calculated using a\n          rate of 6.50%, same rate used to initially measure the liability.\n        </p>\n        <table>\n          <tr>\n            <th>Year &emsp;</th>\n            <th>Payment &emsp;</th>\n            <th>Principal Paid &emsp;</th>\n            <th>Interest Paid &emsp;</th>\n            <th>Interest Expense &emsp;</th>\n            <th>Liability &emsp;</th>\n          </tr>\n          <tr>\n            <td>Lease Commencement</td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>$4,020.89</td>\n          </tr>\n          <tr>\n            <td>Year 1</td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>261.36</td>\n            <td>$4,282.25</td>\n          </tr>\n          <tr>\n            <td>Year 2</td>\n            <td>1,250</td>\n            <td>988.64</td>\n            <td>261.36</td>\n            <td>278.35</td>\n            <td>$3,310.89</td>\n          </tr>\n          <tr>\n            <td>Year 3</td>\n            <td>1,250</td>\n            <td>971.65</td>\n            <td>278.35</td>\n            <td>215.19</td>\n            <td>$2,275.78</td>\n          </tr>\n          <tr>\n            <td>Year 4</td>\n            <td>1,250</td>\n            <td>1,034.81</td>\n            <td>215.19</td>\n            <td>147.93</td>\n            <td>$1,173.71</td>\n          </tr>\n          <tr>\n            <td>Year 5</td>\n            <td>1,250</td>\n            <td>1,102.07</td>\n            <td>147.93</td>\n            <td>76.29</td>\n            <td>$0</td>\n          </tr>\n        </table>\n      </div>\n    </div>\n    <div>\n      <h3>Operating Lease</h3>\n      <p>Initial Recognition</p>\n      <ul>\n        <li>ROU Asset: $28,190</li>\n        <li>Lease Liability: $28,190</li>\n        <li>Lease payment of $1,250 monthly</li>\n        <li>Discount Rate: 4.00%</li>\n        <li>Lease Term: 2 years</li>\n      </ul>\n      <p>\n        Unlike a Finance lease the ROU Asset is not amortized on a straight line\n        basis. We will need to calculate the interest expense on the liability\n        in order to calculate the amortization on the asset.\n      </p>\n      <p>\n        The interest calculated is not considered interest expense, there is no\n        interest expense recorded in the income statement for operating leases.\n      </p>\n      <p>\n        First calculate the straight line rent expense ($1,250 * 24)/24 =\n        $1,250. In this case the straight line is equal to the monthly payments\n        because there is not rent payment escalation during the lease term.\n      </p>\n      <p>Liability Table:</p>\n      <table>\n        <tr>\n          <th>Year</th>\n          <th>Payment &emsp;</th>\n          <th>\"Interest\" &emsp;</th>\n          <th>Liability</th>\n        </tr>\n        <tr>\n          <td>Commencement</td>\n          <td></td>\n          <td></td>\n          <td>$28,190</td>\n        </tr>\n        <tr>\n          <td>Year 1</td>\n          <td>$15,000</td>\n          <td>$1,198.09</td>\n          <td>$14,388</td>\n        </tr>\n        <tr>\n          <td>Year 2</td>\n          <td>$15,000</td>\n          <td>$611.51</td>\n          <td>$0</td>\n        </tr>\n      </table>\n      <p>Asset Table:</p>\n      <table>\n        <tr>\n          <th>Year &emsp;</th>\n          <th>Straight Line Expense &emsp;</th>\n          <th>Interest On Liability &emsp;</th>\n          <th>Amortization &emsp;</th>\n          <th>ROU Asset</th>\n        </tr>\n        <tr>\n          <td>Commencement</td>\n          <td></td>\n          <td></td>\n          <td></td>\n          <td>$28,190</td>\n        </tr>\n        <tr>\n          <td>Year 1</td>\n          <td>$15,000</td>\n          <td>$1,198.09</td>\n          <td>$13,801.91</td>\n          <td>$14,388.09</td>\n        </tr>\n        <tr>\n          <td>Year 2</td>\n          <td>$15,000</td>\n          <td>$611.51</td>\n          <td>$14,388.49</td>\n          <td>($0.40)</td>\n        </tr>\n      </table>\n    </div>\n  </>\n);\n\nexport default SubsequentRecognition;\n","import { Router } from \"@reach/router\";\n\nimport \"./App.css\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport CreateLeasePage from \"./pages/CreateLease\";\nimport HomePage from \"./pages/HomePage\";\nimport PresentValueCalculatorPage from \"./pages/PresentValueCalculator\";\nimport FinanceLeaseCriteria from \"./pages/FinanceLeaseCriteria\";\nimport InitialRecognition from \"./pages/InitialRecognition\";\nimport SubsequentRecognition from \"./pages/Subsequent Recognition\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"page-container\">\n        <Router>\n          <HomePage path=\"/leases-react/\" />\n          <FinanceLeaseCriteria path={\"/leases-react/finance-criteria\"} />\n          <InitialRecognition path={\"/leases-react/initial-recognition\"} />\n          <SubsequentRecognition\n            path={\"/leases-react/subsequent-recognition\"}\n          />\n          <CreateLeasePage path=\"/leases-react/create-lease\" />\n          <PresentValueCalculatorPage path=\"leases-react/present-value-calculator\" />\n        </Router>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}