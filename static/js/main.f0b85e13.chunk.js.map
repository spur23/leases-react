{"version":3,"sources":["helpers/leases/enums/LeaseClassification.ts","helpers/leases/enums/PaymentFrequency.ts","components/navbar/StyledNavbar.ts","components/navbar/Navbar.tsx","helpers/utils/dateFunctions.ts","helpers/utils/formatting.ts","pages/CreateLease.tsx","helpers/leases/utils/roundNumber.ts","helpers/leases/utils/addMonth.ts","helpers/leases/utils/monthlyCalculation.ts","helpers/leases/classes/Liability/LiabilityMonthly.ts","helpers/leases/utils/calculateLiability.ts","helpers/leases/classes/Asset/AssetMonthly.ts","helpers/leases/utils/calculateAssetSchedule.ts","helpers/leases/classes/Asset/AssetBase.ts","helpers/leases/classes/Asset/AssetFinance.ts","helpers/leases/classes/Asset/AssetOperating.ts","helpers/leases/classes/Liability/Liability.ts","helpers/leases/classes/Payments/Payment.ts","helpers/leases/classes/Payments/Payments.ts","helpers/leases/classes/Lease.ts","helpers/utils/createLease.ts","helpers/utils/discountRate.ts","helpers/utils/calculatePresentValue.ts","components/Payments.tsx","components/Download.tsx","hooks/useForm.ts","components/input/Input.tsx","components/table/StyledDataTable.ts","components/table/DataTable.tsx","pages/StyledCreatLease.ts","hooks/usePayments.ts","helpers/utils/createExcelData.ts","pages/HomePage.tsx","pages/StyledPresentValueCalc.ts","pages/PresentValueCalculator.tsx","App.tsx","index.tsx"],"names":["LeaseClassification","PaymentFrequency","StyledNavbar","styled","div","Navbar","to","getLastDay","value","dateArr","split","date","Date","Number","newDate","getFullYear","getMonth","setDate","getDate","month","monthCorrection","year","day","monthNumber","toString","capitalizeFirstLetter","word","toUpperCase","substring","formatDate","InputTypes","roundNumber","number","decimals","toFixed","addMonth","months","monthlyCalculation","y","startDate","payment","frequency","nextMonth","monthlyPayment","Annual","SemiAnnual","Quarterly","LiabilityMonthly","beginningBalance","interestRate","interestExpense","endingBalance","prepaid","shortTermBalance","longTermBalance","this","calculateLiability","startingBalance","index","paymentsLength","schedule","principal","endBalance","getMonthlyData","currentMonthInterestExpense","interestPayment","currentMonthEndingBalance","calculateSTLTBalances","liabilitySchedule","result","stBalance","ltBalance","sort","a","b","valueOf","i","length","generateLiability","paymentStream","payments","correctedInterestRate","discountRate","push","AssetMonthly","depreciation","calculateAssetSchedule","data","straightLineRent","life","monthlyDepreciation","classification","OPERATING","AssetBase","monthlyTransactions","map","toLocaleDateString","callback","AssetFinance","useEconomicLife","economicLife","calculatedLife","setProperties","calculateDepreciationWithEconomicLife","calculateDepreciation","setMonthlyTransactions","calculateMonthlySchedule","getStartingBalance","setMonthlyDepreciation","getLife","assetData","FINANCE","AssetOperating","deferredRent","leaseIncentive","initialDirectCosts","totalPayments","reduce","accumulator","currentValue","Liability","Payment","config","endDate","Payments","forEach","sumPayments","getPaymentInformation","getPayments","arr","streamLength","Lease","name","description","liability","asset","quantityOfPayments","presentValue","getSumOfPayments","getQuantityOfPayments","getPaymentsArray","calculatePresentValue","liabilityBalance","getLiabilityData","setPropertiesFinance","Error","setPropertiesOperating","getLiabilitySchedule","lease","leaseClassification","paymentArray","el","Monthly","paymentObjects","setPropertiesJSON","setPropertiesFromJSON","paymentsArray","paymentInformation","getPaymentStream","getAssetSchedule","filter","schedules","sumAllPayments","getAssetData","generatePaymentStream","amount","stDate","edDate","reducerFunction","calcPresentValue","rateOfReturn","Math","pow","onChange","onClickAdd","onClickDelete","paymentsArr","useState","error","setError","handleChange","e","updatedValue","currentTarget","id","indexValue","getFirstDay","start","checkDateIsAfter","oldPayment","updatedPayment","oldArray","onClick","type","min","ExcelFile","ReactExport","ExcelSheet","Download","fileName","filename","element","dataSet","useForm","initialValues","values","setValues","event","Input","props","label","options","show","required","undefined","Select","htmlFor","option","text","StyledDataTable","table","DataTable","dataArray","tableRows","row","Object","keys","key","Intl","NumberFormat","minimumFractionDigits","format","tableHeader","headers","header","combinedText","createTableHeaders","StyledCreateLease","usePayments","setPayments","updatedPayments","preventDefault","newStartDate","getNextDay","pop","leaseInitialValues","CreateLeasePage","_props","generatedLease","setGeneratedLease","leaseInfo","setLeaseInfo","onChangePayments","onClickAddPayment","onClickDeletePayment","useEffect","leaseExcelData","obj","assetSchedule","columns","toLocaleString","maximumFractionDigits","style","ySteps","xSteps","createExcelData","inputObject","Text","className","onSubmit","genLease","leasePayments","createLease","getAllLeaseInformation","input","HomePage","StyledPresentValueCalc","PresentValueCalculatorPage","setPresentValue","App","path","CreateLease","PresentValueCalculator","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uYAAYA,ECAAC,E,mECoBGC,EAlBMC,IAAOC,IAAV,yQ,OCqBHC,EApBA,WACb,OACE,cAAC,EAAD,UACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,iBAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,6BAAT,4BAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,yCAAT,8C,+BCUGC,EAAa,SAACC,GACzB,IAAMC,EAAUD,EAAME,MAAM,KACtBC,EAAO,IAAIC,KACfC,OAAOJ,EAAQ,IACfI,OAAOJ,EAAQ,IAAM,EACrBI,OAAOJ,EAAQ,KAGXK,EAAU,IAAIF,KAAKD,EAAKI,cAAeJ,EAAKK,WAAa,EAAG,GAElEF,EAAQG,QAAQH,EAAQI,UAAY,GAEpC,IAAMC,EAAQC,EAAgBN,EAAQE,YAChCK,EAAOP,EAAQC,cACfO,EAAMR,EAAQI,UAEpB,MAAM,GAAN,OAAUG,EAAV,YAAkBF,EAAlB,YAA2BG,IAehBF,EAAkB,SAACD,GAC9B,IAAMI,EAAcV,OAAOM,GAK3B,OAFEI,EAAc,EAAI,GAAlB,WAA2BA,EAAc,GAAMA,EAAc,GAEzCC,YC7DXC,EAAwB,SAACC,GAAD,OACnCA,EAAK,GAAGC,cAAgBD,EAAKE,UAAU,IAE5BC,EAAa,SAACrB,GACzB,IAAMC,EAAUD,EAAME,MAAM,KAE5B,MAAM,GAAN,OAAUD,EAAQ,GAAlB,YAAwBA,EAAQ,GAAhC,YAAsCA,EAAQ,K,wBLNpCT,K,kBAAAA,E,uBAAAA,M,cCAAC,K,gBAAAA,E,wBAAAA,E,sBAAAA,E,mBAAAA,M,aKcA6B,E,gBCdCC,EAAc,SAACC,EAAgBC,GAC1C,OAAOpB,OAAOmB,EAAOE,QAAQD,KCDlBE,EAAW,SAACxB,EAAYyB,GACnC,IAAMjB,EAAQR,EAAKK,WAAaoB,EAAS,EACnCf,EAAOV,EAAKI,cAElB,OAAc,KAAVI,EACK,IAAIP,KAAKS,EAAO,EAAG,EAAG,GAEtB,IAAIT,KAAKS,EAAMF,EAAQ,EAAG,IC0BtBkB,EA5BY,SACzBC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAYP,EAAS,IAAIvB,KAAK2B,GAAYD,GAC1CK,EAAiBH,EAkBrB,OAhBU,IAANF,EACFI,EAAY,IAAI9B,KAAK2B,GACZE,IAAcxC,EAAiB2C,OACpCN,EAAI,KAAO,IACbK,EAAiB,GAEVF,IAAcxC,EAAiB4C,WACpCP,EAAI,IAAM,IACZK,EAAiB,GAEVF,IAAcxC,EAAiB6C,WACpCR,EAAI,IAAM,IACZK,EAAiB,GAId,CAAED,YAAWC,mBC5BTI,EAAb,WAIE,WACSpC,EACA6B,EACAQ,EACAC,EACAC,EACAC,EACAC,GACN,yBAPMzC,OAOP,KANO6B,UAMP,KALOQ,mBAKP,KAJOC,eAIP,KAHOC,kBAGP,KAFOC,gBAEP,KADOC,UACP,KAXFC,sBAWE,OAVFC,qBAUE,EACAC,KAAK5C,KAAOA,EACZ4C,KAAKP,iBAAmBA,EACxBO,KAAKN,aAAeA,EACpBM,KAAKL,gBAAkBA,EACvBK,KAAKf,QAAUA,EACfe,KAAKJ,cAAgBA,EAlBzB,kDAqBE,WACE,MAAO,CACLxC,KAAM4C,KAAK5C,KACXqC,iBAAkBO,KAAKP,iBACvBR,QAASe,KAAKf,QACdU,gBAAiBK,KAAKL,gBACtBC,cAAeI,KAAKJ,cACpBE,iBAAkBE,KAAKF,iBACvBC,gBAAiBC,KAAKD,qBA7B5B,KCwCME,EAAqB,SACzBC,EACAjB,EACAS,EACAtC,EACAyC,EACAM,EACAC,EACAC,GAEA,GAAc,IAAVF,EAAa,CACf,IAAMG,EAAYrB,EAGlB,GAAIY,EAAS,CACX,IAAMF,GAAmBO,EAAkBjB,GAAWS,EAEhDE,EAAgBW,EACpBL,EACAP,EACAW,EARoB,GAYtB,OAAO,IAAId,EACTpC,EACA6B,EACAT,EAAY0B,EAAiB,GAC7BR,EACAlB,EAAYmB,EAAiB,GAC7BnB,EAAYoB,EAAe,GAC3BC,GAGF,IAAMF,EAAkBO,EAAkBR,EACpCE,EAAgBW,EACpBL,EACAP,EACAW,EA1BoB,GA8BtB,OAAO,IAAId,EACTpC,EACA6B,EACAT,EAAY0B,EAAiB,GAC7BR,EACAlB,EAAYmB,EAAiB,GAC7BnB,EAAYoB,EAAe,GAC3BC,GAGC,MAGsCQ,EACzCF,EAAQ,GACRK,iBAFMb,EAHH,EAGGA,gBAAiBC,EAHpB,EAGoBA,cAIzB,GAAIC,EAAS,CACX,IAAIY,GACDb,EAAgBX,GAAWS,EAE1BY,EAAYrB,EAAUU,EACtBe,EAAkBf,EAEN,IAAZV,IACFqB,EAAY,EACZI,EAAkB,GAGhBP,IAAUC,EAAiB,IAC7BK,EAA8B,GAGhC,IAAME,EAA4BJ,EAChCX,EACAa,EACAH,EACAI,GAGF,OAAO,IAAIlB,EACTpC,EACA6B,EACAT,EAAYoB,EAAe,GAC3BF,EACAlB,EAAYiC,EAA6B,GACzCjC,EAAYmC,EAA2B,GACvCd,GAGF,IAAMY,EAA8Bb,EAAgBF,EAM9CiB,EACJf,EACAa,EANgBxB,EAEM,EAQxB,OAAO,IAAIO,EACTpC,EACA6B,EACAT,EAAYoB,EAAe,GAC3BF,EACAlB,EAAYiC,EAA6B,GACzCjC,EAAYmC,EAA2B,GACvCd,IAcFU,EAAa,SACjBd,EACAE,EACAW,EACAI,GAJiB,OAKNjB,EAAmBE,EAAkBW,EAAYI,GAOxDE,EAAwB,SAACC,GAC7B,IAAIC,EAAM,YAAOD,GACbE,EAAY,EACZC,EAAY,EAEhBF,EAAOG,MACL,SAACC,EAAGC,GAAJ,OAAU,IAAI9D,KAAK6D,EAAE9D,MAAMgE,UAAY,IAAI/D,KAAK8D,EAAE/D,MAAMgE,aAG1D,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAOQ,OAAQD,IAI/BL,EADEF,EAAOO,EAAI,IACDP,EAAOO,EAAI,IAAIzB,cAEf,EAGdmB,EAAYD,EAAOO,GAAGzB,cAAgBoB,EAElCK,EAAIP,EAAOQ,OAAS,IACtBR,EAAOO,GAAGvB,iBAAmBiB,EAC7BD,EAAOO,GAAGtB,gBAAkBiB,IAE5BF,EAAOO,GAAGvB,iBAAmBgB,EAAOO,GAAGzB,cACvCkB,EAAOO,GAAGtB,gBAAkB,GAIhC,OAAOe,GAGMS,EA3MW,SACxBC,EACAtB,EACAR,EACAG,GAKA,IAHA,IAAIiB,EAAS,GACPW,EAAQ,YAAOD,GAEZH,EAAI,EAAGA,EAAII,EAASH,OAAQD,IAAK,CACxC,IAAMjE,EAAO,IAAIC,KAAKoE,EAASJ,GAAGzD,OAC1BqB,EAAYwC,EAASJ,GAArBpC,QAEFyC,EAAwBC,EAAajC,GAE3CoB,EAAOc,KACL3B,EACEC,EACAjB,EACAyC,EACAtE,EACAyC,EACAwB,EACAI,EAASH,OACTR,IAON,OAFAA,EAASF,EAAsBE,ICnCpBe,EAAb,WAGE,WACSzE,EACAqC,EACAqC,GACN,yBAHM1E,OAGP,KAFOqC,mBAEP,KADOqC,eACP,KANKlC,mBAML,EACAI,KAAKP,iBAAmBA,EACxBO,KAAK8B,aAAeA,EAEpB,IAAMvB,EAAaP,KAAKP,iBAAmBO,KAAK8B,aAChD9B,KAAKJ,cAAgBpB,EAAY+B,EAAY,GAE7CP,KAAK5C,KAAOA,EAdhB,kDAiBE,WACE,MAAO,CACLA,KAAM4C,KAAK5C,KACXqC,iBAAkBO,KAAKP,iBACvBqC,aAAc9B,KAAK8B,aACnBlC,cAAeI,KAAKJ,mBAtB1B,KCoDemC,EAjDgB,SAC7BC,EASAC,GAaA,IAZI,IAEFjD,EAMEgD,EANFhD,UACAkD,EAKEF,EALFE,KACAhC,EAIE8B,EAJF9B,gBACAiC,EAGEH,EAHFG,oBACAtB,EAEEmB,EAFFnB,kBACAuB,EACEJ,EADFI,eAGEtB,EAAS,GAEJO,EAAI,EAAGA,EAAIa,EAAMb,IAAK,CAC7B,IAAIS,EAAeK,EAEnB,GAAU,IAANd,EAAS,CACPe,IAAmB3F,EAAoB4F,YACzCP,EAAeG,EAAmBpB,EAAkBQ,GAAG1B,iBAEzD,IAAM/B,EAAQ,IAAIiE,EAAa7C,EAAWkB,EAAiB4B,GAE3DhB,EAAOc,KAAKhE,OACP,CAAC,IACEgC,EAAkBkB,EAAOO,EAAI,GAAGb,iBAAhCZ,cACJwC,IAAmB3F,EAAoB4F,YACzCP,EAAeG,EAAmBpB,EAAkBQ,GAAG1B,iBAGzD,IAAMR,EAAYP,EAASI,EAAWqC,GAChCzD,EAAQ,IAAIiE,EAAa1C,EAAWS,EAAekC,GAEzDhB,EAAOc,KAAKhE,IAIhB,OAAOkD,GC/CIwB,EAAb,iDACEtD,eADF,OAEEmD,yBAFF,OAGEI,yBAHF,OAIErC,qBAJF,OAKEgC,UALF,mDAOE,SAAclD,EAAmBkB,EAAyBgC,GACxDlC,KAAKhB,UAAY,IAAI3B,KAAK2B,GAC1BgB,KAAKE,gBAAkB1B,EAAY0B,EAAiB,GACpDF,KAAKkC,KAAOA,IAVhB,gCAqBE,WACE,OAAOlC,KAAKE,kBAtBhB,qBAyBE,WACE,OAAOF,KAAKkC,OA1BhB,oCA6BE,WACE,OAAOlC,KAAKuC,sBA9BhB,0BAiCE,WACE,OAAOvC,KAAKuC,oBAAoBC,KAAI,SAAC5E,GAAW,IAAD,EAMzCA,EAAM4C,iBAJRpD,EAF2C,EAE3CA,KACAqC,EAH2C,EAG3CA,iBACAqC,EAJ2C,EAI3CA,aACAlC,EAL2C,EAK3CA,cAMF,OAAIA,EAAgB,EACX,CACLxC,KAAMA,EAAKqF,qBACXhD,mBACAqC,aAActD,EAAYoB,EAAgBkC,EAAc,GACxDlC,cAAeA,EAAgBA,GAG1B,CACLxC,KAAMA,EAAKqF,qBACXhD,mBACAqC,eACAlC,sBAzDV,oCA+DE,SAAuBkC,GACrB9B,KAAKmC,oBAAsB3D,EAAYsD,EAAc,KAhEzD,oCAmEE,SAAuBY,GACrB1C,KAAKuC,oBAAsBG,EACzB1C,KAAKhB,UACLgB,KAAKkC,KACLlC,KAAKE,gBACLF,KAAKmC,yBAxEX,KCCaQ,EAAb,0KACE,SACE3D,EACAkB,EACAgC,EACAU,EACAC,GAEA,GAAID,EAAiB,CAEnB,IAAME,EAAgC,GAAfD,EACvB7C,KAAK+C,cAAc/D,EAAWkB,EAAiB4C,GAC/C9C,KAAKgD,sCAAsCF,QAE3C9C,KAAK+C,cAAc/D,EAAWkB,EAAiBgC,GAC/ClC,KAAKiD,wBAGPjD,KAAKkD,uBAAuBlD,KAAKmD,4BAlBrC,mDAqBE,SAAsCN,GACpC,IAAMf,EAAe9B,KAAKoD,qBAAuBP,EAEjD7C,KAAKqD,uBAAuBvB,KAxBhC,mCA2BE,WACE,IAAMA,EAAe9B,KAAKoD,qBAAuBpD,KAAKsD,UAEtDtD,KAAKqD,uBAAuBvB,KA9BhC,sCAiCE,SACE9C,EACAkD,EACAhC,EACAiC,GAEA,IAAMoB,EAAY,CAChBvE,YACAkD,OACAhC,kBACAiC,sBACAC,eAAgB3F,EAAoB+G,SAGtC,OAAOzB,EAAuBwB,OA/ClC,GAAkCjB,GCArBmB,EAAb,4MACUxB,sBADV,8DAGE,SACEjD,EACAkB,EACAwD,EACAC,EACAC,EACA1B,EACArB,GAGA,IAAMpB,EACJS,EAAkBwD,EAAeC,EAAiBC,EAEpD5D,KAAK+C,cAAc/D,EAAWS,EAAkByC,GAChDlC,KAAKkD,uBACHlD,KAAKmD,yBACHtC,EACA8C,EACAD,EACAE,MAtBR,sCA2BE,SACE/C,EACA8C,EACAD,EACAE,GACC,IAAD,OACMC,EAAgBhD,EAAkBiD,QACtC,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,EAAa/E,UAC1D,GAGF,OAAO,SAACD,EAAiBkD,EAAchC,GACrC,EAAK+B,kBACF4B,EAAgBF,EAAiBD,EAAeE,GACjD1B,EAEF,IAAMqB,EAAY,CAChBvE,YACAkD,OACAhC,kBACAW,oBACAgD,gBACAzB,eAAgB3F,EAAoB4F,WAGtC,OAAON,EAAuBwB,EAAW,EAAKtB,uBApDpD,GAAoCK,GCIvB2B,EAAb,iDACEjF,eADF,OAEEuD,yBAFF,OAGEtD,aAHF,OAIEuC,mBAJF,OAKE9B,kBALF,OAMEQ,qBANF,OAOEgC,UAPF,OAQErC,aARF,mDAUE,SACEb,EACAC,EACAuC,EACA9B,EACAQ,EACAgC,EACArC,EACAuC,GAEuB3F,EAAoB4F,UACzCrC,KAAKE,gBAAkBA,EAKzBF,KAAKhB,UAAY,IAAI3B,KAAK2B,GAC1BgB,KAAKwB,cAAgBA,EACrBxB,KAAKf,QAAUA,EACfe,KAAKN,aAAeA,EACpBM,KAAKkC,KAAOA,EACZlC,KAAKH,QAAUA,EAEfG,KAAKuC,oBAAsBvC,KAAKmD,6BAjCpC,sCA6DE,WACE,OAAO5B,EACLvB,KAAKwB,cACLxB,KAAKE,gBACLF,KAAKN,aACLM,KAAKH,WAlEX,8BAsEE,WACE,OAAOG,KAAKuC,oBAAoBC,KAAI,SAAC5E,GAAW,IAAD,EASzCA,EAAM4C,iBAPRpD,EAF2C,EAE3CA,KACAqC,EAH2C,EAG3CA,iBACAR,EAJ2C,EAI3CA,QACAU,EAL2C,EAK3CA,gBACAC,EAN2C,EAM3CA,cACAE,EAP2C,EAO3CA,iBACAC,EAR2C,EAQ3CA,gBAGF,MAAO,CACL3C,KAAMA,EAAKqF,qBACXhD,mBACAR,UACAU,kBACAC,gBACAE,mBACAC,0BAzFR,KCNamE,EAAb,WAOE,WAAYC,GAAwB,yBANnBlF,aAMkB,OALlBC,eAKkB,OAJ3BF,eAI2B,OAH3BoF,aAG2B,OAFlB3C,cAEkB,MACzBxC,EAA2CkF,EAA3ClF,QAASC,EAAkCiF,EAAlCjF,UAAWF,EAAuBmF,EAAvBnF,UAAWoF,EAAYD,EAAZC,QAEvCpE,KAAKf,QAAUA,EACfe,KAAKd,UAAYA,EACjBc,KAAKhB,UAAY,IAAI3B,KAAK2B,GAC1BgB,KAAKoE,QAAU,IAAI/G,KAAK+G,GAGxB,IACIvF,EACM,IAFEmB,KAAKoE,QAAQ5G,cAAgBwC,KAAKhB,UAAUxB,gBAExCwC,KAAKoE,QAAQ3G,WAAauC,KAAKhB,UAAUvB,YAAc,EAGrEuC,KAAKyB,SADH5C,GAAU,EACI,EAEAA,EAvBtB,yDA2BE,WACE,MAAO,CACLI,QAASe,KAAKf,QACdC,UAAWc,KAAKd,UAChBF,UAAWgB,KAAKhB,UAAUyD,qBAC1B2B,QAASpE,KAAKoE,QAAQ3B,qBACtBhB,SAAUzB,KAAKyB,YAjCrB,yBAqCE,WACE,OAAOzB,KAAKf,QAAUe,KAAKyB,WAtC/B,yBAyCE,WACE,OAAOzB,KAAKyB,aA1ChB,KCEa4C,EAAb,WAEE,WAAY5C,GAAsB,yBADlCA,cACiC,EAC/BzB,KAAKyB,SAAWA,EAHpB,kDAME,WACE,IAAIX,EAAS,EAKb,OAJAd,KAAKyB,SAAS6C,SAAQ,SAACrF,GACrB6B,GAAU7B,EAAQsF,iBAGbzD,IAZX,gCAeE,WACE,OAAOd,KAAKyB,SAASe,KAAI,SAACvD,GAAD,OAAaA,EAAQuF,6BAhBlD,gCAmBE,WACE,OAAOxE,KAAKyB,SAASqC,QAAO,SAAC5C,EAAGC,GAAJ,OAAUD,EAAIC,EAAEsD,gBAAe,KApB/D,2BAuBE,WAGE,IAFA,IAAIC,EAAM,GAEDrD,EAAI,EAAGA,EAAIrB,KAAKyB,SAASH,OAAQD,IAKxC,IAL8C,IACtCrC,EAAcgB,KAAKyB,SAASJ,GAAGmD,wBAA/BxF,UACF2F,EAAe3E,KAAKyB,SAASJ,GAAGmD,wBAAwB/C,SAGrD1C,EAAI,EAAGA,EAAI4F,EAAc5F,IAAK,CAAC,IAAD,EACNiB,KAAKyB,SAASJ,GAAGmD,wBAAxCvF,EAD6B,EAC7BA,QAASC,EADoB,EACpBA,UADoB,EAECJ,EACpCC,EACAC,EACAC,EACAC,GAJMC,EAF6B,EAE7BA,UAAWC,EAFkB,EAElBA,eAOnBsF,EAAI9C,KAAK,CACPhE,MAAOuB,EACPF,QAASG,EACTF,UAAWA,IAKjB,OAAOwF,MAhDX,KC2DaE,EAAb,WAqBE,aAAe,yBApBfC,UAoBc,OAnBdC,iBAmBc,OAlBd1C,oBAkBc,OAjBd1C,kBAiBc,OAhBd+B,cAgBc,OAfd5B,aAec,OAddkF,eAcc,OAbdC,WAac,OAZdnB,mBAYc,OAXdrC,mBAWc,OAVdyD,wBAUc,OATdC,kBASc,OARdlG,eAQc,OAPdoF,aAOc,OANdV,kBAMc,OALdC,oBAKc,OAJdC,wBAIc,OAHdhB,qBAGc,OAFdC,kBAEc,EACZ7C,KAAK6E,KAAO,GACZ7E,KAAK8E,YAAc,GACnB9E,KAAK6D,cAAgB,EACrB7D,KAAKiF,mBAAqB,EAC1BjF,KAAKkF,aAAe,EACpBlF,KAAKhB,UAAY,GACjBgB,KAAKoE,QAAU,GACfpE,KAAKN,aAAe,EACpBM,KAAKH,SAAU,EA9BnB,iDAiCE,SACEgF,EACAC,EACA1C,EACA1C,EACA+B,EACA5B,EACA6D,EACAC,EACAC,EACAhB,EACAC,GAEA7C,KAAK6E,KAAOA,EACZ7E,KAAK8E,YAAcA,EACnB9E,KAAKoC,eAAiBA,EACtBpC,KAAKyB,SAAWA,EAChBzB,KAAK6D,cAAgB7D,KAAKmF,mBAC1BnF,KAAKN,aAAeA,EAAe,IACnCM,KAAKH,QAAUA,EACfG,KAAKiF,mBAAqBjF,KAAKoF,wBAC/BpF,KAAK0D,aAAeA,EACpB1D,KAAK2D,eAAiBA,EACtB3D,KAAK4D,mBAAqBA,EAC1B5D,KAAK4C,gBAAkBA,EACvB5C,KAAK6C,aAAeA,EAbd,MAgBsC7C,KAAKqF,mBAhB3C,mBAgBCrG,EAhBD,KAgBYoF,EAhBZ,KAgBqB5C,EAhBrB,KAkBNxB,KAAKhB,UAAYA,EACjBgB,KAAKoE,QAAUA,EACfpE,KAAKwB,cAAgBA,EAErBxB,KAAKkF,aAAelF,KAAKsF,wBAIzBtF,KAAK+E,UAAY,IAAId,EAErBjE,KAAK+E,UAAUhC,cACb/C,KAAKhB,UACLgB,KAAKmF,mBACLnF,KAAKwB,cACLxB,KAAKN,aACLM,KAAKkF,aACLlF,KAAKiF,mBACLjF,KAAKH,QACLG,KAAKoC,gBAGP,IAAMmD,EAAmBvF,KAAK+E,UAAUS,mBAAmB,GACxD/F,iBAGH,GAAIO,KAAKoC,iBAAmB3F,EAAoB+G,QAC9CxD,KAAKgF,MAAQ,IAAIrC,EAEjB3C,KAAKgF,MAAMS,qBACTzF,KAAKhB,UACLuG,EACAvF,KAAKwB,cAAcF,OACnBtB,KAAK4C,gBACL5C,KAAK6C,kBAEF,IAAI7C,KAAKoC,iBAAmB3F,EAAoB4F,UAarD,MAAM,IAAIqD,MACR,8DAbF1F,KAAKgF,MAAQ,IAAIvB,EAEjBzD,KAAKgF,MAAMW,uBACT3F,KAAKhB,UACLuG,EACAvF,KAAK0D,aACL1D,KAAK2D,eACL3D,KAAK4D,mBACL5D,KAAKwB,cAAcF,OACnBtB,KAAK4F,2BA5Gb,mCAqHE,SAAsB5D,GAA6B,IAE/C6D,EAQE7D,EARF6D,MACAhG,EAOEmC,EAPFnC,QACAiF,EAME9C,EANF8C,YACA1C,EAKEJ,EALFI,eACA1C,EAIEsC,EAJFtC,aACA+B,EAGEO,EAHFP,SACAuD,EAEEhD,EAFFgD,MACAD,EACE/C,EADF+C,UAGIe,EACe,cAAnB1D,EACI3F,EAAoB4F,UACpB5F,EAAoB+G,QAEpBuC,EAAetE,EAASe,KAAI,SAACwD,GACjC,IAAI9G,EAUJ,OAREA,EADmB,WAAjB8G,EAAG9G,UACOxC,EAAiB2C,OACH,eAAjB2G,EAAG9G,UACAxC,EAAiB4C,WACH,cAAjB0G,EAAG9G,UACAxC,EAAiB6C,UAEjB7C,EAAiBuJ,QAExB,IAAI/B,EAAQ,CACjBjF,QAAS+G,EAAG/G,QACZC,UAAWA,EACXF,UAAW,IAAI3B,KAAK2I,EAAGhH,WAAWyD,qBAClC2B,QAAS,IAAI/G,KAAK2I,EAAG5B,SAAS3B,0BAI5ByD,EAAiB,IAAI7B,EAAS0B,GAEpC/F,KAAK6E,KAAOgB,EACZ7F,KAAK8E,YAAcA,EACnB9E,KAAKoC,eAAiB0D,EACtB9F,KAAKN,aAAeA,EACpBM,KAAKyB,SAAWyE,EAChBlG,KAAKH,QAAUA,EACfG,KAAK6D,cAAgB7D,KAAKmF,mBAC1BnF,KAAKiF,mBAAqBjF,KAAKoF,wBA7CiB,MA+CJpF,KAAKqF,mBA/CD,mBA+CzCrG,EA/CyC,KA+C9BoF,EA/C8B,KA+CrB5C,EA/CqB,KA+DhD,GAdAxB,KAAKhB,UAAYA,EACjBgB,KAAKoE,QAAUA,EACfpE,KAAKwB,cAAgBA,EAErBxB,KAAK+E,UAAY,IAAId,EACrBjE,KAAK+E,UAAUoB,kBACbpB,EACA/E,KAAKwB,cACLxB,KAAKN,aACLqF,EAAUzD,OACVtB,KAAKH,SAIHG,KAAKoC,iBAAmB3F,EAAoB+G,QAC9CxD,KAAKgF,MAAQ,IAAIrC,EACjB3C,KAAKgF,MAAMoB,sBAAsBpB,OAC5B,IAAIhF,KAAKoC,iBAAmB3F,EAAoB4F,UAIrD,MAAM,IAAIqD,MACR,8DAJF1F,KAAKgF,MAAQ,IAAIvB,EACjBzD,KAAKgF,MAAMoB,sBAAsBpB,GAOnChF,KAAKkF,aAAelF,KAAK+E,UAAUS,mBAAmB,GAAG/F,mBAhM7D,8BAmME,WACE,IAAM4G,EAAgBrG,KAAKyB,SACxB6E,qBACArF,MACC,SAACC,EAAGC,GAAJ,OACE,IAAI9D,KAAK6D,EAAElC,WAAWoC,UAAY,IAAI/D,KAAK8D,EAAEnC,WAAWoC,aAO9D,MAAO,CAJWiF,EAAc,GAAGrH,UACnBqH,EAAcA,EAAc/E,OAAS,GAAG8C,QAClCpE,KAAKuG,sBA7M/B,yBAqNE,WACE,OAAOvG,KAAKyB,SAAS6E,uBAtNzB,oCA6OE,WACE,MAAO,CACLT,MAAO7F,KAAK6E,KACZhF,QAASG,KAAKH,QACdiF,YAAa9E,KAAK8E,YAClB1C,eAAgBpC,KAAKoC,eACrB1C,aAAcM,KAAKN,aACnBmE,cAAe7D,KAAK6D,cACpBoB,mBAAoBjF,KAAKiF,mBACzBC,aAAclF,KAAKkF,aACnBlG,UAAWgB,KAAKhB,UAChBoF,QAASpE,KAAKoE,QACd3C,SAAUzB,KAAKyE,cACfO,MAAOhF,KAAKwG,mBACZzB,UAAW/E,KAAK4F,0BA3PtB,6BAmQE,SACEhI,GAEA,IAAMoH,EAAQhF,KAAKwG,mBAAmBC,QACpC,SAACT,GAAD,OAAQ,IAAI3I,KAAKO,GAAOwD,YAAc,IAAI/D,KAAK2I,EAAG5I,MAAMgE,aAGpD2D,EAAY/E,KAAK4F,uBAAuBa,QAC5C,SAACT,GAAD,OAAQ,IAAI3I,KAAKO,GAAOwD,YAAc,IAAI/D,KAAK2I,EAAG5I,MAAMgE,aAG1D,MAAO,CACLyE,MAAO7F,KAAK6E,KACZ6B,UAAW,CACT1B,QACAD,gBAlRR,8BA0RE,WACE,OAAO/E,KAAKyB,SAASkF,mBA3RzB,mCAiSE,WACE,OAAO3G,KAAKyB,SAASwD,uBAlSzB,8BAuSE,WACE,OAAOjF,KAAKyB,SAASD,kBAxSzB,8BA6SE,WACE,OAAOxB,KAAKgF,MAAM4B,iBA9StB,kCAmTE,WACE,OAAO5G,KAAK+E,UAAUS,qBApT1B,mCAyTE,WACE,IAAMhE,EAAgBxB,KAAKwB,cAAcgB,KAAI,SAAC5E,GAC5C,MAAO,CAAEqB,QAASrB,EAAMqB,QAASC,UAAWtB,EAAMsB,cAGpD,OAAOoG,EACL9D,EACAxB,KAAKN,aACLM,KAAKH,aAjUX,KCtDagH,EAAwB,SAACpF,GACpC,IAAMD,EAAgBC,EAASe,KAAI,SAACwD,GAAQ,IAClCc,EAA0Cd,EAA1Cc,OAAQ5H,EAAkC8G,EAAlC9G,UAAWF,EAAuBgH,EAAvBhH,UAAWoF,EAAY4B,EAAZ5B,QAChC2C,EAASzI,EAAWU,GACpBgI,EAAS1I,EAAW8F,GAE1B,OAAO,IAAIF,EAAQ,CACjBjF,QAAS6H,EACT5H,UACgB,YAAdA,EACIxC,EAAiBuJ,QACH,cAAd/G,EACAxC,EAAiB6C,UACH,eAAdL,EACAxC,EAAiB4C,WACjB5C,EAAiB2C,OACvBL,UAAW+H,EACX3C,QAAS4C,OAIb,OAAO,IAAI3C,EAAS7C,IC/BTG,EAAe,SAACjC,GAAD,OAAkCA,EAAe,ICEhE4F,EAAwB,SACnC7D,EACA/B,EACAG,GAEA,IAAM2B,EAAgBC,EAASe,KAAI,SAAC5E,GAClC,MAAO,CAAEqB,QAASrB,EAAMqB,QAASC,UAAWtB,EAAMsB,cAG9C+H,EAAkBC,EAAiBxH,EAAcG,GAEvD,OAAO2B,EAAcsC,OAAOmD,EAAiB,IASlCC,EAAmB,SAACxH,EAAsBG,GACrD,OAAO,SACLkE,EACAC,EACA7D,GACI,IACIlB,EAAY+E,EAAZ/E,QAEFkI,EAAexF,EAAajC,GAElC,OAAIG,EACY,IAAVM,EAAoBlB,EAEjB8E,EAAc9E,EAAUmI,KAAKC,IAAI,EAAIF,EAAchH,GAEnD4D,EAAc9E,EAAUmI,KAAKC,IAAI,EAAIF,EAAchH,EAAQ,KCkFzDkE,EApHE,SAAC,GAA0D,IAAxDiD,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,WAAYC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YAAkB,EAC/CC,mBAAS,IADsC,mBAClEC,EADkE,KAC3DC,EAD2D,KAGnEC,EAAe,SACnBC,GACI,IAMAC,EAND,EACyBD,EAAEE,cAAtBnD,EADL,EACKA,KAAMoD,EADX,EACWA,GAAIhL,EADf,EACeA,MACZiL,EAAaD,EAAG9K,MAAM,KAAK,GAMjC,GAJAyK,EAAS,IAII,cAAT/C,EACFkD,EpBbqB,SAAC9K,GAC1B,IAAMC,EAAUD,EAAME,MAAM,KACtBI,EAAU,IAAIF,KAClBC,OAAOJ,EAAQ,IACfI,OAAOJ,EAAQ,IAAM,EACrBI,OAAOJ,EAAQ,KAGXU,EAAQC,EAAgBN,EAAQE,YAGhCK,EAAOP,EAAQC,cAErB,MAAM,GAAN,OAAUM,EAAV,YAAkBF,EAAlB,YAHY,MoBGOuK,CAAYlL,QACtB,GAAa,YAAT4H,GAGT,GAFAkD,EAAe/K,EAAWC,IpBkDA,SAC9B+B,EACAoF,GAEA,IAAMgE,EAAQ,IAAI/K,KAAK2B,GAGvB,OAFY,IAAI3B,KAAK+G,GAEVhD,UAAYgH,EAAMhH,UoBvDpBiH,CAAiBZ,EAAYS,GAAYlJ,UAAW+I,GAEvD,YADAH,EAAS,0CAIXG,EADkB,WAATlD,EACMvH,OAAOL,GAEPA,EAGjB,IAAMqL,EAKFb,EAAYS,GAEVK,EAAc,2BACfD,GADe,kBAEjBzD,EAAOkD,IAGJS,EAAQ,YAAOf,GAErBe,EAASN,GAAcK,EAEvBjB,EAASkB,IAGX,OACE,qCACE,gCACE,wBAAQC,QAASlB,EAAjB,yBACA,wBAAQkB,QAASjB,EAAjB,+BAGS,KAAVG,EAAe,4BAAIA,IAAa,KACjC,kCACE,gCACE,+BACE,4CACA,0CACA,2CACA,6CAGJ,gCACGF,EAAYjF,KAAI,SAACvD,EAASkB,GAAV,OACf,+BACE,6BACE,uBACEuI,KAAK,OACL7D,KAAK,YACLoD,GAAE,kBAAa9H,GACflD,MAAOgC,EAAQD,UACfsI,SAAUO,EACVc,IAAK1J,EAAQ0J,QAGjB,6BACE,uBACED,KAAK,OACL7D,KAAK,UACLoD,GAAE,kBAAa9H,GACflD,MAAOgC,EAAQmF,QACfkD,SAAUO,EACVc,IAAK3L,EAAWiC,EAAQ0J,SAG5B,6BACE,yBACE9D,KAAK,YACLoD,GAAE,kBAAa9H,GACfmH,SAAUO,EAHZ,UAKE,wBAAQ5K,MAAM,UAAd,qBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,aAAd,yBACA,wBAAQA,MAAM,SAAd,yBAGJ,6BACE,uBACEyL,KAAK,SACL7D,KAAK,SACLoD,GAAE,kBAAa9H,GACflD,MAAOgC,EAAQ6H,OACfQ,SAAUO,QAvCP1H,e,kBCnEfyI,GAAYC,KAAYD,UACxBE,GAAaD,KAAYD,UAAUE,WAa1BC,GAXE,SAAC,GAAyB,IAAvBlD,EAAsB,EAAtBA,MAAOmD,EAAe,EAAfA,SACzB,OACE,cAACJ,GAAD,CACEK,SAAUD,EACVE,QAAS,wDAFX,SAIE,cAACJ,GAAD,CAAYK,QAAStD,EAAOhB,KAAK,oBCIjCuE,GAAU,SACdC,GAQI,IAAD,EACyB3B,mBAAS2B,GADlC,mBACIC,EADJ,KACYC,EADZ,KAaH,MAAO,CAACD,EAVa,SACnBE,GAGU,IAAD,EACaA,EAAMxB,cAApBC,EADC,EACDA,GAAIhL,EADH,EACGA,MAEZsM,EAAU,2BAAKD,GAAN,kBAAerB,EAAKhL,QCmClBwM,GA9CD,SAACC,GAAuB,IAAD,EAW/BA,EAAMvF,OATRwF,EAFiC,EAEjCA,MACAjB,EAHiC,EAGjCA,KACA7D,EAJiC,EAIjCA,KACAoD,EALiC,EAKjCA,GACAhL,EANiC,EAMjCA,MACAqK,EAPiC,EAOjCA,SACAsC,EARiC,EAQjCA,QACAC,EATiC,EASjCA,KACAC,EAViC,EAUjCA,SAGF,YAAaC,IAATF,GAAsBA,EACpBnB,IAASnK,EAAWyL,OAEpB,qCACE,uBAAOC,QAAShC,EAAhB,SAAqB0B,IACrB,wBAAQ9E,KAAMA,EAAMoD,GAAIA,EAAIhL,MAAOA,EAAOqK,SAAUA,EAApD,SACGsC,EAAQpH,KAAI,SAAC0H,EAAQ/J,GAAT,OACX,wBAAmClD,MAAOiN,EAAOjN,MAAjD,SACGiN,EAAOC,MADV,UAAgBD,EAAhB,YAA0B/J,YASlC,qCACE,uBAAO8J,QAAShC,EAAhB,SAAqB0B,IACrB,uBACEjB,KAAMA,EACN7D,KAAMA,EACNoD,GAAIA,EACJhL,MAAOA,EACPqK,SAAUA,EACVwC,SAAUA,OAKT,MC/DLM,GAAkBxN,IAAOyN,MAAV,ibCgFNC,GAdG,SAACZ,GAAmB,IAxDba,EAyDfvI,EAAS0H,EAAT1H,KAEFwI,GA3DiBD,EA2DWvI,EA1DlC,gCACGuI,EAAU/H,KAAI,SAACiI,EAAKtK,GAAN,OACb,6BACGuK,OAAOC,KAAKF,GAAKjI,KAAI,SAACoI,GACrB,MAAwB,kBAAbH,EAAIG,GAEX,6BACG,IAAIC,KAAKC,aAAa,QAAS,CAC9BC,sBAAuB,IACtBC,OAAOP,EAAIG,KAHPA,GAON,6BAAeH,EAAIG,IAAVA,OAXpB,UAAYH,EAAZ,YAAmBtK,UAyDjB8K,EAlCmB,SAACV,GAC1B,IAAMW,EAAUR,OAAOC,KAAKJ,EAAU,IAClCzJ,EAAS,GAWb,OAVAoK,EACG1I,KAAI,SAAC2I,GAAD,OAAYA,EAAOhO,MAAM,gBAC7BmH,SAAQ,SAAC0B,GAER,IADA,IAAIoF,EAAe,GACV/J,EAAI,EAAGA,EAAI2E,EAAG1E,OAAQD,IAC7B+J,EAAeA,EAAe,IAAMlN,EAAsB8H,EAAG3E,IAE/DP,EAAOc,KAAKwJ,MAId,gCACE,6BACGtK,EAAO0B,KAAI,SAACrE,EAAMgC,GAAP,OACV,6BAA8BhC,GAA9B,UAAYA,EAAZ,YAAoBgC,WAiBRkL,CAAmBrJ,GAEvC,OACE,eAACoI,GAAD,WACGa,EACAT,MC3EDc,GAAoB1O,IAAOC,IAAV,yiECCV0O,GAAc,WAAO,IAAD,EACC7D,mBAAS,CACvC,CAAE1I,UAAW,GAAIoF,QAAS,GAAIlF,UAAW,UAAW4H,OAAQ,EAAG6B,IAAK,MAFvC,mBACxBlH,EADwB,KACd+J,EADc,KA2C/B,MAAO,CAAC/J,EAtCiB,SAACgK,GACxBD,EAAYC,IAGY,SACxB3D,GAEAA,EAAE4D,iBACF,IAAMhH,EAAG,YAAOjD,GAGVkK,E3BwBgB,SAAC1O,GACzB,IAAMG,EAAO,IAAIC,KAAKJ,GAEhBM,EAAU,IAAIF,KAAKD,EAAKI,cAAeJ,EAAKK,WAAa,EAAG,GAC5DG,EAAQC,EAAgBN,EAAQE,YACtC,MAAM,GAAN,OAAUF,EAAQC,cAAlB,YAAmCI,EAAnC,YAHY,M2B1BWgO,CADAlH,EAAIA,EAAIpD,OAAS,GAAG8C,SAGzCM,EAAI9C,KAAK,CACP5C,UAAW2M,EACXvH,QAAS,GACTlF,UAAW,UACX4H,OAAQ,EACR6B,IAAKgD,IAGPH,EAAY9G,IAGe,SAC3BoD,GAIA,GAFAA,EAAE4D,iBAEsB,IAApBjK,EAASH,OAAb,CAEA,IAAMoD,EAAG,YAAOjD,GAEhBiD,EAAImH,MAEJL,EAAY9G,Q,SzB7BJnG,K,gBAAAA,E,YAAAA,E,iBAAAA,M,KAMZ,I,GAAMuN,GAAqB,CACzBjH,KAAM,GACNC,YAAa,GACb1C,eAAgB,YAChBvC,QAAS,OACTH,aAAc,EACdgE,aAAc,EACdC,eAAgB,EAChBC,mBAAoB,EACpBhB,gBAAiB,QACjBC,aAAc,GAoMDkJ,GAjMS,SAACC,GAAiC,IAAD,EACXtE,mBAAyB,CACnE7B,MAAO,GACPf,YAAa,GACb1C,eAAgB,GAChB1C,aAAc,EACdmE,cAAe,EACfoB,mBAAoB,EACpBC,aAAc,EACdrF,SAAS,EACTb,UAAW,GACXoF,QAAS,GACT3C,SAAU,GACVuD,MAAO,GACPD,UAAW,KAd0C,mBAChDkH,EADgD,KAChCC,EADgC,OAgBrBxE,mBAAS,IAhBY,mBAgBhDyE,EAhBgD,KAgBrCC,EAhBqC,OAkBxBhD,GAAQ0C,IAlBgB,mBAkBhDxC,EAlBgD,KAkBxCzB,EAlBwC,OAyBnD0D,KAzBmD,mBAqBrD9J,EArBqD,KAsBrD4K,EAtBqD,KAuBrDC,EAvBqD,KAwBrDC,EAxBqD,KA2BvDC,qBAAU,WACR,GAA6B,KAAzBP,EAAepG,MAAnB,CACA,IAAM4G,E0B1DqB,SAAC5G,GAC9B,I3BUkC5I,E2BV5ByP,EAAG,eAAQ7G,GAEX8G,EAAgBD,EAAI1H,MAAMxC,KAAI,SAAC5E,GAAD,MAAW,CAC7CA,EAAMR,KACNQ,EAAM6B,iBACN7B,EAAMkE,aACNlE,EAAMgC,kBAGFiB,EAAoB6L,EAAI3H,UAAUvC,KAAI,SAAC5E,GAAD,MAAW,CACrDA,EAAMR,KACNQ,EAAM6B,iBACN7B,EAAMqB,QACNrB,EAAM+B,gBACN/B,EAAM8C,gBACN9C,EAAM0C,UACN1C,EAAMgC,cACNhC,EAAMkC,iBACNlC,EAAMmC,oBAGR,MAAO,CACL,CACE6M,QAAS,CAAC,IACV5K,KAAM,CACJ,CAAC,SAAU9D,EAAsBwO,EAAI7G,QACrC,CAAC,gBAAiB3H,EAAsBwO,EAAI5H,cAC5C,CAAC,mBAAoB5G,EAAsBwO,EAAItK,iBAC/C,CAAC,UAAWsK,EAAI7M,SAChB,CAAC,mB3BnB2B5C,E2BmBYyP,EAAIhN,a3BlBlDzC,EAAM4P,eAAe,QAAS,CAC5BC,sBAAuB,EACvBC,MAAO,c2BiBH,CAAC,mBAAoBL,EAAI7I,eACzB,CAAC,kBAAmB6I,EAAIxH,cACxB,CAAC,eAAgBwH,EAAI1N,WACrB,CAAC,aAAc0N,EAAItI,WAGvB,CAAE4I,OAAQ,EAAGJ,QAAS,CAAC,kBAAmB5K,KAAM,CAAC,CAAC,MAClD,CAEEgL,QAAS,EACTJ,QAAS,CAAC,OAAQ,oBAAqB,eAAgB,kBACvD5K,KAAM2K,GAER,CACEK,QAASL,EAAcrL,OAAS,EAChC2L,OAAQ,EACRL,QAAS,CAAC,sBACV5K,KAAM,CAAC,CAAC,MAEV,CACEgL,QAAS,EACTC,OAAQ,EACRL,QAAS,CACP,OACA,oBACA,UACA,mBACA,mBACA,YACA,iBACA,qBACA,qBAEF5K,KAAMnB,I1BNeqM,CAAgBjB,GAEvCG,EAAaK,MACZ,CAACR,IAEJO,qBAAU,cAAU,CAAClD,IAErB,IAQM6D,EAAc,CAClB,CACExD,MAAO,QACPjB,KAAMnK,EAAW6O,KACjBvI,KAAM,OACNoD,GAAI,OACJhL,MAAOqM,EAAOzE,KACdyC,SAAUO,EACViC,UAAU,GAEZ,CACEH,MAAO,eACPjB,KAAMnK,EAAW6O,KACjBvI,KAAM,cACNoD,GAAI,cACJhL,MAAOqM,EAAOxE,YACdwC,SAAUO,EACViC,UAAU,GAEZ,CACEH,MAAO,kBACPjB,KAAMnK,EAAWyL,OACjBnF,KAAM,iBACNoD,GAAI,iBACJhL,MAAOqM,EAAOlH,eACdkF,SAAUO,EACV+B,QAAS,CACP,CAAEO,KAAM,YAAalN,MAAO,aAC5B,CAAEkN,KAAM,UAAWlN,MAAO,aAG9B,CACE0M,MAAO,qBACPjB,KAAMnK,EAAWyL,OACjBnF,KAAM,kBACNoD,GAAI,kBACJhL,MAAOqM,EAAO1G,gBACd0E,SAAUO,EACV+B,QAAS,CACP,CAAEO,KAAM,MAAOlN,MAAO,QACtB,CAAEkN,KAAM,KAAMlN,MAAO,UAEvB4M,KAAgC,YAA1BP,EAAOlH,gBAEf,CACEuH,MAAO,yBACPjB,KAAMnK,EAAWjB,OACjBuH,KAAM,eACNoD,GAAI,eACJhL,MAAOqM,EAAOzG,aACdyE,SAAUO,EACVgC,KAC6B,SAA3BP,EAAO1G,iBACmB,YAA1B0G,EAAOlH,gBAEX,CACEuH,MAAO,WACPjB,KAAMnK,EAAWyL,OACjBnF,KAAM,UACNoD,GAAI,UACJhL,MAAOqM,EAAOzJ,QACdyH,SAAUO,EACV+B,QAAS,CACP,CAAEO,KAAM,MAAOlN,MAAO,QACtB,CAAEkN,KAAM,KAAMlN,MAAO,UAEvB6M,UAAU,GAGZ,CACEH,MAAO,iBACPjB,KAAMnK,EAAWjB,OACjBuH,KAAM,eACNoD,GAAI,eACJhL,MAAOqM,EAAO5J,aACd4H,SAAUO,EACViC,UAAU,GAEZ,CACEH,MAAO,iBACPjB,KAAMnK,EAAWjB,OACjBuH,KAAM,eACNoD,GAAI,eACJhL,MAAOqM,EAAO5F,aACd4D,SAAUO,GAEZ,CACE8B,MAAO,mBACPjB,KAAMnK,EAAWjB,OACjBuH,KAAM,iBACNoD,GAAI,iBACJhL,MAAOqM,EAAO3F,eACd2D,SAAUO,GAEZ,CACE8B,MAAO,wBACPjB,KAAMnK,EAAWjB,OACjBuH,KAAM,qBACNoD,GAAI,qBACJhL,MAAOqM,EAAO1F,mBACd0D,SAAUO,IAId,OACE,eAACyD,GAAD,CAAmB+B,UAAU,yBAA7B,UACE,8CACA,uBAAMC,SAnHO,SAAC9D,GAChBA,EAAMkC,iBAEN,IAAM6B,EetCiB,SAAC9L,EAAU0K,GAA0B,IAE5DtH,EAOEsH,EAPFtH,KACAC,EAMEqH,EANFrH,YACApF,EAKEyM,EALFzM,aACAgE,EAIEyI,EAJFzI,aACAC,EAGEwI,EAHFxI,eACAC,EAEEuI,EAFFvI,mBACAf,EACEsJ,EADFtJ,aAGI2K,EAAgB3G,EAAsBpF,GAEtCoE,EAAQ,IAAIjB,EAEZkB,EACyB,cAA7BqG,EAAU/J,eACN3F,EAAoB4F,UACpB5F,EAAoB+G,QAEpB3D,EAAgC,SAAtBsM,EAAUtM,QACpB+C,EAAgD,SAA9BuJ,EAAUvJ,gBAgBlC,OAdAiD,EAAM9C,cACJ8B,EACAC,EACAgB,EACApG,EACA8N,EACA3N,EACAvC,OAAOoG,GACPpG,OAAOqG,GACPrG,OAAOsG,GACPhB,EACAtF,OAAOuF,IAGFgD,EfCY4H,CAAYhM,EAAU6H,GAEvC4C,EAAkBqB,EAASG,2BA8GzB,UACGP,EAAY3K,KAAI,SAACmL,EAAOxN,GAAR,OACf,qBAA+BkN,UAAU,kBAAzC,SACE,cAAC,GAAD,CAAOlJ,OAAQwJ,KADjB,UAAaA,EAAb,YAAsBxN,OAIxB,qBAAKkN,UAAU,qBAAf,SACE,cAAC,EAAD,CACE/F,SAAU+E,EACV9E,WAAY+E,EACZ9E,cAAe+E,EACf9E,YAAahG,MAGjB,wBAAQiH,KAAK,SAAb,6BAE+B,IAAhCuD,EAAejH,MAAM1D,OACpB,cAAC,GAAD,CAAUuE,MAAOsG,EAAWnD,SAAUM,EAAOzE,OAC3C,KAEJ,sBAAKwI,UAAU,qBAAf,UACE,8BACuC,IAApCpB,EAAelH,UAAUzD,OACxB,qCACE,oDACA,cAAC,GAAD,CAAWU,KAAMiK,EAAelH,eAEhC,OAEN,8BACmC,IAAhCkH,EAAejH,MAAM1D,OACpB,qCACE,gDACA,cAAC,GAAD,CAAWU,KAAMiK,EAAejH,WAEhC,c2B5MC4I,GAbE,SAAC5B,GAChB,OACE,gCACE,0CACA,4GAIA,uECyFS6B,GAjGgBjR,IAAOC,IAAV,+wDCStBiP,GAAqB,CACzBjM,QAAS,OACTH,aAAc,GAmGDoO,GAhGoB,SAAC9B,GAAiC,I9BPjC/O,E8BOgC,EAC1ByK,mBAAS,GADiB,mBAC3DxC,EAD2D,KAC7C6I,EAD6C,OAExCrG,mBAAS,IAF+B,mBAE3DC,EAF2D,KAEpDC,EAFoD,OAGnCwB,GAAQ0C,IAH2B,mBAG3DxC,EAH2D,KAGnDzB,EAHmD,OAU9D0D,KAV8D,mBAMhE9J,EANgE,KAOhE4K,EAPgE,KAQhEC,EARgE,KAShEC,EATgE,KAoC5DY,EAAc,CAClB,CACExD,MAAO,WACPjB,KAAMnK,EAAWyL,OACjBnF,KAAM,UACNoD,GAAI,UACJhL,MAAOqM,EAAOzJ,QACdyH,SAAUO,EACV+B,QAAS,CACP,CAAEO,KAAM,MAAOlN,MAAO,QACtB,CAAEkN,KAAM,KAAMlN,MAAO,UAEvB6M,UAAU,GAGZ,CACEH,MAAO,iBACPjB,KAAMnK,EAAWjB,OACjBuH,KAAM,eACNoD,GAAI,eACJhL,MAAOqM,EAAO5J,aACd4H,SAAUO,EACViC,UAAU,IAId,OACE,eAAC,GAAD,WACE,+CACA,uBAAMwD,SArDO,SAAC9D,GAIhB,GAHAA,EAAMkC,iBACN9D,EAAS,IAEqB,KAA1BnG,EAAS,GAAGzC,WAA4C,KAAxByC,EAAS,GAAG2C,QAIzC,GAA2B,IAAvB3C,EAAS,GAAGqF,OAAhB,CAMP,IAEIjH,EAFE2N,EAAgB3G,EAAsBpF,GAAUD,gBAGtD3B,EAA6B,SAAnByJ,EAAOzJ,QAEjBkO,EACEzI,EAAsBkI,EAAelE,EAAO5J,aAAe,IAAKG,SAXhE+H,EAAS,sCAJTA,EAAS,8CAgDT,UACE,sBAAKyF,UAAU,yBAAf,UACE,2DACA,6B9B3E0BpQ,E8B2EFiI,E9B1EhCjI,EAAM4P,eAAe,QAAS,CAC5BC,sBAAuB,EACvBC,MAAO,kB8B0EFI,EAAY3K,KAAI,SAACmL,EAAOxN,GAAR,OACf,qBAA+BkN,UAAU,kBAAzC,SACE,cAAC,GAAD,CAAOlJ,OAAQwJ,KADjB,UAAaA,EAAb,YAAsBxN,OAIxB,sBAAKkN,UAAU,qBAAf,UACE,qBAAKA,UAAU,QAAf,SACE,4BAAc,KAAV1F,EAAeA,EAAQ,SAE7B,cAAC,EAAD,CACEL,SAAU+E,EACV9E,WAAY+E,EACZ9E,cAAe+E,EACf9E,YAAahG,OAGjB,qBAAK4L,UAAU,0BAAf,SACE,wBAAQ3E,KAAK,SAAS2E,UAAU,cAAhC,mCChFKW,GAfH,WACV,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAUY,KAAK,mBACf,cAACC,GAAD,CAAiBD,KAAK,+BACtB,cAACE,GAAD,CAA4BF,KAAK,mDCZ3CG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f0b85e13.chunk.js","sourcesContent":["export enum LeaseClassification {\r\n  FINANCE = 'finance',\r\n  OPERATING = 'operating'\r\n}\r\n","export enum PaymentFrequency {\r\n  Annual = 'annual',\r\n  SemiAnnual = 'semiannual',\r\n  Quarterly = 'quarterly',\r\n  Monthly = 'monthly'\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst StyledNavbar = styled.div`\r\n  background-color: #3c6382;\r\n  width: 80vw;\r\n  margin: auto;\r\n\r\n  ul {\r\n    list-style-type: none;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n  }\r\n\r\n  a,\r\n  a:visited {\r\n    text-decoration: none;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nexport default StyledNavbar;\r\n","import { Link } from '@reach/router';\r\nimport StyledNavbar from './StyledNavbar';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <StyledNavbar>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/leases-react/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/leases-react/create-lease\">Create Lease</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/leases-react/present-value-calculator\">\r\n            Present Value Calculator\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </StyledNavbar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","/**\n * takes a date as string returns the first day of the month\n * @param value\n */\nexport const getFirstDay = (value: string): string => {\n  const dateArr = value.split(\"-\");\n  const newDate = new Date(\n    Number(dateArr[0]),\n    Number(dateArr[1]) - 1,\n    Number(dateArr[2])\n  );\n\n  const month = monthCorrection(newDate.getMonth());\n\n  const day = \"01\";\n  const year = newDate.getFullYear();\n\n  return `${year}-${month}-${day}`;\n};\n\n/**\n * takes a date as string returns last day of the month\n * @param value\n */\nexport const getLastDay = (value: string): string => {\n  const dateArr = value.split(\"-\");\n  const date = new Date(\n    Number(dateArr[0]),\n    Number(dateArr[1]) - 1,\n    Number(dateArr[2])\n  );\n\n  const newDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n\n  newDate.setDate(newDate.getDate() - 1);\n\n  const month = monthCorrection(newDate.getMonth());\n  const year = newDate.getFullYear();\n  const day = newDate.getDate();\n\n  return `${year}-${month}-${day}`;\n};\n\nexport const getNextDay = (value: string): string => {\n  const date = new Date(value);\n  const day = \"01\";\n  const newDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n  const month = monthCorrection(newDate.getMonth());\n  return `${newDate.getFullYear()}-${month}-${day}`;\n};\n\n/**\n * corrects the month to two digits\n * @param month\n */\nexport const monthCorrection = (month: number | string): string => {\n  const monthNumber = Number(month);\n\n  const correctedMonth =\n    monthNumber + 1 < 10 ? `0${monthNumber + 1}` : monthNumber + 1;\n\n  return correctedMonth.toString();\n};\n\n/**\n * Checks if the start date is after the end date\n * @param startDate\n * @param endDate\n */\nexport const checkDateIsAfter = (\n  startDate: string,\n  endDate: string\n): boolean => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n\n  return end.valueOf() > start.valueOf();\n};\n","export const capitalizeFirstLetter = (word: string) =>\r\n  word[0].toUpperCase() + word.substring(1);\r\n\r\nexport const formatDate = (value: string) => {\r\n  const dateArr = value.split('-');\r\n\r\n  return `${dateArr[1]}/${dateArr[2]}/${dateArr[0]}`;\r\n};\r\n\r\nexport const formatNumberDecimal = (value: number): string =>\r\n  value.toLocaleString('en-US', {\r\n    maximumFractionDigits: 2,\r\n    style: 'decimal'\r\n  });\r\n\r\nexport const formatNumberPercent = (value: number): string =>\r\n  value.toLocaleString('en-US', {\r\n    maximumFractionDigits: 2,\r\n    style: 'percent'\r\n  });\r\n","import React, { useState, useEffect } from \"react\";\nimport Payments from \"../components/Payments\";\nimport Download from \"../components/Download\";\n\nimport { createExcelData, createLease } from \"../helpers/utils\";\nimport { GeneratedLease } from \"../interfaces\";\nimport { useForm } from \"../hooks/useForm\";\nimport Input from \"../components/input/Input\";\nimport DataTable from \"../components/table/DataTable\";\nimport { StyledCreateLease } from \"./StyledCreatLease\";\n\nimport { RouteComponentProps } from \"@reach/router\";\nimport { usePayments } from \"../hooks/usePayments\";\n\nexport enum InputTypes {\n  Select = \"select\",\n  Text = \"text\",\n  Number = \"number\",\n}\n\nconst leaseInitialValues = {\n  name: \"\",\n  description: \"\",\n  classification: \"operating\",\n  prepaid: \"true\",\n  interestRate: 0,\n  deferredRent: 0,\n  leaseIncentive: 0,\n  initialDirectCosts: 0,\n  useEconomicLife: \"false\",\n  economicLife: 0,\n};\n\nconst CreateLeasePage = (_props: RouteComponentProps) => {\n  const [generatedLease, setGeneratedLease] = useState<GeneratedLease>({\n    lease: \"\",\n    description: \"\",\n    classification: \"\",\n    interestRate: 0,\n    totalPayments: 0,\n    quantityOfPayments: 0,\n    presentValue: 0,\n    prepaid: true,\n    startDate: \"\",\n    endDate: \"\",\n    payments: [],\n    asset: [],\n    liability: [],\n  });\n  const [leaseInfo, setLeaseInfo] = useState([]);\n\n  const [values, handleChange] = useForm(leaseInitialValues);\n\n  const [\n    payments,\n    onChangePayments,\n    onClickAddPayment,\n    onClickDeletePayment,\n  ] = usePayments();\n\n  useEffect(() => {\n    if (generatedLease.lease === \"\") return;\n    const leaseExcelData = createExcelData(generatedLease);\n\n    setLeaseInfo(leaseExcelData);\n  }, [generatedLease]);\n\n  useEffect(() => {}, [values]);\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const genLease = createLease(payments, values);\n\n    setGeneratedLease(genLease.getAllLeaseInformation());\n  };\n\n  const inputObject = [\n    {\n      label: \"Name:\",\n      type: InputTypes.Text,\n      name: \"name\",\n      id: \"name\",\n      value: values.name,\n      onChange: handleChange,\n      required: true,\n    },\n    {\n      label: \"Description:\",\n      type: InputTypes.Text,\n      name: \"description\",\n      id: \"description\",\n      value: values.description,\n      onChange: handleChange,\n      required: true,\n    },\n    {\n      label: \"Classification:\",\n      type: InputTypes.Select,\n      name: \"classification\",\n      id: \"classification\",\n      value: values.classification,\n      onChange: handleChange,\n      options: [\n        { text: \"Operating\", value: \"operating\" },\n        { text: \"Finance\", value: \"finance\" },\n      ],\n    },\n    {\n      label: \"Use Economic Life:\",\n      type: InputTypes.Select,\n      name: \"useEconomicLife\",\n      id: \"useEconomicLife\",\n      value: values.useEconomicLife,\n      onChange: handleChange,\n      options: [\n        { text: \"Yes\", value: \"true\" },\n        { text: \"No\", value: \"false\" },\n      ],\n      show: values.classification === \"finance\",\n    },\n    {\n      label: \"Economic Life (years):\",\n      type: InputTypes.Number,\n      name: \"economicLife\",\n      id: \"economicLife\",\n      value: values.economicLife,\n      onChange: handleChange,\n      show:\n        values.useEconomicLife === \"true\" &&\n        values.classification === \"finance\",\n    },\n    {\n      label: \"Prepaid:\",\n      type: InputTypes.Select,\n      name: \"prepaid\",\n      id: \"prepaid\",\n      value: values.prepaid,\n      onChange: handleChange,\n      options: [\n        { text: \"Yes\", value: \"true\" },\n        { text: \"No\", value: \"false\" },\n      ],\n      required: true,\n    },\n\n    {\n      label: \"Interest Rate:\",\n      type: InputTypes.Number,\n      name: \"interestRate\",\n      id: \"interestRate\",\n      value: values.interestRate,\n      onChange: handleChange,\n      required: true,\n    },\n    {\n      label: \"Deferred Rent:\",\n      type: InputTypes.Number,\n      name: \"deferredRent\",\n      id: \"deferredRent\",\n      value: values.deferredRent,\n      onChange: handleChange,\n    },\n    {\n      label: \"Lease Incentive:\",\n      type: InputTypes.Number,\n      name: \"leaseIncentive\",\n      id: \"leaseIncentive\",\n      value: values.leaseIncentive,\n      onChange: handleChange,\n    },\n    {\n      label: \"Initial Direct Costs:\",\n      type: InputTypes.Number,\n      name: \"initialDirectCosts\",\n      id: \"initialDirectCosts\",\n      value: values.initialDirectCosts,\n      onChange: handleChange,\n    },\n  ];\n\n  return (\n    <StyledCreateLease className=\"create-lease-container\">\n      <h3>Create Lease</h3>\n      <form onSubmit={onSubmit}>\n        {inputObject.map((input, index) => (\n          <div key={`${input}-${index}`} className=\"input-container\">\n            <Input config={input} />\n          </div>\n        ))}\n        <div className=\"payments-container\">\n          <Payments\n            onChange={onChangePayments}\n            onClickAdd={onClickAddPayment}\n            onClickDelete={onClickDeletePayment}\n            paymentsArr={payments}\n          />\n        </div>\n        <button type=\"submit\">Create Lease</button>\n      </form>\n      {generatedLease.asset.length !== 0 ? (\n        <Download lease={leaseInfo} fileName={values.name} />\n      ) : null}\n\n      <div className=\"schedule-container\">\n        <div>\n          {generatedLease.liability.length !== 0 ? (\n            <>\n              <h3>Liability Schedule</h3>\n              <DataTable data={generatedLease.liability} />\n            </>\n          ) : null}\n        </div>\n        <div>\n          {generatedLease.asset.length !== 0 ? (\n            <>\n              <h3>Asset Schedule</h3>\n              <DataTable data={generatedLease.asset} />\n            </>\n          ) : null}\n        </div>\n      </div>\n    </StyledCreateLease>\n  );\n};\n\nexport default CreateLeasePage;\n","export const roundNumber = (number: number, decimals: number): number => {\r\n  return Number(number.toFixed(decimals));\r\n};\r\n","export const addMonth = (date: Date, months: number): Date => {\r\n  const month = date.getMonth() + months - 1;\r\n  const year = date.getFullYear();\r\n\r\n  if (month === 11) {\r\n    return new Date(year + 1, 0, 1);\r\n  } else {\r\n    return new Date(year, month + 1, 1);\r\n  }\r\n};\r\n","import { PaymentFrequency } from '../enums';\r\nimport { addMonth } from './addMonth';\r\n/**\r\n *Calculates the next month and next payment depending on the payment frequency.\r\n */\r\nconst monthlyCalculation = (\r\n  y: number,\r\n  startDate: string,\r\n  payment: number,\r\n  frequency: PaymentFrequency\r\n): { nextMonth: Date; monthlyPayment: number } => {\r\n  let nextMonth = addMonth(new Date(startDate), y);\r\n  let monthlyPayment = payment;\r\n\r\n  if (y === 0) {\r\n    nextMonth = new Date(startDate);\r\n  } else if (frequency === PaymentFrequency.Annual) {\r\n    if (y % 12 !== 0) {\r\n      monthlyPayment = 0;\r\n    }\r\n  } else if (frequency === PaymentFrequency.SemiAnnual) {\r\n    if (y % 6 !== 0) {\r\n      monthlyPayment = 0;\r\n    }\r\n  } else if (frequency === PaymentFrequency.Quarterly) {\r\n    if (y % 3 !== 0) {\r\n      monthlyPayment = 0;\r\n    }\r\n  }\r\n\r\n  return { nextMonth, monthlyPayment };\r\n};\r\n\r\nexport default monthlyCalculation;\r\n","import { LiabilityMonthlyValues } from '../../interfaces';\r\n\r\nexport class LiabilityMonthly {\r\n  shortTermBalance?: number;\r\n  longTermBalance?: number;\r\n\r\n  constructor(\r\n    public date: Date,\r\n    public payment: number,\r\n    public beginningBalance: number,\r\n    public interestRate: number,\r\n    public interestExpense: number,\r\n    public endingBalance: number,\r\n    public prepaid?: boolean\r\n  ) {\r\n    this.date = date;\r\n    this.beginningBalance = beginningBalance;\r\n    this.interestRate = interestRate;\r\n    this.interestExpense = interestExpense;\r\n    this.payment = payment;\r\n    this.endingBalance = endingBalance;\r\n  }\r\n\r\n  getMonthlyData(): LiabilityMonthlyValues {\r\n    return {\r\n      date: this.date,\r\n      beginningBalance: this.beginningBalance,\r\n      payment: this.payment,\r\n      interestExpense: this.interestExpense,\r\n      endingBalance: this.endingBalance,\r\n      shortTermBalance: this.shortTermBalance,\r\n      longTermBalance: this.longTermBalance\r\n    };\r\n  }\r\n}\r\n","import { roundNumber } from \".\";\nimport { LiabilityMonthly } from \"../classes/Liability/LiabilityMonthly\";\nimport { PaymentStream } from \"../interfaces\";\nimport { discountRate } from \"../../utils\";\n\n/**\n *Calculates liability monthly schedule.\n */\nconst generateLiability = (\n  paymentStream: PaymentStream[],\n  startingBalance: number,\n  interestRate: number,\n  prepaid: boolean\n) => {\n  let result = [];\n  const payments = [...paymentStream];\n\n  for (let i = 0; i < payments.length; i++) {\n    const date = new Date(payments[i].month);\n    const { payment } = payments[i];\n\n    const correctedInterestRate = discountRate(interestRate);\n\n    result.push(\n      calculateLiability(\n        startingBalance,\n        payment,\n        correctedInterestRate,\n        date,\n        prepaid,\n        i,\n        payments.length,\n        result\n      )\n    );\n  }\n\n  result = calculateSTLTBalances(result);\n\n  return result;\n};\n\nconst calculateLiability = (\n  startingBalance: number,\n  payment: number,\n  interestRate: number,\n  date: Date,\n  prepaid: boolean,\n  index: number,\n  paymentsLength: number,\n  schedule: any[]\n) => {\n  if (index === 0) {\n    const principal = payment;\n    const interestPayment = 0;\n\n    if (prepaid) {\n      const interestExpense = (startingBalance - payment) * interestRate;\n\n      const endingBalance = endBalance(\n        startingBalance,\n        interestExpense,\n        principal,\n        interestPayment\n      );\n\n      return new LiabilityMonthly(\n        date,\n        payment,\n        roundNumber(startingBalance, 2),\n        interestRate,\n        roundNumber(interestExpense, 2),\n        roundNumber(endingBalance, 2),\n        prepaid\n      );\n    } else {\n      const interestExpense = startingBalance * interestRate;\n      const endingBalance = endBalance(\n        startingBalance,\n        interestExpense,\n        principal,\n        interestPayment\n      );\n\n      return new LiabilityMonthly(\n        date,\n        payment,\n        roundNumber(startingBalance, 2),\n        interestRate,\n        roundNumber(interestExpense, 2),\n        roundNumber(endingBalance, 2),\n        prepaid\n      );\n    }\n  } else {\n    // get prior month ending balance and interest expense for\n    // current months beginning balance and interest payment\n    const { interestExpense, endingBalance } = schedule[\n      index - 1\n    ].getMonthlyData();\n\n    if (prepaid) {\n      let currentMonthInterestExpense =\n        (endingBalance - payment) * interestRate;\n\n      let principal = payment - interestExpense;\n      let interestPayment = interestExpense;\n\n      if (payment === 0) {\n        principal = 0;\n        interestPayment = 0;\n      }\n\n      if (index === paymentsLength - 1) {\n        currentMonthInterestExpense = 0;\n      }\n\n      const currentMonthEndingBalance = endBalance(\n        endingBalance,\n        currentMonthInterestExpense,\n        principal,\n        interestPayment\n      );\n\n      return new LiabilityMonthly(\n        date,\n        payment,\n        roundNumber(endingBalance, 2),\n        interestRate,\n        roundNumber(currentMonthInterestExpense, 2),\n        roundNumber(currentMonthEndingBalance, 2),\n        prepaid\n      );\n    } else {\n      const currentMonthInterestExpense = endingBalance * interestRate;\n\n      const principal = payment;\n\n      const interestPayment = 0;\n\n      const currentMonthEndingBalance =\n        endingBalance +\n        currentMonthInterestExpense -\n        principal -\n        interestPayment;\n\n      return new LiabilityMonthly(\n        date,\n        payment,\n        roundNumber(endingBalance, 2),\n        interestRate,\n        roundNumber(currentMonthInterestExpense, 2),\n        roundNumber(currentMonthEndingBalance, 2),\n        prepaid\n      );\n    }\n  }\n};\n\n/**\n * Calculate the ending balance for the month\n * @param beginningBalance\n * @param interestExpense\n * @param principal\n * @param interestPayment\n * @returns\n */\nconst endBalance = (\n  beginningBalance: number,\n  interestExpense: number,\n  principal: number,\n  interestPayment: number\n): number => beginningBalance + interestExpense - principal - interestPayment;\n\n/**\n * Calculates the ST and LT balances for the liability schedule\n * @param liabilitySchedule\n * @returns\n */\nconst calculateSTLTBalances = (liabilitySchedule) => {\n  let result = [...liabilitySchedule];\n  let stBalance = 0;\n  let ltBalance = 0;\n\n  result.sort(\n    (a, b) => new Date(a.date).valueOf() - new Date(b.date).valueOf()\n  );\n\n  for (let i = 0; i < result.length; i++) {\n    // long term balance is equal to the ending balance 12 months out excluding month 1\n    // outside of that lt balance is equal to 0\n    if (result[i + 11]) {\n      ltBalance = result[i + 11].endingBalance;\n    } else {\n      ltBalance = 0;\n    }\n\n    stBalance = result[i].endingBalance - ltBalance;\n\n    if (i < result.length - 12) {\n      result[i].shortTermBalance = stBalance;\n      result[i].longTermBalance = ltBalance;\n    } else {\n      result[i].shortTermBalance = result[i].endingBalance;\n      result[i].longTermBalance = 0;\n    }\n  }\n\n  return result;\n};\n\nexport default generateLiability;\n","import { roundNumber } from \"../../utils\";\n\nexport class AssetMonthly {\n  public endingBalance: number;\n\n  constructor(\n    public date: Date,\n    public beginningBalance: number,\n    public depreciation: number\n  ) {\n    this.beginningBalance = beginningBalance;\n    this.depreciation = depreciation;\n\n    const endBalance = this.beginningBalance - this.depreciation;\n    this.endingBalance = roundNumber(endBalance, 2);\n\n    this.date = date;\n  }\n\n  getMonthlyData() {\n    return {\n      date: this.date,\n      beginningBalance: this.beginningBalance,\n      depreciation: this.depreciation,\n      endingBalance: this.endingBalance,\n    };\n  }\n}\n","import { AssetMonthly } from \"../classes/Asset/AssetMonthly\";\nimport { LeaseClassification } from \"../enums\";\nimport { LiabilitySchedulePrint } from \"../interfaces\";\nimport { addMonth } from \"./addMonth\";\n\nconst calculateAssetSchedule = (\n  data: {\n    liabilitySchedule?: LiabilitySchedulePrint[];\n    totalPayments?: number;\n    classification: LeaseClassification;\n    startDate: Date;\n    life: number;\n    startingBalance: number;\n    monthlyDepreciation?: number;\n  },\n  straightLineRent?\n) => {\n  const {\n    startDate,\n    life,\n    startingBalance,\n    monthlyDepreciation,\n    liabilitySchedule,\n    classification,\n  } = data;\n\n  let result = [];\n\n  for (let i = 0; i < life; i++) {\n    let depreciation = monthlyDepreciation;\n\n    if (i === 0) {\n      if (classification === LeaseClassification.OPERATING) {\n        depreciation = straightLineRent - liabilitySchedule[i].interestExpense;\n      }\n      const month = new AssetMonthly(startDate, startingBalance, depreciation);\n\n      result.push(month);\n    } else {\n      const { endingBalance } = result[i - 1].getMonthlyData();\n      if (classification === LeaseClassification.OPERATING) {\n        depreciation = straightLineRent - liabilitySchedule[i].interestExpense;\n      }\n\n      const nextMonth = addMonth(startDate, i);\n      const month = new AssetMonthly(nextMonth, endingBalance, depreciation);\n\n      result.push(month);\n    }\n  }\n\n  return result;\n};\n\nexport default calculateAssetSchedule;\n","import { AssetSchedulePrint } from \"../../interfaces\";\nimport { roundNumber } from \"../../utils\";\nimport { AssetMonthly } from \"./AssetMonthly\";\n\nexport class AssetBase {\n  startDate!: Date;\n  monthlyDepreciation!: number;\n  monthlyTransactions!: AssetMonthly[];\n  startingBalance!: number;\n  life!: number;\n\n  setProperties(startDate: string, startingBalance: number, life: number) {\n    this.startDate = new Date(startDate);\n    this.startingBalance = roundNumber(startingBalance, 2);\n    this.life = life;\n  }\n\n  // setPropertiesFromJSON(schedule: any) {\n  //   const { date, beginningBalance } = schedule[0];\n  //   const life = schedule.length;\n  //   this.setProperties(date, beginningBalance, life);\n  //\n  //   this.setMonthlyTransactionsFromJSON(schedule);\n  // }\n\n  getStartingBalance(): number {\n    return this.startingBalance;\n  }\n\n  getLife(): number {\n    return this.life;\n  }\n\n  getMonthlyTransactions(): AssetMonthly[] {\n    return this.monthlyTransactions;\n  }\n\n  getAssetData(): AssetSchedulePrint[] {\n    return this.monthlyTransactions.map((month) => {\n      const {\n        date,\n        beginningBalance,\n        depreciation,\n        endingBalance,\n      } = month.getMonthlyData();\n\n      // check if the ending balance is less than 1\n      // if so add it to the depreciation amount to account for rounding\n      // set ending balance to 0\n      if (endingBalance < 1) {\n        return {\n          date: date.toLocaleDateString(),\n          beginningBalance,\n          depreciation: roundNumber(endingBalance + depreciation, 2),\n          endingBalance: endingBalance - endingBalance,\n        };\n      } else {\n        return {\n          date: date.toLocaleDateString(),\n          beginningBalance,\n          depreciation,\n          endingBalance,\n        };\n      }\n    });\n  }\n\n  setMonthlyDepreciation(depreciation: number): void {\n    this.monthlyDepreciation = roundNumber(depreciation, 2);\n  }\n\n  setMonthlyTransactions(callback: Function): void {\n    this.monthlyTransactions = callback(\n      this.startDate,\n      this.life,\n      this.startingBalance,\n      this.monthlyDepreciation\n    );\n  }\n\n  // setMonthlyTransactionsFromJSON(data: any): void {\n  //   this.monthlyTransactions = data.map(\n  //     (month) =>\n  //       new AssetMonthly(\n  //         new Date(month.date),\n  //         month.beginningBalance,\n  //         month.depreciation\n  //       )\n  //   );\n  // }\n}\n","import { AssetMonthly } from \"./AssetMonthly\";\nimport { calculateAssetSchedule } from \"../../utils/index\";\nimport { AssetBase } from \"./AssetBase\";\nimport { LeaseClassification } from \"../../enums\";\n\nexport class AssetFinance extends AssetBase {\n  setPropertiesFinance(\n    startDate: string,\n    startingBalance: number,\n    life: number,\n    useEconomicLife: boolean,\n    economicLife?: number\n  ): void {\n    if (useEconomicLife) {\n      // economic life is corrected to months\n      const calculatedLife = economicLife * 12;\n      this.setProperties(startDate, startingBalance, calculatedLife);\n      this.calculateDepreciationWithEconomicLife(calculatedLife);\n    } else {\n      this.setProperties(startDate, startingBalance, life);\n      this.calculateDepreciation();\n    }\n\n    this.setMonthlyTransactions(this.calculateMonthlySchedule);\n  }\n\n  calculateDepreciationWithEconomicLife(economicLife): void {\n    const depreciation = this.getStartingBalance() / economicLife;\n\n    this.setMonthlyDepreciation(depreciation);\n  }\n\n  calculateDepreciation(): void {\n    const depreciation = this.getStartingBalance() / this.getLife();\n\n    this.setMonthlyDepreciation(depreciation);\n  }\n\n  calculateMonthlySchedule(\n    startDate: Date,\n    life: number,\n    startingBalance: number,\n    monthlyDepreciation: number\n  ): AssetMonthly[] {\n    const assetData = {\n      startDate,\n      life,\n      startingBalance,\n      monthlyDepreciation,\n      classification: LeaseClassification.FINANCE,\n    };\n\n    return calculateAssetSchedule(assetData);\n  }\n}\n","import { LeaseClassification } from \"../../enums\";\nimport { LiabilitySchedulePrint } from \"../../interfaces\";\nimport { calculateAssetSchedule } from \"../../utils\";\nimport { AssetBase } from \"./AssetBase\";\n\nexport class AssetOperating extends AssetBase {\n  private straightLineRent: number;\n\n  setPropertiesOperating(\n    startDate: string,\n    startingBalance: number,\n    deferredRent: number,\n    leaseIncentive: number,\n    initialDirectCosts: number,\n    life: number,\n    liabilitySchedule: LiabilitySchedulePrint[]\n  ): void {\n    // beginning balance is equal to PV less deferred rent less lease incentives plus initial direct costs\n    const beginningBalance =\n      startingBalance - deferredRent - leaseIncentive + initialDirectCosts;\n\n    this.setProperties(startDate, beginningBalance, life);\n    this.setMonthlyTransactions(\n      this.calculateMonthlySchedule(\n        liabilitySchedule,\n        leaseIncentive,\n        deferredRent,\n        initialDirectCosts\n      )\n    );\n  }\n\n  calculateMonthlySchedule(\n    liabilitySchedule: LiabilitySchedulePrint[],\n    leaseIncentive: number,\n    deferredRent: number,\n    initialDirectCosts: number\n  ) {\n    const totalPayments = liabilitySchedule.reduce(\n      (accumulator, currentValue) => accumulator + currentValue.payment,\n      0\n    );\n\n    return (startDate: Date, life: number, startingBalance: number) => {\n      this.straightLineRent =\n        (totalPayments - leaseIncentive - deferredRent + initialDirectCosts) /\n        life;\n\n      const assetData = {\n        startDate,\n        life,\n        startingBalance,\n        liabilitySchedule,\n        totalPayments,\n        classification: LeaseClassification.OPERATING,\n      };\n\n      return calculateAssetSchedule(assetData, this.straightLineRent);\n    };\n  }\n}\n","import {\n  LiabilitySchedulePrint,\n  LiabilityValues,\n  PaymentStream,\n} from \"../../interfaces\";\nimport { generateLiability } from \"../../utils\";\nimport { LiabilityMonthly } from \"./LiabilityMonthly\";\nimport { LeaseClassification } from \"../../enums\";\n\nexport class Liability implements LiabilityValues {\n  startDate: Date;\n  monthlyTransactions: LiabilityMonthly[];\n  payment: number;\n  paymentStream: PaymentStream[];\n  interestRate: number;\n  startingBalance: number;\n  life: number;\n  prepaid: boolean;\n\n  setProperties(\n    startDate: string,\n    payment: number,\n    paymentStream: PaymentStream[],\n    interestRate: number,\n    startingBalance: number,\n    life: number,\n    prepaid: boolean,\n    classification: string\n  ) {\n    if (classification === LeaseClassification.OPERATING) {\n      this.startingBalance = startingBalance;\n    } else {\n      this.startingBalance = startingBalance;\n    }\n\n    this.startDate = new Date(startDate);\n    this.paymentStream = paymentStream;\n    this.payment = payment;\n    this.interestRate = interestRate;\n    this.life = life;\n    this.prepaid = prepaid;\n\n    this.monthlyTransactions = this.calculateMonthlySchedule();\n  }\n\n  // setPropertiesJSON(data, paymentStream, interestRate, life, prepaid) {\n  // const { date, beginningBalance, payment } = data[0];\n  // this.startingBalance = beginningBalance;\n  // this.startDate = new Date(date);\n  // this.paymentStream = paymentStream;\n  // this.payment = payment;\n  // this.interestRate = interestRate;\n  // this.life = life;\n  // this.prepaid = prepaid;\n  // const liabilityMonthly = data.map((month) => {\n  //   const monthLblity = new LiabilityMonthly(\n  //     new Date(month.date),\n  //     month.payment,\n  //     month.beginningBalance,\n  //     this.interestRate,\n  //     month.interestPayment,\n  //     this.prepaid\n  //   );\n  //   monthLblity.shortTermBalance = month.shortTermBalance;\n  //   monthLblity.longTermBalance = month.longTermBalance;\n  //   return monthLblity;\n  // });\n  // this.monthlyTransactions = liabilityMonthly;\n  // }\n\n  calculateMonthlySchedule(): LiabilityMonthly[] {\n    return generateLiability(\n      this.paymentStream,\n      this.startingBalance,\n      this.interestRate,\n      this.prepaid\n    );\n  }\n\n  getLiabilityData(): LiabilitySchedulePrint[] {\n    return this.monthlyTransactions.map((month) => {\n      const {\n        date,\n        beginningBalance,\n        payment,\n        interestExpense,\n        endingBalance,\n        shortTermBalance,\n        longTermBalance,\n      } = month.getMonthlyData();\n\n      return {\n        date: date.toLocaleDateString(),\n        beginningBalance,\n        payment,\n        interestExpense,\n        endingBalance,\n        shortTermBalance,\n        longTermBalance,\n      };\n    });\n  }\n}\n","import { PaymentFrequency } from \"../../enums\";\nimport { PaymentValues } from \"../../interfaces\";\n// payment class\nexport class Payment {\n  private readonly payment: number;\n  private readonly frequency: PaymentFrequency;\n  private startDate: Date;\n  private endDate: Date;\n  private readonly payments: number;\n\n  constructor(config: PaymentValues) {\n    const { payment, frequency, startDate, endDate } = config;\n\n    this.payment = payment;\n    this.frequency = frequency;\n    this.startDate = new Date(startDate);\n    this.endDate = new Date(endDate);\n\n    // calculate the number of months between the start date and end date\n    let years = this.endDate.getFullYear() - this.startDate.getFullYear();\n    let months =\n      years * 12 + (this.endDate.getMonth() - this.startDate.getMonth()) + 1;\n\n    if (months <= 0) {\n      this.payments = 0;\n    } else {\n      this.payments = months;\n    }\n  }\n\n  getPaymentInformation() {\n    return {\n      payment: this.payment,\n      frequency: this.frequency,\n      startDate: this.startDate.toLocaleDateString(),\n      endDate: this.endDate.toLocaleDateString(),\n      payments: this.payments,\n    };\n  }\n\n  sumPayments(): number {\n    return this.payment * this.payments;\n  }\n\n  getPayments() {\n    return this.payments;\n  }\n}\n","import { PaymentStream } from \"../../interfaces\";\nimport { monthlyCalculation } from \"../../utils\";\nimport { Payment } from \"./Payment\";\nimport { PaymentInformation } from \"../../interfaces\";\n\nexport class Payments {\n  payments: Payment[];\n  constructor(payments: Payment[]) {\n    this.payments = payments;\n  }\n\n  sumAllPayments(): number {\n    let result = 0;\n    this.payments.forEach((payment) => {\n      result += payment.sumPayments();\n    });\n\n    return result;\n  }\n\n  paymentInformation(): PaymentInformation[] {\n    return this.payments.map((payment) => payment.getPaymentInformation());\n  }\n\n  quantityOfPayments(): number {\n    return this.payments.reduce((a, b) => a + b.getPayments(), 0);\n  }\n\n  paymentStream(): PaymentStream[] {\n    let arr = [];\n    // loop through all payment streams\n    for (let i = 0; i < this.payments.length; i++) {\n      const { startDate } = this.payments[i].getPaymentInformation();\n      const streamLength = this.payments[i].getPaymentInformation().payments;\n\n      // loop through payments to create an array of payments with dates to pass to the liability\n      for (let y = 0; y < streamLength; y++) {\n        const { payment, frequency } = this.payments[i].getPaymentInformation();\n        const { nextMonth, monthlyPayment } = monthlyCalculation(\n          y,\n          startDate,\n          payment,\n          frequency\n        );\n\n        arr.push({\n          month: nextMonth,\n          payment: monthlyPayment,\n          frequency: frequency,\n        });\n      }\n    }\n\n    return arr;\n  }\n}\n","import { LeaseClassification } from \"../enums\";\nimport { AssetFinance } from \"./Asset/AssetFinance\";\nimport { AssetOperating } from \"./Asset/AssetOperating\";\nimport { Liability } from \"./Liability/Liability\";\nimport { Payment } from \"./Payments/Payment\";\nimport { LeaseValues } from \"../interfaces\";\nimport { PaymentFrequency } from \"../enums\";\nimport { Payments } from \"./Payments/Payments\";\nimport { AssetSchedulePrint } from \"../interfaces\";\nimport { LiabilitySchedulePrint } from \"../interfaces\";\nimport { PaymentInformation } from \"../interfaces\";\nimport { PaymentStream } from \"../interfaces\";\nimport { calculatePresentValue } from \"../../utils\";\n\n// interface LeaseInformation {\n//   lease: string;\n//   prepaid: boolean;\n//   description: string;\n//   classification: string;\n//   interestRate: number;\n//   totalPayments: number;\n//   quantityOfPayments: number;\n//   presentValue: number;\n//   startDate: string;\n//   endDate: string;\n// }\n\ninterface AllLeaseInformation {\n  lease: string;\n  prepaid: boolean;\n  description: string;\n  classification: string;\n  interestRate: number;\n  totalPayments: number;\n  quantityOfPayments: number;\n  presentValue: number;\n  startDate: string;\n  endDate: string;\n  payments: any[];\n  asset: AssetSchedulePrint[];\n  liability: LiabilitySchedulePrint[];\n}\n\ninterface PropertiesJSON {\n  lease: string;\n  prepaid: boolean;\n  description: string;\n  classification: string;\n  interestRate: number;\n  presentValue: number;\n  startDate: string;\n  endDate: string;\n  payments: {\n    payment: number;\n    frequency: string;\n    startDate: string;\n    endDate: string;\n    payments: number;\n  }[];\n  asset: {}[];\n  liability: any[];\n}\n\n// parent class\nexport class Lease implements LeaseValues {\n  name: string;\n  description: string;\n  classification!: LeaseClassification;\n  interestRate: number;\n  payments!: Payments;\n  prepaid: boolean;\n  liability?: any;\n  asset?: any;\n  totalPayments: number;\n  paymentStream!: PaymentStream[];\n  quantityOfPayments: number;\n  presentValue: number;\n  startDate: string;\n  endDate: string;\n  deferredRent: number;\n  leaseIncentive: number;\n  initialDirectCosts: number;\n  useEconomicLife: boolean;\n  economicLife: number;\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.totalPayments = 0;\n    this.quantityOfPayments = 0;\n    this.presentValue = 0;\n    this.startDate = \"\";\n    this.endDate = \"\";\n    this.interestRate = 0;\n    this.prepaid = false;\n  }\n\n  setProperties(\n    name: string,\n    description: string,\n    classification: LeaseClassification,\n    interestRate: number,\n    payments: Payments,\n    prepaid: boolean,\n    deferredRent?: number,\n    leaseIncentive?: number,\n    initialDirectCosts?: number,\n    useEconomicLife?: boolean,\n    economicLife?: number\n  ): void {\n    this.name = name;\n    this.description = description;\n    this.classification = classification;\n    this.payments = payments;\n    this.totalPayments = this.getSumOfPayments();\n    this.interestRate = interestRate / 100;\n    this.prepaid = prepaid;\n    this.quantityOfPayments = this.getQuantityOfPayments();\n    this.deferredRent = deferredRent;\n    this.leaseIncentive = leaseIncentive;\n    this.initialDirectCosts = initialDirectCosts;\n    this.useEconomicLife = useEconomicLife;\n    this.economicLife = economicLife;\n\n    // create and sort the payments array to get the start and end dates of the lease\n    const [startDate, endDate, paymentStream] = this.getPaymentsArray();\n\n    this.startDate = startDate;\n    this.endDate = endDate;\n    this.paymentStream = paymentStream;\n\n    this.presentValue = this.calculatePresentValue();\n\n    // Liability is calculated first because it is needed to calculate the\n    // operating lease asset schedule\n    this.liability = new Liability();\n\n    this.liability.setProperties(\n      this.startDate,\n      this.getSumOfPayments(),\n      this.paymentStream,\n      this.interestRate,\n      this.presentValue,\n      this.quantityOfPayments,\n      this.prepaid,\n      this.classification\n    );\n\n    const liabilityBalance = this.liability.getLiabilityData()[0]\n      .beginningBalance;\n\n    // create and calculate a new asset based off of classification\n    if (this.classification === LeaseClassification.FINANCE) {\n      this.asset = new AssetFinance();\n\n      this.asset.setPropertiesFinance(\n        this.startDate,\n        liabilityBalance,\n        this.paymentStream.length,\n        this.useEconomicLife,\n        this.economicLife\n      );\n    } else if (this.classification === LeaseClassification.OPERATING) {\n      this.asset = new AssetOperating();\n\n      this.asset.setPropertiesOperating(\n        this.startDate,\n        liabilityBalance,\n        this.deferredRent,\n        this.leaseIncentive,\n        this.initialDirectCosts,\n        this.paymentStream.length,\n        this.getLiabilitySchedule()\n      );\n    } else {\n      throw new Error(\n        \"Lease must be classified as either an operating or finance\"\n      );\n    }\n  }\n\n  setPropertiesFromJSON(data: PropertiesJSON): void {\n    const {\n      lease,\n      prepaid,\n      description,\n      classification,\n      interestRate,\n      payments,\n      asset,\n      liability,\n    } = data;\n\n    const leaseClassification =\n      classification === \"operating\"\n        ? LeaseClassification.OPERATING\n        : LeaseClassification.FINANCE;\n\n    const paymentArray = payments.map((el) => {\n      let frequency;\n      if (el.frequency === \"annual\") {\n        frequency = PaymentFrequency.Annual;\n      } else if (el.frequency === \"semiannual\") {\n        frequency = PaymentFrequency.SemiAnnual;\n      } else if (el.frequency === \"quarterly\") {\n        frequency = PaymentFrequency.Quarterly;\n      } else {\n        frequency = PaymentFrequency.Monthly;\n      }\n      return new Payment({\n        payment: el.payment,\n        frequency: frequency,\n        startDate: new Date(el.startDate).toLocaleDateString(),\n        endDate: new Date(el.endDate).toLocaleDateString(),\n      });\n    });\n\n    const paymentObjects = new Payments(paymentArray);\n\n    this.name = lease;\n    this.description = description;\n    this.classification = leaseClassification;\n    this.interestRate = interestRate;\n    this.payments = paymentObjects;\n    this.prepaid = prepaid;\n    this.totalPayments = this.getSumOfPayments();\n    this.quantityOfPayments = this.getQuantityOfPayments();\n\n    const [startDate, endDate, paymentStream] = this.getPaymentsArray();\n\n    this.startDate = startDate;\n    this.endDate = endDate;\n    this.paymentStream = paymentStream;\n\n    this.liability = new Liability();\n    this.liability.setPropertiesJSON(\n      liability,\n      this.paymentStream,\n      this.interestRate,\n      liability.length,\n      this.prepaid\n    );\n\n    // create and calculate a new asset based off of classification\n    if (this.classification === LeaseClassification.FINANCE) {\n      this.asset = new AssetFinance();\n      this.asset.setPropertiesFromJSON(asset);\n    } else if (this.classification === LeaseClassification.OPERATING) {\n      this.asset = new AssetOperating();\n      this.asset.setPropertiesFromJSON(asset);\n    } else {\n      throw new Error(\n        \"Lease must be classified as either an operating or finance\"\n      );\n    }\n\n    this.presentValue = this.liability.getLiabilityData()[0].beginningBalance;\n  }\n\n  getPaymentsArray(): [string, string, PaymentStream[]] {\n    const paymentsArray = this.payments\n      .paymentInformation()\n      .sort(\n        (a, b) =>\n          new Date(a.startDate).valueOf() - new Date(b.startDate).valueOf()\n      );\n\n    const startDate = paymentsArray[0].startDate;\n    const endDate = paymentsArray[paymentsArray.length - 1].endDate;\n    const paymentStream = this.getPaymentStream();\n\n    return [startDate, endDate, paymentStream];\n  }\n\n  /**\n   * gets an array of payments\n   */\n  getPayments(): PaymentInformation[] {\n    return this.payments.paymentInformation();\n  }\n  /**\n   * gets the lease data\n   */\n  // getLeaseInformation(): LeaseInformation {\n  //   return {\n  //     lease: this.name,\n  //     prepaid: this.prepaid,\n  //     description: this.description,\n  //     classification: this.classification,\n  //     interestRate: this.interestRate,\n  //     totalPayments: this.totalPayments,\n  //     quantityOfPayments: this.quantityOfPayments,\n  //     presentValue: this.presentValue,\n  //     startDate: this.startDate,\n  //     endDate: this.endDate,\n  //   };\n  // }\n\n  /**\n   * gets all of the lease data\n   */\n  getAllLeaseInformation(): AllLeaseInformation {\n    return {\n      lease: this.name,\n      prepaid: this.prepaid,\n      description: this.description,\n      classification: this.classification,\n      interestRate: this.interestRate,\n      totalPayments: this.totalPayments,\n      quantityOfPayments: this.quantityOfPayments,\n      presentValue: this.presentValue,\n      startDate: this.startDate,\n      endDate: this.endDate,\n      payments: this.getPayments(),\n      asset: this.getAssetSchedule(),\n      liability: this.getLiabilitySchedule(),\n    };\n  }\n\n  /**\n   * Retrieves the current month asset and liability schedules by providing the month requested as a string\n   * @param month\n   */\n  getCurrentMonth(\n    month: string\n  ): { lease: string; schedules: { asset; liability } } {\n    const asset = this.getAssetSchedule().filter(\n      (el) => new Date(month).valueOf() === new Date(el.date).valueOf()\n    );\n\n    const liability = this.getLiabilitySchedule().filter(\n      (el) => new Date(month).valueOf() === new Date(el.date).valueOf()\n    );\n\n    return {\n      lease: this.name,\n      schedules: {\n        asset,\n        liability,\n      },\n    };\n  }\n\n  /**\n   * gets the total payments\n   */\n  getSumOfPayments(): number {\n    return this.payments.sumAllPayments();\n  }\n\n  /**\n   * gets the quantity of payments\n   */\n  getQuantityOfPayments(): number {\n    return this.payments.quantityOfPayments();\n  }\n  /**\n   * gets all of the payments as an array\n   */\n  getPaymentStream(): PaymentStream[] {\n    return this.payments.paymentStream();\n  }\n  /**\n   * gets the asset schedule as an array\n   */\n  getAssetSchedule(): AssetSchedulePrint[] {\n    return this.asset.getAssetData();\n  }\n  /**\n   * gets the liability schedule as an array\n   */\n  getLiabilitySchedule(): LiabilitySchedulePrint[] {\n    return this.liability.getLiabilityData();\n  }\n  /**\n   * Private function that calculates the present value of all payments\n   */\n  private calculatePresentValue(): number {\n    const paymentStream = this.paymentStream.map((month) => {\n      return { payment: month.payment, frequency: month.frequency };\n    });\n\n    return calculatePresentValue(\n      paymentStream,\n      this.interestRate,\n      this.prepaid\n    );\n  }\n}\n","import { formatDate } from \".\";\nimport {\n  Lease,\n  LeaseClassification,\n  Payment,\n  PaymentFrequency,\n  Payments,\n} from \"../leases\";\nimport { LeaseType } from \"../../hooks/useForm\";\n\nexport const generatePaymentStream = (payments): Payments => {\n  const paymentStream = payments.map((el) => {\n    const { amount, frequency, startDate, endDate } = el;\n    const stDate = formatDate(startDate);\n    const edDate = formatDate(endDate);\n\n    return new Payment({\n      payment: amount,\n      frequency:\n        frequency === \"monthly\"\n          ? PaymentFrequency.Monthly\n          : frequency === \"quarterly\"\n          ? PaymentFrequency.Quarterly\n          : frequency === \"semiAnnual\"\n          ? PaymentFrequency.SemiAnnual\n          : PaymentFrequency.Annual,\n      startDate: stDate,\n      endDate: edDate,\n    });\n  });\n\n  return new Payments(paymentStream);\n};\n\nexport const createLease = (payments, leaseInfo: LeaseType) => {\n  const {\n    name,\n    description,\n    interestRate,\n    deferredRent,\n    leaseIncentive,\n    initialDirectCosts,\n    economicLife,\n  } = leaseInfo;\n\n  const leasePayments = generatePaymentStream(payments);\n\n  const lease = new Lease();\n\n  const leaseClassification =\n    leaseInfo.classification === \"operating\"\n      ? LeaseClassification.OPERATING\n      : LeaseClassification.FINANCE;\n\n  const prepaid = leaseInfo.prepaid === \"true\";\n  const useEconomicLife = leaseInfo.useEconomicLife === \"true\";\n\n  lease.setProperties(\n    name,\n    description,\n    leaseClassification,\n    interestRate,\n    leasePayments,\n    prepaid,\n    Number(deferredRent),\n    Number(leaseIncentive),\n    Number(initialDirectCosts),\n    useEconomicLife,\n    Number(economicLife)\n  );\n\n  return lease;\n};\n","export const discountRate = (interestRate: number): number => interestRate / 12;\r\n","import { discountRate } from \"./index\";\n\nexport const calculatePresentValue = (\n  payments,\n  interestRate: number,\n  prepaid: boolean\n): number => {\n  const paymentStream = payments.map((month) => {\n    return { payment: month.payment, frequency: month.frequency };\n  });\n\n  const reducerFunction = calcPresentValue(interestRate, prepaid);\n\n  return paymentStream.reduce(reducerFunction, 0);\n};\n\n/**\n * Generates the reducer function for PV calculation\n * @param interestRate\n * @param prepaid\n * @returns\n */\nexport const calcPresentValue = (interestRate: number, prepaid: boolean) => {\n  return (\n    accumulator: number,\n    currentValue: { payment: number; frequency: string },\n    index: number\n  ) => {\n    const { payment } = currentValue;\n\n    const rateOfReturn = discountRate(interestRate);\n\n    if (prepaid) {\n      if (index === 0) return payment;\n\n      return accumulator + payment / Math.pow(1 + rateOfReturn, index);\n    } else {\n      return accumulator + payment / Math.pow(1 + rateOfReturn, index + 1);\n    }\n  };\n};\n","import React, { useState } from \"react\";\nimport { checkDateIsAfter, getFirstDay, getLastDay } from \"../helpers/utils\";\n\nconst Payments = ({ onChange, onClickAdd, onClickDelete, paymentsArr }) => {\n  const [error, setError] = useState(\"\");\n\n  const handleChange = (\n    e: React.FormEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    const { name, id, value } = e.currentTarget;\n    const indexValue = id.split(\" \")[1];\n\n    setError(\"\");\n\n    let updatedValue: string | number;\n\n    if (name === \"startDate\") {\n      updatedValue = getFirstDay(value);\n    } else if (name === \"endDate\") {\n      updatedValue = getLastDay(value);\n\n      if (!checkDateIsAfter(paymentsArr[indexValue].startDate, updatedValue)) {\n        setError(\"End date must be after start date\");\n        return;\n      }\n    } else if (name === \"amount\") {\n      updatedValue = Number(value);\n    } else {\n      updatedValue = value;\n    }\n\n    const oldPayment: {\n      startDate: string;\n      endDate: string;\n      frequency: string;\n      amount: number;\n    } = paymentsArr[indexValue];\n\n    const updatedPayment = {\n      ...oldPayment,\n      [name]: updatedValue,\n    };\n\n    const oldArray = [...paymentsArr];\n\n    oldArray[indexValue] = updatedPayment;\n\n    onChange(oldArray);\n  };\n\n  return (\n    <>\n      <div>\n        <button onClick={onClickAdd}>Add Payment</button>\n        <button onClick={onClickDelete}>Delete Payment</button>\n      </div>\n      {/* TODO create error component */}\n      {error !== \"\" ? <p>{error}</p> : null}\n      <table>\n        <thead>\n          <tr>\n            <th>Start Date</th>\n            <th>End Date</th>\n            <th>Frequency</th>\n            <th>Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          {paymentsArr.map((payment, index) => (\n            <tr key={index}>\n              <td>\n                <input\n                  type=\"date\"\n                  name=\"startDate\"\n                  id={`payment ${index}`}\n                  value={payment.startDate}\n                  onChange={handleChange}\n                  min={payment.min}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"date\"\n                  name=\"endDate\"\n                  id={`payment ${index}`}\n                  value={payment.endDate}\n                  onChange={handleChange}\n                  min={getLastDay(payment.min)}\n                />\n              </td>\n              <td>\n                <select\n                  name=\"frequency\"\n                  id={`payment ${index}`}\n                  onChange={handleChange}\n                >\n                  <option value=\"monthly\">Monthly</option>\n                  <option value=\"quarterly\">Quarterly</option>\n                  <option value=\"semiAnnual\">Semi Annual</option>\n                  <option value=\"annual\">Annual</option>\n                </select>\n              </td>\n              <td>\n                <input\n                  type=\"number\"\n                  name=\"amount\"\n                  id={`payment ${index}`}\n                  value={payment.amount}\n                  onChange={handleChange}\n                />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Payments;\n","import ReactExport from 'react-export-excel';\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n\r\nconst Download = ({ lease, fileName }) => {\r\n  return (\r\n    <ExcelFile\r\n      filename={fileName}\r\n      element={<button>Download Schedules</button>}\r\n    >\r\n      <ExcelSheet dataSet={lease} name=\"Organization\" />\r\n    </ExcelFile>\r\n  );\r\n};\r\n\r\nexport default Download;\r\n","import React, { useState } from 'react';\r\n\r\nexport interface LeaseType {\r\n  economicLife?: number;\r\n  useEconomicLife?: string;\r\n  name?: string;\r\n  description?: string;\r\n  classification?: string;\r\n  prepaid?: string;\r\n  interestRate?: number;\r\n  deferredRent?: number;\r\n  leaseIncentive?: number;\r\n  initialDirectCosts?: number;\r\n}\r\n\r\nconst useForm = (\r\n  initialValues: LeaseType\r\n): [\r\n  LeaseType,\r\n  (\r\n    event:\r\n      | React.FormEvent<HTMLInputElement>\r\n      | React.ChangeEvent<HTMLSelectElement>\r\n  ) => void\r\n] => {\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const handleChange = (\r\n    event:\r\n      | React.FormEvent<HTMLInputElement>\r\n      | React.ChangeEvent<HTMLSelectElement>\r\n  ): void => {\r\n    const { id, value } = event.currentTarget;\r\n\r\n    setValues({ ...values, [id]: value });\r\n  };\r\n\r\n  return [values, handleChange];\r\n};\r\n\r\nexport { useForm };\r\n","import { InputTypes } from \"../../pages/CreateLease\";\nimport React from \"react\";\n\ninterface ConfigObject {\n  label: string;\n  type: InputTypes;\n  id: string;\n  name: string;\n  value: string | number;\n  onChange: (\n    event:\n      | React.FormEvent<HTMLInputElement>\n      | React.ChangeEvent<HTMLSelectElement>\n  ) => void;\n  options?: { text: string; value: string }[];\n  show?: boolean;\n  required?: boolean;\n}\n\ninterface InputProps {\n  config: ConfigObject;\n}\n\nconst Input = (props: InputProps) => {\n  const {\n    label,\n    type,\n    name,\n    id,\n    value,\n    onChange,\n    options,\n    show,\n    required,\n  } = props.config;\n\n  if (show === undefined || show) {\n    if (type === InputTypes.Select) {\n      return (\n        <>\n          <label htmlFor={id}>{label}</label>\n          <select name={name} id={id} value={value} onChange={onChange}>\n            {options.map((option, index) => (\n              <option key={`${option}-${index}`} value={option.value}>\n                {option.text}\n              </option>\n            ))}\n          </select>\n        </>\n      );\n    }\n    return (\n      <>\n        <label htmlFor={id}>{label}</label>\n        <input\n          type={type}\n          name={name}\n          id={id}\n          value={value}\n          onChange={onChange}\n          required={required}\n        />\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default Input;\n","import styled from \"styled-components\";\n\nconst StyledDataTable = styled.table`\n  border-collapse: collapse;\n  width: 50%;\n  margin-bottom: 5rem;\n  overflow: auto;\n\n  tr {\n    border-bottom: 1px solid black;\n  }\n\n  td {\n    vertical-align: bottom;\n    text-align: center;\n    padding: 0.5rem 2rem;\n  }\n\n  th {\n    vertical-align: bottom;\n    text-align: center;\n    padding-bottom: 0;\n    color: black;\n  }\n\n  tr:nth-child(even) {\n    background: #ecf0f1;\n  }\n`;\n\nexport { StyledDataTable };\n","import { capitalizeFirstLetter } from \"../../helpers/utils\";\nimport { StyledDataTable } from \"./StyledDataTable\";\n\ninterface Config {\n  data: {}[];\n}\n\n/**\n * Generates the rows for the data table\n * @param dataArray\n * @returns\n */\nconst createTableRows = (dataArray: {}[]) => (\n  <tbody>\n    {dataArray.map((row, index) => (\n      <tr key={`${row}-${index}`}>\n        {Object.keys(row).map((key) => {\n          if (typeof row[key] === \"number\") {\n            return (\n              <td key={key}>\n                {new Intl.NumberFormat(\"en-US\", {\n                  minimumFractionDigits: 2,\n                }).format(row[key])}\n              </td>\n            );\n          }\n          return <td key={key}>{row[key]}</td>;\n        })}\n      </tr>\n    ))}\n  </tbody>\n);\n\n/**\n * Generates the headers from an array of objects\n * @param dataArray\n * @returns\n */\nconst createTableHeaders = (dataArray: {}[]) => {\n  const headers = Object.keys(dataArray[0]);\n  let result = [];\n  headers\n    .map((header) => header.split(/(?=[A-Z])/))\n    .forEach((el) => {\n      let combinedText = \"\";\n      for (let i = 0; i < el.length; i++) {\n        combinedText = combinedText + \" \" + capitalizeFirstLetter(el[i]);\n      }\n      result.push(combinedText);\n    });\n\n  return (\n    <thead>\n      <tr>\n        {result.map((word, index) => (\n          <th key={`${word}-${index}`}>{word}</th>\n        ))}\n      </tr>\n    </thead>\n  );\n};\n\n/**\n * Datatable that automatically converts and array of objects to a table\n * with headers\n * @param props\n * @returns\n */\nconst DataTable = (props: Config) => {\n  const { data } = props;\n\n  const tableRows = createTableRows(data);\n  const tableHeader = createTableHeaders(data);\n\n  return (\n    <StyledDataTable>\n      {tableHeader}\n      {tableRows}\n    </StyledDataTable>\n  );\n};\n\nexport default DataTable;\n","import styled from \"styled-components\";\n\nconst StyledCreateLease = styled.div`\n  font-family: inherit;\n  display: flex;\n  flex-direction: column;\n  margin: 2.5rem auto auto;\n  width: 50%;\n\n  h3 {\n    margin: 0 0 1rem;\n    background-size: 100% 100%;\n    color: black;\n    padding-bottom: 1rem;\n  }\n\n  .create-lease-container {\n    display: flex;\n    flex-direction: column;\n    width: 50%;\n    margin: auto;\n  }\n\n  .schedule-container {\n    display: flex;\n    justify-content: center;\n    align-content: center;\n  }\n\n  .schedule-container > div {\n    width: min-content;\n    margin: 0 auto auto 2rem;\n  }\n\n  .schedule-container > div > h3 {\n    text-align: center;\n  }\n\n  span {\n    align-self: center;\n  }\n\n  .input-container {\n    margin: auto;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n\n  .payments-container {\n    width: 75%;\n    display: flex;\n    margin: 1rem auto auto;\n    flex-direction: column;\n  }\n\n  .payments-container > div {\n    display: flex;\n    justify-content: space-evenly;\n  }\n\n  .input-container > input,\n  .input-container > label,\n  .input-container > select {\n    margin-top: 0.5rem;\n    width: 50%;\n    font: inherit;\n    padding: 2px 2px;\n    box-sizing: border-box;\n  }\n\n  input,\n  select {\n    border-bottom: 1px solid grey;\n    border-top: none;\n    border-right: none;\n    border-left: none;\n    text-align: right;\n  }\n\n  input:focus,\n  select:focus {\n    background: #55efc4;\n  }\n\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n\n  button {\n    padding: 0.25rem;\n    font-family: inherit;\n    margin-left: 1rem;\n    font-size: 16px;\n    background-color: #3498db;\n    width: 8.5rem;\n  }\n\n  button[type=\"submit\"] {\n    margin: 2rem auto;\n    padding: 0.25rem 0.5rem;\n    font-weight: normal;\n    font-size: 18px;\n  }\n\n  .payments-container > table > tbody > tr > td > input {\n    margin-left: 0.25rem;\n  }\n\n  button:hover {\n    background-color: #74b9ff;\n  }\n\n  @media (min-width: 40rem) {\n    margin: 2.5rem auto auto;\n    width: 50%;\n  }\n`;\n\nexport { StyledCreateLease };\n","import React, { useState } from \"react\";\nimport { getNextDay } from \"../helpers/utils\";\n\nexport const usePayments = () => {\n  const [payments, setPayments] = useState([\n    { startDate: \"\", endDate: \"\", frequency: \"monthly\", amount: 0, min: \"\" },\n  ]);\n\n  const onChangePayments = (updatedPayments: []): void => {\n    setPayments(updatedPayments);\n  };\n\n  const onClickAddPayment = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    e.preventDefault();\n    const arr = [...payments];\n\n    const priorEndDate = arr[arr.length - 1].endDate;\n    const newStartDate = getNextDay(priorEndDate);\n\n    arr.push({\n      startDate: newStartDate,\n      endDate: \"\",\n      frequency: \"monthly\",\n      amount: 0,\n      min: newStartDate,\n    });\n\n    setPayments(arr);\n  };\n\n  const onClickDeletePayment = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    e.preventDefault();\n\n    if (payments.length === 1) return;\n\n    const arr = [...payments];\n\n    arr.pop();\n\n    setPayments(arr);\n  };\n\n  return [payments, onChangePayments, onClickAddPayment, onClickDeletePayment];\n};\n","import { GeneratedLease } from \"../../interfaces\";\nimport { capitalizeFirstLetter } from \"./index\";\nimport { formatNumberPercent } from \"./formatting\";\n\nexport const createExcelData = (lease: GeneratedLease): any[] => {\n  const obj = { ...lease };\n\n  const assetSchedule = obj.asset.map((month) => [\n    month.date,\n    month.beginningBalance,\n    month.depreciation,\n    month.endingBalance,\n  ]);\n\n  const liabilitySchedule = obj.liability.map((month) => [\n    month.date,\n    month.beginningBalance,\n    month.payment,\n    month.interestExpense,\n    month.interestPayment,\n    month.principal,\n    month.endingBalance,\n    month.shortTermBalance,\n    month.longTermBalance,\n  ]);\n\n  return [\n    {\n      columns: [\"\"],\n      data: [\n        [\"Name: \", capitalizeFirstLetter(obj.lease)],\n        [\"Description: \", capitalizeFirstLetter(obj.description)],\n        [\"Classification: \", capitalizeFirstLetter(obj.classification)],\n        [\"Prepaid\", obj.prepaid],\n        [\"Discount Rate: \", formatNumberPercent(obj.interestRate)],\n        [\"Total Payments: \", obj.totalPayments],\n        [\"Present Value: \", obj.presentValue],\n        [\"Start Date: \", obj.startDate],\n        [\"End Date: \", obj.endDate],\n      ],\n    },\n    { ySteps: 5, columns: [\"Asset Schedule\"], data: [[\"\"]] },\n    {\n      // xSteps: 1, // Will start putting cell with 1 empty cell on left most\n      ySteps: -1, //will put space of 5 rows,\n      columns: [\"Date\", \"Beginning Balance\", \"Depreciation\", \"Ending Balance\"],\n      data: assetSchedule,\n    },\n    {\n      ySteps: -assetSchedule.length - 2,\n      xSteps: 6,\n      columns: [\"Liability Schedule\"],\n      data: [[\"\"]],\n    },\n    {\n      ySteps: -1,\n      xSteps: 6,\n      columns: [\n        \"Date\",\n        \"Beginning Balance\",\n        \"Payment\",\n        \"Interest Expense\",\n        \"Interest Payment\",\n        \"Principal\",\n        \"Ending Balance\",\n        \"Short Term Balance\",\n        \"Long Term Balance\",\n      ],\n      data: liabilitySchedule,\n    },\n  ];\n};\n","import { RouteComponentProps } from \"@reach/router\";\n\nconst HomePage = (_props: RouteComponentProps) => {\n  return (\n    <div>\n      <h4>Welcome!</h4>\n      <p>\n        This site is to help calculate a lease schedule in accordance with ASC\n        842.\n      </p>\n      <p>Please follow the links at the top</p>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import styled from \"styled-components\";\n\nconst StyledPresentValueCalc = styled.div`\n  font-family: inherit;\n  display: flex;\n  flex-direction: column;\n  margin: 2.5rem auto auto;\n  width: 50%;\n\n  button {\n    padding: 0.25rem;\n    font-family: inherit;\n  }\n\n  .payments-container {\n    margin-top: 2rem;\n  }\n\n  .payments-container,\n  .submit-button-container,\n  .input-container,\n  .presentvalue-container,\n  .payments-container > div {\n    display: flex;\n  }\n\n  .payments-container,\n  .submit-button-container {\n    align-content: center;\n  }\n\n  .submit-button-container {\n    justify-content: center;\n  }\n\n  .input-container,\n  .payments-container > div {\n    margin-top: 1rem;\n  }\n\n  .payments-container {\n    flex-direction: column;\n    align-content: center;\n  }\n\n  .error {\n    margin: 0;\n  }\n\n  .input-container,\n  .presentvalue-container {\n    justify-content: space-between;\n  }\n\n  .payments-container > p {\n    margin: 0;\n  }\n\n  .presentvalue-container {\n    font-weight: bold;\n  }\n\n  .input-container > select,\n  .payments-container > table > tbody > tr > td > input,\n  .payments-container > table > tbody > tr > td > select {\n    width: 8rem;\n    padding: 2px 2px;\n  }\n\n  .payments-container > table > tbody > tr > td > select {\n    padding-bottom: 1px;\n  }\n\n  .payments-container > div,\n  .payments-container > table {\n    align-self: center;\n  }\n\n  .payments-container > div > button,\n  .submit-button-container > button {\n    margin-left: 1rem;\n    font-size: 16px;\n    background-color: #3498db;\n    width: 8.5rem;\n  }\n\n  .payments-container > div > button:hover,\n  .form-submit:hover {\n    background-color: #74b9ff;\n  }\n\n  button[type=\"submit\"] {\n    margin: 2rem auto;\n    padding: 0.25rem 0.5rem;\n    font-weight: normal;\n    font-size: 18px;\n  }\n`;\n\nexport default StyledPresentValueCalc;\n","import { RouteComponentProps } from \"@reach/router\";\nimport Payments from \"../components/Payments\";\nimport { usePayments } from \"../hooks/usePayments\";\nimport React, { useState } from \"react\";\nimport { generatePaymentStream } from \"../helpers/utils\";\nimport { InputTypes } from \"./CreateLease\";\nimport { useForm } from \"../hooks/useForm\";\nimport Input from \"../components/input/Input\";\nimport { calculatePresentValue, formatNumberDecimal } from \"../helpers/utils\";\nimport StyledPresentValueCalc from \"./StyledPresentValueCalc\";\n\nconst leaseInitialValues = {\n  prepaid: \"true\",\n  interestRate: 0,\n};\n\nconst PresentValueCalculatorPage = (_props: RouteComponentProps) => {\n  const [presentValue, setPresentValue] = useState(0);\n  const [error, setError] = useState(\"\");\n  const [values, handleChange] = useForm(leaseInitialValues);\n\n  const [\n    payments,\n    onChangePayments,\n    onClickAddPayment,\n    onClickDeletePayment,\n  ] = usePayments();\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setError(\"\");\n\n    if (payments[0].startDate === \"\" && payments[0].endDate === \"\") {\n      setError(\"Please enter a payment start and end date\");\n\n      return;\n    } else if (payments[0].amount === 0) {\n      setError(\"Please enter a payment amount\");\n\n      return;\n    }\n\n    const leasePayments = generatePaymentStream(payments).paymentStream();\n\n    let prepaid: boolean;\n    prepaid = values.prepaid === \"true\";\n\n    setPresentValue(\n      calculatePresentValue(leasePayments, values.interestRate / 100, prepaid)\n    );\n  };\n\n  const inputObject = [\n    {\n      label: \"Prepaid:\",\n      type: InputTypes.Select,\n      name: \"prepaid\",\n      id: \"prepaid\",\n      value: values.prepaid,\n      onChange: handleChange,\n      options: [\n        { text: \"Yes\", value: \"true\" },\n        { text: \"No\", value: \"false\" },\n      ],\n      required: true,\n    },\n\n    {\n      label: \"Interest Rate:\",\n      type: InputTypes.Number,\n      name: \"interestRate\",\n      id: \"interestRate\",\n      value: values.interestRate,\n      onChange: handleChange,\n      required: true,\n    },\n  ];\n\n  return (\n    <StyledPresentValueCalc>\n      <h4>PV Calculator</h4>\n      <form onSubmit={onSubmit}>\n        <div className=\"presentvalue-container\">\n          <p>Calculated Present Value: </p>\n          <p>{formatNumberDecimal(presentValue)}</p>\n        </div>\n        {inputObject.map((input, index) => (\n          <div key={`${input}-${index}`} className=\"input-container\">\n            <Input config={input} />\n          </div>\n        ))}\n        <div className=\"payments-container\">\n          <div className=\"error\">\n            <p>{error !== \"\" ? error : null}</p>\n          </div>\n          <Payments\n            onChange={onChangePayments}\n            onClickAdd={onClickAddPayment}\n            onClickDelete={onClickDeletePayment}\n            paymentsArr={payments}\n          />\n        </div>\n        <div className=\"submit-button-container\">\n          <button type=\"submit\" className=\"form-submit\">\n            Calculate PV\n          </button>\n        </div>\n      </form>\n    </StyledPresentValueCalc>\n  );\n};\n\nexport default PresentValueCalculatorPage;\n","import { Router } from '@reach/router';\r\n\r\nimport './App.css';\r\nimport Navbar from './components/navbar/Navbar';\r\nimport CreateLeasePage from './pages/CreateLease';\r\nimport HomePage from './pages/HomePage';\r\nimport PresentValueCalculatorPage from './pages/PresentValueCalculator';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <div className=\"page-container\">\r\n        <Router>\r\n          <HomePage path=\"/leases-react/\" />\r\n          <CreateLeasePage path=\"/leases-react/create-lease\" />\r\n          <PresentValueCalculatorPage path=\"leases-react/present-value-calculator\" />\r\n        </Router>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}