{"version":3,"sources":["helpers/leases/enums/LeaseClassification.ts","helpers/leases/enums/PaymentFrequency.ts","helpers/utils/dateFunctions.ts","helpers/utils/monthCorrection.ts","helpers/utils/formatDate.ts","App.tsx","helpers/leases/utils/roundNumber.ts","helpers/leases/utils/addMonth.ts","helpers/leases/utils/monthlyCalculation.ts","helpers/leases/classes/Liability/LiabilityMonthly.ts","helpers/leases/utils/calculateLiability.ts","helpers/leases/classes/Asset/AssetMonthly.ts","helpers/leases/utils/calculateAssetSchedule.ts","helpers/leases/classes/Asset/AssetBase.ts","helpers/leases/classes/Asset/AssetFinance.ts","helpers/leases/classes/Asset/AssetOperating.ts","helpers/leases/classes/Liability/Liability.ts","helpers/leases/classes/Payments/Payment.ts","helpers/leases/classes/Payments/Payments.ts","helpers/leases/classes/Lease.ts","helpers/utils/createLease.ts","components/Payments.tsx","helpers/utils/checkDateIsAfter.ts","components/Download.tsx","components/input/Input.tsx","components/table/DataTableStyles.js","components/table/DataTable.tsx","helpers/utils/capitalizeFirstLetter.ts","StyledForm.ts","hooks/useForm.ts","helpers/utils/createExcelData.ts","index.tsx"],"names":["LeaseClassification","PaymentFrequency","getLastDay","value","dateArr","split","date","Date","Number","newDate","getFullYear","getMonth","setDate","getDate","month","monthCorrection","year","day","monthNumber","toString","formatDate","InputTypes","roundNumber","number","decimals","toFixed","addMonth","months","monthlyCalculation","y","startDate","payment","frequency","nextMonth","monthlyPayment","Annual","SemiAnnual","Quarterly","LiabilityMonthly","principal","beginningBalance","interestRate","interestExpense","interestPayment","endingBalance","prepaid","shortTermBalance","longTermBalance","this","calculateLiability","startingBalance","index","paymentsLength","schedule","endBalance","getMonthlyData","currentMonthInterestExpense","currentMonthEndingBalance","calculateSTLTBalances","liabilitySchedule","result","stBalance","ltBalance","sort","a","b","valueOf","i","length","generateLiability","paymentStream","payments","correctedInterestRate","push","AssetMonthly","depreciation","calculateAssetSchedule","data","straightLineRent","life","monthlyDepreciation","classification","OPERATING","AssetBase","monthlyTransactions","setProperties","setMonthlyTransactionsFromJSON","map","toLocaleDateString","callback","AssetFinance","useEconomicLife","economicLife","calculatedLife","calculateDepreciationWithEconomicLife","calculateDepreciation","setMonthlyTransactions","calculateMonthlySchedule","getStartingBalance","setMonthlyDepreciation","getLife","assetData","FINANCE","AssetOperating","deferredRent","leaseIncentive","initialDirectCosts","totalPayments","reduce","accumulator","currentValue","Liability","Payment","config","endDate","Payments","forEach","sumPayments","getPaymentInformation","getPayments","arr","streamLength","Lease","name","description","liability","asset","quantityOfPayments","presentValue","getSumOfPayments","getQuantityOfPayments","paymentsArray","paymentInformation","getPaymentStream","calculatePresentValue","liabilityBalance","getLiabilityData","setPropertiesFinance","Error","setPropertiesOperating","getLiabilitySchedule","lease","leaseClassification","paymentArray","el","Monthly","paymentObjects","setPropertiesJSON","setPropertiesFromJSON","getAssetSchedule","filter","schedules","sumAllPayments","getAssetData","correctedPaymentStream","correctPaymentStreamForPVCalc","reducerFunction","calcPresentValue","rateOfReturn","presentValueInterestRate","Math","pow","createLease","leaseInfo","amount","stDate","edDate","generatePaymentStream","leasePayments","onChange","onClickAdd","onClickDelete","paymentsArr","useState","error","setError","handleChange","e","updatedValue","currentTarget","id","indexValue","getFirstDay","start","checkDateIsAfter","oldPayment","updatedPayment","oldArray","onClick","type","min","ExcelFile","ReactExport","ExcelSheet","Download","element","dataSet","Input","props","label","options","show","required","undefined","Select","htmlFor","option","text","DataTableStyled","styled","table","DataTableBodyStyled","tbody","DataTable","dataArray","tableRows","row","Object","keys","key","Intl","NumberFormat","minimumFractionDigits","format","tableHeader","headers","header","word","combinedText","toUpperCase","substring","createTableHeaders","FormStyled","form","leaseInitialValues","App","generatedLease","setGeneratedLease","setLeaseInfo","initialValues","values","setValues","event","useForm","setPayments","useEffect","leaseExcelData","obj","assetSchedule","columns","ySteps","xSteps","createExcelData","inputObject","Text","className","onSubmit","preventDefault","genLease","getAllLeaseInformation","input","updatedPayments","newStartDate","getNextDay","pop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5db7fe87.chunk.js","sourcesContent":["export enum LeaseClassification {\r\n  FINANCE = 'finance',\r\n  OPERATING = 'operating'\r\n}\r\n","export enum PaymentFrequency {\r\n  Annual = 'annual',\r\n  SemiAnnual = 'semiannual',\r\n  Quarterly = 'quarterly',\r\n  Monthly = 'monthly'\r\n}\r\n","import { monthCorrection } from '.';\r\n\r\n/**\r\n * takes a date as string returns the first day of the month\r\n * @param value\r\n */\r\nexport const getFirstDay = (value: string): string => {\r\n  const dateArr = value.split('-');\r\n  const newDate = new Date(\r\n    Number(dateArr[0]),\r\n    Number(dateArr[1]) - 1,\r\n    Number(dateArr[2])\r\n  );\r\n\r\n  const month = monthCorrection(newDate.getMonth());\r\n\r\n  const day = '01';\r\n  const year = newDate.getFullYear();\r\n\r\n  const updatedDate = `${year}-${month}-${day}`;\r\n\r\n  return updatedDate;\r\n};\r\n\r\n/**\r\n * takes a date as string returns last day of the month\r\n * @param value\r\n */\r\nexport const getLastDay = (value: string): string => {\r\n  const dateArr = value.split('-');\r\n  const date = new Date(\r\n    Number(dateArr[0]),\r\n    Number(dateArr[1]) - 1,\r\n    Number(dateArr[2])\r\n  );\r\n\r\n  const newDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);\r\n\r\n  newDate.setDate(newDate.getDate() - 1);\r\n\r\n  const month = monthCorrection(newDate.getMonth());\r\n  const year = newDate.getFullYear();\r\n  const day = newDate.getDate();\r\n\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nexport const getNextDay = (value: string): string => {\r\n  const date = new Date(value);\r\n  const day = '01';\r\n  const newDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);\r\n  const month = monthCorrection(newDate.getMonth());\r\n  return `${newDate.getFullYear()}-${month}-${day}`;\r\n};\r\n","/**\r\n * corrects the month to two digits\r\n * @param month\r\n */\r\nexport const monthCorrection = (month: number | string): string => {\r\n  const monthNumber = Number(month);\r\n\r\n  const correctedMonth =\r\n    monthNumber + 1 < 10 ? `0${monthNumber + 1}` : monthNumber + 1;\r\n\r\n  return correctedMonth.toString();\r\n};\r\n","export const formatDate = (value: string) => {\r\n  const dateArr = value.split('-');\r\n\r\n  return `${dateArr[1]}/${dateArr[2]}/${dateArr[0]}`;\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport Payments from './components/Payments';\r\nimport Download from './components/Download';\r\n\r\nimport { createExcelData, createLease, getNextDay } from './helpers/utils';\r\nimport { GeneratedLease } from './interfaces';\r\nimport { useForm } from './hooks/useForm';\r\nimport Input from './components/input/Input';\r\nimport DataTable from './components/table/DataTable';\r\nimport { FormStyled } from './StyledForm';\r\n\r\nimport './App.css';\r\n\r\nexport enum InputTypes {\r\n  Select = 'select',\r\n  Text = 'text',\r\n  Number = 'number'\r\n}\r\n\r\nconst leaseInitialValues = {\r\n  name: '',\r\n  description: '',\r\n  classification: 'operating',\r\n  prepaid: 'true',\r\n  interestRate: 0,\r\n  deferredRent: 0,\r\n  leaseIncentive: 0,\r\n  initialDirectCosts: 0,\r\n  useEconomicLife: 'false',\r\n  economicLife: 0\r\n};\r\n\r\nconst App = () => {\r\n  const [generatedLease, setGeneratedLease] = useState<GeneratedLease>({\r\n    lease: '',\r\n    description: '',\r\n    classification: '',\r\n    interestRate: 0,\r\n    totalPayments: 0,\r\n    quantityOfPayments: 0,\r\n    presentValue: 0,\r\n    prepaid: true,\r\n    startDate: '',\r\n    endDate: '',\r\n    payments: [],\r\n    asset: [],\r\n    liability: []\r\n  });\r\n  const [leaseInfo, setLeaseInfo] = useState([]);\r\n\r\n  const [values, handleChange] = useForm(leaseInitialValues);\r\n\r\n  const [payments, setPayments] = useState([\r\n    { startDate: '', endDate: '', frequency: 'monthly', amount: 0, min: '' }\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const leaseExcelData = createExcelData(generatedLease);\r\n\r\n    setLeaseInfo(leaseExcelData);\r\n  }, [generatedLease]);\r\n\r\n  useEffect(() => {}, [values]);\r\n\r\n  const onChangePayments = (updatedPayments: []): void => {\r\n    setPayments(updatedPayments);\r\n  };\r\n\r\n  const onClickAdd = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    e.preventDefault();\r\n    const arr = [...payments];\r\n    const priorEndDate = arr[arr.length - 1].endDate;\r\n    const newStartDate = getNextDay(priorEndDate);\r\n    arr.push({\r\n      startDate: newStartDate,\r\n      endDate: '',\r\n      frequency: 'monthly',\r\n      amount: 0,\r\n      min: newStartDate\r\n    });\r\n\r\n    setPayments(arr);\r\n  };\r\n\r\n  const onClickDelete = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    if (payments.length === 1) return;\r\n\r\n    const arr = [...payments];\r\n\r\n    arr.pop();\r\n\r\n    setPayments(arr);\r\n  };\r\n\r\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const genLease = createLease(payments, values);\r\n\r\n    setGeneratedLease(genLease.getAllLeaseInformation());\r\n  };\r\n\r\n  const inputObject = [\r\n    {\r\n      label: 'Name:',\r\n      type: InputTypes.Text,\r\n      name: 'name',\r\n      id: 'name',\r\n      value: values.name,\r\n      onChange: handleChange,\r\n      required: true\r\n    },\r\n    {\r\n      label: 'Description:',\r\n      type: InputTypes.Text,\r\n      name: 'description',\r\n      id: 'description',\r\n      value: values.description,\r\n      onChange: handleChange,\r\n      required: true\r\n    },\r\n    {\r\n      label: 'Classification:',\r\n      type: InputTypes.Select,\r\n      name: 'classification',\r\n      id: 'classification',\r\n      value: values.classification,\r\n      onChange: handleChange,\r\n      options: [\r\n        { text: 'Operating', value: 'operating' },\r\n        { text: 'Finance', value: 'finance' }\r\n      ]\r\n    },\r\n    {\r\n      label: 'Use Economic Life:',\r\n      type: InputTypes.Select,\r\n      name: 'useEconomicLife',\r\n      id: 'useEconomicLife',\r\n      value: values.useEconomicLife,\r\n      onChange: handleChange,\r\n      options: [\r\n        { text: 'Yes', value: 'true' },\r\n        { text: 'No', value: 'false' }\r\n      ],\r\n      show: values.classification === 'finance' ? true : false\r\n    },\r\n    {\r\n      label: 'Economic Life (years):',\r\n      type: InputTypes.Number,\r\n      name: 'economicLife',\r\n      id: 'economicLife',\r\n      value: values.economicLife,\r\n      onChange: handleChange,\r\n      show:\r\n        values.useEconomicLife === 'true' && values.classification === 'finance'\r\n          ? true\r\n          : false\r\n    },\r\n    {\r\n      label: 'Prepaid:',\r\n      type: InputTypes.Select,\r\n      name: 'prepaid',\r\n      id: 'prepaid',\r\n      value: values.prepaid,\r\n      onChange: handleChange,\r\n      options: [\r\n        { text: 'Yes', value: 'true' },\r\n        { text: 'No', value: 'false' }\r\n      ],\r\n      required: true\r\n    },\r\n\r\n    {\r\n      label: 'Interest Rate:',\r\n      type: InputTypes.Number,\r\n      name: 'interestRate',\r\n      id: 'interestRate',\r\n      value: values.interestRate,\r\n      onChange: handleChange,\r\n      required: true\r\n    },\r\n    {\r\n      label: 'Deferred Rent:',\r\n      type: InputTypes.Number,\r\n      name: 'deferredRent',\r\n      id: 'deferredRent',\r\n      value: values.deferredRent,\r\n      onChange: handleChange\r\n    },\r\n    {\r\n      label: 'Lease Incentive:',\r\n      type: InputTypes.Number,\r\n      name: 'leaseIncentive',\r\n      id: 'leaseIncentive',\r\n      value: values.leaseIncentive,\r\n      onChange: handleChange\r\n    },\r\n    {\r\n      label: 'Initial Direct Costs:',\r\n      type: InputTypes.Number,\r\n      name: 'initialDirectCosts',\r\n      id: 'initialDirectCosts',\r\n      value: values.initialDirectCosts,\r\n      onChange: handleChange\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <>\r\n        <FormStyled onSubmit={onSubmit}>\r\n          <h1>Create a Lease</h1>\r\n          {inputObject.map((input, index) => (\r\n            <div className=\"input-container\">\r\n              <Input key={`${input}-${index}`} config={input} />\r\n            </div>\r\n          ))}\r\n          <div className=\"payments-container\">\r\n            <Payments\r\n              onChange={onChangePayments}\r\n              onClickAdd={onClickAdd}\r\n              onClickDelete={onClickDelete}\r\n              paymentsArr={payments}\r\n            />\r\n          </div>\r\n          <button type=\"submit\">Create Lease</button>\r\n        </FormStyled>\r\n        {generatedLease.asset.length !== 0 ? (\r\n          <Download lease={leaseInfo} />\r\n        ) : null}\r\n      </>\r\n      <div className=\"schedule-container\">\r\n        <div>\r\n          {generatedLease.liability.length !== 0 ? (\r\n            <>\r\n              <h3>Liabilty Schedule</h3>\r\n              <DataTable data={generatedLease.liability} />\r\n            </>\r\n          ) : null}\r\n        </div>\r\n        <div>\r\n          {generatedLease.asset.length !== 0 ? (\r\n            <>\r\n              <h3>Asset Schedule</h3>\r\n              <DataTable data={generatedLease.asset} />\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export const roundNumber = (number: number, decimals: number): number => {\r\n  return Number(number.toFixed(decimals));\r\n};\r\n","export const addMonth = (date: Date, months: number): Date => {\r\n  const month = date.getMonth() + months - 1;\r\n  const year = date.getFullYear();\r\n\r\n  if (month === 11) {\r\n    return new Date(year + 1, 0, 1);\r\n  } else {\r\n    return new Date(year, month + 1, 1);\r\n  }\r\n};\r\n","import { PaymentFrequency } from '../enums';\r\nimport { addMonth } from './addMonth';\r\n/**\r\n *Calculates the next month and next payment depending on the payment frequency.\r\n */\r\nconst monthlyCalculation = (\r\n  y: number,\r\n  startDate: string,\r\n  payment: number,\r\n  frequency: PaymentFrequency\r\n): { nextMonth: Date; monthlyPayment: number } => {\r\n  let nextMonth = addMonth(new Date(startDate), y);\r\n  let monthlyPayment = payment;\r\n\r\n  if (y === 0) {\r\n    nextMonth = new Date(startDate);\r\n  } else if (frequency === PaymentFrequency.Annual) {\r\n    if (y % 12 !== 0) {\r\n      monthlyPayment = 0;\r\n    }\r\n  } else if (frequency === PaymentFrequency.SemiAnnual) {\r\n    if (y % 6 !== 0) {\r\n      monthlyPayment = 0;\r\n    }\r\n  } else if (frequency === PaymentFrequency.Quarterly) {\r\n    if (y % 3 !== 0) {\r\n      monthlyPayment = 0;\r\n    }\r\n  }\r\n\r\n  return { nextMonth, monthlyPayment };\r\n};\r\n\r\nexport default monthlyCalculation;\r\n","import { LiabilityMonthlyValues } from '../../interfaces';\r\n\r\nexport class LiabilityMonthly {\r\n  shortTermBalance?: number;\r\n  longTermBalance?: number;\r\n\r\n  constructor(\r\n    public date: Date,\r\n    public payment: number,\r\n    public principal: number,\r\n    public beginningBalance: number,\r\n    public interestRate: number,\r\n    public interestExpense: number,\r\n    public interestPayment: number,\r\n    public endingBalance: number,\r\n    public prepaid?: boolean\r\n  ) {\r\n    this.date = date;\r\n    this.beginningBalance = beginningBalance;\r\n    this.interestExpense = interestRate;\r\n    this.interestExpense = interestExpense;\r\n    this.payment = payment;\r\n    this.principal = principal;\r\n    this.endingBalance = endingBalance;\r\n    // this.date = date;\r\n    // this.beginningBalance = beginningBalance;\r\n    // this.interestRate = interestRate / 12;\r\n    // this.interestExpense = roundNumber(\r\n    //   this.beginningBalance * this.interestRate,\r\n    //   2\r\n    // );\r\n\r\n    // if (this.prepaid) {\r\n    //   // check if the month has a cash payment if it does not set the payment to 0\r\n    //   // else calculate the principal payment\r\n    //   if (payment === 0) {\r\n    //     this.principal = 0;\r\n    //     this.interestPayment = 0;\r\n    //   } else {\r\n    //     this.principal = payment - this.interestPayment;\r\n    //     this.interestPayment = interestPayment;\r\n    //   }\r\n\r\n    //   this.endingBalance = roundNumber(\r\n    //     this.beginningBalance +\r\n    //       this.interestExpense -\r\n    //       this.principal -\r\n    //       this.interestPayment,\r\n    //     2\r\n    //   );\r\n    // } else {\r\n    //   if (payment === 0) {\r\n    //     this.principal = 0;\r\n    //   } else {\r\n    //     this.principal = payment - this.interestExpense;\r\n    //   }\r\n    //   this.endingBalance = roundNumber(\r\n    //     this.beginningBalance - this.principal,\r\n    //     2\r\n    //   );\r\n    // }\r\n  }\r\n\r\n  getMonthlyData(): LiabilityMonthlyValues {\r\n    return {\r\n      date: this.date,\r\n      beginningBalance: this.beginningBalance,\r\n      payment: this.payment,\r\n      interestExpense: this.interestExpense,\r\n      interestPayment: this.interestPayment,\r\n      principal: this.principal,\r\n      endingBalance: this.endingBalance,\r\n      shortTermBalance: this.shortTermBalance,\r\n      longTermBalance: this.longTermBalance\r\n    };\r\n  }\r\n}\r\n","import { roundNumber } from '.';\r\nimport { LiabilityMonthly } from '../classes/Liability/LiabilityMonthly';\r\nimport { PaymentStream } from '../interfaces';\r\n/**\r\n *Calculates liability monthly schedule.\r\n */\r\nconst generateLiability = (\r\n  paymentStream: PaymentStream[],\r\n  startingBalance: number,\r\n  interestRate: number,\r\n  prepaid: boolean\r\n) => {\r\n  let result = [];\r\n  const payments = [...paymentStream];\r\n\r\n  for (let i = 0; i < payments.length; i++) {\r\n    const date = new Date(payments[i].month);\r\n    const { payment } = payments[i];\r\n\r\n    // const annlPayments = annualPayments(frequency);\r\n    const correctedInterestRate = interestRate / 12;\r\n\r\n    result.push(\r\n      calculateLiability(\r\n        startingBalance,\r\n        payment,\r\n        correctedInterestRate,\r\n        date,\r\n        prepaid,\r\n        i,\r\n        payments.length,\r\n        result\r\n      )\r\n    );\r\n  }\r\n\r\n  result = calculateSTLTBalances(result);\r\n\r\n  return result;\r\n};\r\n\r\nconst calculateLiability = (\r\n  startingBalance: number,\r\n  payment: number,\r\n  interestRate: number,\r\n  date: Date,\r\n  prepaid: boolean,\r\n  index: number,\r\n  paymentsLength: number,\r\n  schedule: any[]\r\n) => {\r\n  if (index === 0) {\r\n    const principal = payment;\r\n    const interestPayment = 0;\r\n\r\n    if (prepaid) {\r\n      const interestExpense = (startingBalance - payment) * interestRate;\r\n      const endingBalance = endBalance(\r\n        startingBalance,\r\n        interestExpense,\r\n        principal,\r\n        interestPayment\r\n      );\r\n\r\n      const month = new LiabilityMonthly(\r\n        date,\r\n        payment,\r\n        roundNumber(principal, 2),\r\n        roundNumber(startingBalance, 2),\r\n        interestPayment,\r\n        roundNumber(interestExpense, 2),\r\n        roundNumber(interestPayment, 2),\r\n        roundNumber(endingBalance, 2),\r\n        prepaid\r\n      );\r\n\r\n      return month;\r\n    } else {\r\n      const interestExpense = startingBalance * interestRate;\r\n      const endingBalance = endBalance(\r\n        startingBalance,\r\n        interestExpense,\r\n        principal,\r\n        interestPayment\r\n      );\r\n\r\n      const month = new LiabilityMonthly(\r\n        date,\r\n        payment,\r\n        roundNumber(principal, 2),\r\n        roundNumber(startingBalance, 2),\r\n        interestPayment,\r\n        roundNumber(interestExpense, 2),\r\n        roundNumber(interestPayment, 2),\r\n        roundNumber(endingBalance, 2),\r\n        prepaid\r\n      );\r\n\r\n      return month;\r\n    }\r\n  } else {\r\n    const { interestExpense, endingBalance } = schedule[\r\n      index - 1\r\n    ].getMonthlyData();\r\n\r\n    if (prepaid) {\r\n      let currentMonthInterestExpense =\r\n        (endingBalance - payment) * interestRate;\r\n\r\n      const principal = payment - interestExpense;\r\n\r\n      const interestPayment = interestExpense;\r\n\r\n      if (index === paymentsLength - 1) {\r\n        currentMonthInterestExpense = 0;\r\n      }\r\n\r\n      const currentMonthEndingBalance = endBalance(\r\n        endingBalance,\r\n        currentMonthInterestExpense,\r\n        principal,\r\n        interestPayment\r\n      );\r\n\r\n      const month = new LiabilityMonthly(\r\n        date,\r\n        payment,\r\n        roundNumber(principal, 2),\r\n        roundNumber(endingBalance, 2),\r\n        0,\r\n        roundNumber(currentMonthInterestExpense, 2),\r\n        roundNumber(interestPayment, 2),\r\n        roundNumber(currentMonthEndingBalance, 2),\r\n        prepaid\r\n      );\r\n\r\n      return month;\r\n    } else {\r\n      const currentMonthInterestExpense = endingBalance * interestRate;\r\n\r\n      const principal = payment;\r\n\r\n      const interestPayment = 0;\r\n\r\n      const currentMonthEndingBalance =\r\n        endingBalance +\r\n        currentMonthInterestExpense -\r\n        principal -\r\n        interestPayment;\r\n\r\n      const month = new LiabilityMonthly(\r\n        date,\r\n        payment,\r\n        roundNumber(principal, 2),\r\n        roundNumber(endingBalance, 2),\r\n        0,\r\n        roundNumber(currentMonthInterestExpense, 2),\r\n        roundNumber(interestPayment, 2),\r\n        roundNumber(currentMonthEndingBalance, 2),\r\n        prepaid\r\n      );\r\n\r\n      return month;\r\n    }\r\n  }\r\n};\r\n\r\nconst endBalance = (\r\n  beginningBalance: number,\r\n  interestExpense: number,\r\n  principal: number,\r\n  interestPayment: number\r\n): number => beginningBalance + interestExpense - principal - interestPayment;\r\n\r\n/**\r\n * Calculates the number of payments per year based off of payment frequency\r\n * @param frequency\r\n * @returns\r\n */\r\n// const annualPayments = (frequency) => {\r\n//   if (frequency === PaymentFrequency.Monthly) {\r\n//     return 12;\r\n//   } else if (frequency === PaymentFrequency.Quarterly) {\r\n//     return 4;\r\n//   } else if (frequency === PaymentFrequency.SemiAnnual) {\r\n//     return 2;\r\n//   } else if (frequency === PaymentFrequency.Annual) {\r\n//     return 1;\r\n//   }\r\n// };\r\n\r\n/**\r\n * Calculates the ST and LT balances for the liability schedule\r\n * @param liabilitySchedule\r\n * @returns\r\n */\r\nconst calculateSTLTBalances = (liabilitySchedule) => {\r\n  let result = [...liabilitySchedule];\r\n  let stBalance = 0;\r\n  let ltBalance = 0;\r\n\r\n  result.sort(\r\n    (a, b) => new Date(a.date).valueOf() - new Date(b.date).valueOf()\r\n  );\r\n\r\n  for (let i = 0; i < result.length; i++) {\r\n    if (i < result.length - 12) {\r\n      for (let y = 0; y < 12; y++) {\r\n        stBalance += result[y + i].principal;\r\n      }\r\n      ltBalance = result[i].endingBalance - stBalance;\r\n      result[i].shortTermBalance = roundNumber(stBalance, 2);\r\n      result[i].longTermBalance = roundNumber(ltBalance, 2);\r\n    } else {\r\n      result[i].shortTermBalance = roundNumber(result[i].endingBalance, 2);\r\n      result[i].longTermBalance = 0;\r\n    }\r\n\r\n    stBalance = 0;\r\n    ltBalance = 0;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default generateLiability;\r\n","import { roundNumber } from '../../utils/index';\r\n\r\nexport class AssetMonthly {\r\n  public endingBalance: number;\r\n\r\n  constructor(\r\n    public date: Date,\r\n    public beginningBalance: number,\r\n    public depreciation: number\r\n  ) {\r\n    this.beginningBalance = beginningBalance;\r\n    this.depreciation = depreciation;\r\n\r\n    const endBalance = this.beginningBalance - this.depreciation;\r\n    this.endingBalance = roundNumber(endBalance, 2);\r\n\r\n    this.date = date;\r\n  }\r\n\r\n  getMonthlyData() {\r\n    return {\r\n      date: this.date,\r\n      beginningBalance: this.beginningBalance,\r\n      depreciation: this.depreciation,\r\n      endingBalance: this.endingBalance\r\n    };\r\n  }\r\n}\r\n","import { AssetMonthly } from '../classes/Asset/AssetMonthly';\r\nimport { LeaseClassification } from '../enums';\r\nimport { AssetCalculationObject } from '../interfaces';\r\nimport { addMonth } from './addMonth';\r\n\r\nconst calculateAssetSchedule = (\r\n  data: AssetCalculationObject,\r\n  straightLineRent?\r\n) => {\r\n  const {\r\n    startDate,\r\n    life,\r\n    startingBalance,\r\n    monthlyDepreciation,\r\n    liabilitySchedule,\r\n    classification\r\n  } = data;\r\n\r\n  let result = [];\r\n\r\n  for (let i = 0; i < life; i++) {\r\n    let depreciation = monthlyDepreciation;\r\n\r\n    if (i === 0) {\r\n      if (classification === LeaseClassification.OPERATING) {\r\n        depreciation = straightLineRent - liabilitySchedule[i].interestExpense;\r\n      }\r\n      const month = new AssetMonthly(startDate, startingBalance, depreciation);\r\n\r\n      result.push(month);\r\n    } else {\r\n      const { endingBalance } = result[i - 1].getMonthlyData();\r\n      if (classification === LeaseClassification.OPERATING) {\r\n        depreciation = straightLineRent - liabilitySchedule[i].interestExpense;\r\n      }\r\n\r\n      const nextMonth = addMonth(startDate, i);\r\n      const month = new AssetMonthly(nextMonth, endingBalance, depreciation);\r\n\r\n      result.push(month);\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default calculateAssetSchedule;\r\n","import { AssetSchedulePrint } from '../../interfaces';\r\nimport { roundNumber } from '../../utils';\r\nimport { AssetMonthly } from './AssetMonthly';\r\n\r\nexport class AssetBase {\r\n  startDate!: Date;\r\n  monthlyDepreciation!: number;\r\n  monthlyTransactions!: AssetMonthly[];\r\n  startingBalance!: number;\r\n  life!: number;\r\n\r\n  setProperties(startDate: string, startingBalance: number, life: number) {\r\n    this.startDate = new Date(startDate);\r\n    this.startingBalance = roundNumber(startingBalance, 2);\r\n    this.life = life;\r\n  }\r\n\r\n  setPropertiesFromJSON(schedule: any) {\r\n    const { date, beginningBalance } = schedule[0];\r\n    const life = schedule.length;\r\n    this.setProperties(date, beginningBalance, life);\r\n\r\n    this.setMonthlyTransactionsFromJSON(schedule);\r\n  }\r\n\r\n  getStartingBalance(): number {\r\n    return this.startingBalance;\r\n  }\r\n\r\n  getLife(): number {\r\n    return this.life;\r\n  }\r\n\r\n  getMonthlyTransactions(): AssetMonthly[] {\r\n    return this.monthlyTransactions;\r\n  }\r\n\r\n  getAssetData(): AssetSchedulePrint[] {\r\n    const schedule = this.monthlyTransactions.map((month) => {\r\n      const {\r\n        date,\r\n        beginningBalance,\r\n        depreciation,\r\n        endingBalance\r\n      } = month.getMonthlyData();\r\n\r\n      // check if the ending balance is less than 1\r\n      // if so add it to the depreciation amount to account for rounding\r\n      // set ending balance to 0\r\n      if (endingBalance < 1) {\r\n        return {\r\n          date: date.toLocaleDateString(),\r\n          beginningBalance,\r\n          depreciation: roundNumber(endingBalance + depreciation, 2),\r\n          endingBalance: endingBalance - endingBalance\r\n        };\r\n      } else {\r\n        return {\r\n          date: date.toLocaleDateString(),\r\n          beginningBalance,\r\n          depreciation,\r\n          endingBalance\r\n        };\r\n      }\r\n    });\r\n\r\n    return schedule;\r\n  }\r\n\r\n  setMonthlyDepreciation(depreciation: number): void {\r\n    this.monthlyDepreciation = roundNumber(depreciation, 2);\r\n  }\r\n\r\n  setMonthlyTransactions(callback: Function): void {\r\n    this.monthlyTransactions = callback(\r\n      this.startDate,\r\n      this.life,\r\n      this.startingBalance,\r\n      this.monthlyDepreciation\r\n    );\r\n  }\r\n\r\n  setMonthlyTransactionsFromJSON(data: any): void {\r\n    this.monthlyTransactions = data.map(\r\n      (month) =>\r\n        new AssetMonthly(\r\n          new Date(month.date),\r\n          month.beginningBalance,\r\n          month.depreciation\r\n        )\r\n    );\r\n  }\r\n}\r\n","import { AssetMonthly } from './AssetMonthly';\r\nimport { calculateAssetSchedule } from '../../utils/index';\r\nimport { AssetBase } from './AssetBase';\r\nimport { LeaseClassification } from '../../enums';\r\n\r\nexport class AssetFinance extends AssetBase {\r\n  setPropertiesFinance(\r\n    startDate: string,\r\n    startingBalance: number,\r\n    life: number,\r\n    useEconomicLife: boolean,\r\n    economicLife?: number\r\n  ): void {\r\n    if (useEconomicLife) {\r\n      // economic life is corrected to months\r\n      const calculatedLife = economicLife * 12;\r\n      this.setProperties(startDate, startingBalance, calculatedLife);\r\n      this.calculateDepreciationWithEconomicLife(calculatedLife);\r\n    } else {\r\n      this.setProperties(startDate, startingBalance, life);\r\n      this.calculateDepreciation();\r\n    }\r\n\r\n    this.setMonthlyTransactions(this.calculateMonthlySchedule);\r\n  }\r\n\r\n  calculateDepreciationWithEconomicLife(economicLife): void {\r\n    const depreciation = this.getStartingBalance() / economicLife;\r\n\r\n    this.setMonthlyDepreciation(depreciation);\r\n  }\r\n\r\n  calculateDepreciation(): void {\r\n    const depreciation = this.getStartingBalance() / this.getLife();\r\n\r\n    this.setMonthlyDepreciation(depreciation);\r\n  }\r\n\r\n  calculateMonthlySchedule(\r\n    startDate: Date,\r\n    life: number,\r\n    startingBalance: number,\r\n    monthlyDepreciation: number\r\n  ): AssetMonthly[] {\r\n    const assetData = {\r\n      startDate,\r\n      life,\r\n      startingBalance,\r\n      monthlyDepreciation,\r\n      classification: LeaseClassification.FINANCE\r\n    };\r\n\r\n    const assetSchedule = calculateAssetSchedule(assetData);\r\n\r\n    return assetSchedule;\r\n  }\r\n}\r\n","import { LeaseClassification } from '../../enums';\r\nimport { LiabilitySchedule } from '../../interfaces';\r\nimport { calculateAssetSchedule } from '../../utils';\r\nimport { AssetBase } from './AssetBase';\r\n\r\nexport class AssetOperating extends AssetBase {\r\n  private straightLineRent: number;\r\n\r\n  setPropertiesOperating(\r\n    startDate: string,\r\n    startingBalance: number,\r\n    deferredRent: number,\r\n    leaseIncentive: number,\r\n    initialDirectCosts: number,\r\n    life: number,\r\n    liabilitySchedule: LiabilitySchedule[]\r\n  ): void {\r\n    // beginning balance is equal to PV less deferred rent less lease incentives plus initial direct costs\r\n    const beginningBalance =\r\n      startingBalance - deferredRent - leaseIncentive + initialDirectCosts;\r\n\r\n    this.setProperties(startDate, beginningBalance, life);\r\n    this.setMonthlyTransactions(\r\n      this.calculateMonthlySchedule(\r\n        liabilitySchedule,\r\n        leaseIncentive,\r\n        deferredRent,\r\n        initialDirectCosts\r\n      )\r\n    );\r\n  }\r\n\r\n  calculateMonthlySchedule(\r\n    liabilitySchedule: LiabilitySchedule[],\r\n    leaseIncentive: number,\r\n    deferredRent: number,\r\n    initialDirectCosts: number\r\n  ) {\r\n    const totalPayments = liabilitySchedule.reduce(\r\n      (accumulator, currentValue) => accumulator + currentValue.payment,\r\n      0\r\n    );\r\n\r\n    return (startDate: Date, life: number, startingBalance: number) => {\r\n      this.straightLineRent =\r\n        (totalPayments - leaseIncentive - deferredRent + initialDirectCosts) /\r\n        life;\r\n\r\n      const assetData = {\r\n        startDate,\r\n        life,\r\n        startingBalance,\r\n        liabilitySchedule,\r\n        totalPayments,\r\n        classification: LeaseClassification.OPERATING\r\n      };\r\n\r\n      const assetSchedule = calculateAssetSchedule(\r\n        assetData,\r\n        this.straightLineRent\r\n      );\r\n\r\n      return assetSchedule;\r\n    };\r\n  }\r\n}\r\n","import { LiabilitySchedulePrint } from '../../interfaces';\r\nimport { PaymentStream } from '../../interfaces';\r\nimport { generateLiability } from '../../utils';\r\nimport { LiabilityMonthly } from './LiabilityMonthly';\r\nimport { LiabilityValues } from '../../interfaces/LiabilityValues';\r\nimport { LeaseClassification } from '../../enums/LeaseClassification';\r\n\r\nexport class Liability implements LiabilityValues {\r\n  startDate: Date;\r\n  monthlyTransactions: LiabilityMonthly[];\r\n  payment: number;\r\n  paymentStream: PaymentStream[];\r\n  interestRate: number;\r\n  startingBalance: number;\r\n  life: number;\r\n  prepaid: boolean;\r\n\r\n  setProperties(\r\n    startDate: string,\r\n    payment: number,\r\n    paymentStream: PaymentStream[],\r\n    interestRate: number,\r\n    startingBalance: number,\r\n    life: number,\r\n    prepaid: boolean,\r\n    classification: string\r\n  ) {\r\n    if (classification === LeaseClassification.OPERATING) {\r\n      this.startingBalance = startingBalance;\r\n    } else {\r\n      this.startingBalance = startingBalance;\r\n    }\r\n\r\n    this.startDate = new Date(startDate);\r\n    this.paymentStream = paymentStream;\r\n    this.payment = payment;\r\n    this.interestRate = interestRate;\r\n    this.life = life;\r\n    this.prepaid = prepaid;\r\n\r\n    this.monthlyTransactions = this.calculateMonthlySchedule();\r\n  }\r\n\r\n  setPropertiesJSON(data, paymentStream, interestRate, life, prepaid) {\r\n    // const { date, beginningBalance, payment } = data[0];\r\n    // this.startingBalance = beginningBalance;\r\n    // this.startDate = new Date(date);\r\n    // this.paymentStream = paymentStream;\r\n    // this.payment = payment;\r\n    // this.interestRate = interestRate;\r\n    // this.life = life;\r\n    // this.prepaid = prepaid;\r\n    // const liabilityMonthly = data.map((month) => {\r\n    //   const monthLblity = new LiabilityMonthly(\r\n    //     new Date(month.date),\r\n    //     month.payment,\r\n    //     month.beginningBalance,\r\n    //     this.interestRate,\r\n    //     month.interestPayment,\r\n    //     this.prepaid\r\n    //   );\r\n    //   monthLblity.shortTermBalance = month.shortTermBalance;\r\n    //   monthLblity.longTermBalance = month.longTermBalance;\r\n    //   return monthLblity;\r\n    // });\r\n    // this.monthlyTransactions = liabilityMonthly;\r\n  }\r\n\r\n  calculateMonthlySchedule(): LiabilityMonthly[] {\r\n    const monthlySchedule = generateLiability(\r\n      this.paymentStream,\r\n      this.startingBalance,\r\n      this.interestRate,\r\n      this.prepaid\r\n    );\r\n\r\n    return monthlySchedule;\r\n  }\r\n\r\n  getLiabilityData(): LiabilitySchedulePrint[] {\r\n    const schedule = this.monthlyTransactions.map((month) => {\r\n      const {\r\n        date,\r\n        beginningBalance,\r\n        payment,\r\n        interestExpense,\r\n        interestPayment,\r\n        principal,\r\n        endingBalance,\r\n        shortTermBalance,\r\n        longTermBalance\r\n      } = month.getMonthlyData();\r\n\r\n      return {\r\n        date: date.toLocaleDateString(),\r\n        beginningBalance,\r\n        payment,\r\n        interestExpense,\r\n        interestPayment,\r\n        principal,\r\n        endingBalance,\r\n        shortTermBalance,\r\n        longTermBalance\r\n      };\r\n    });\r\n\r\n    return schedule;\r\n  }\r\n}\r\n","import { PaymentFrequency } from '../../enums';\r\nimport { PaymentValues } from '../../interfaces';\r\n// payment class\r\nexport class Payment {\r\n  private payment: number;\r\n  private frequency: PaymentFrequency;\r\n  private startDate: Date;\r\n  private endDate: Date;\r\n  private payments: number;\r\n\r\n  constructor(config: PaymentValues) {\r\n    const { payment, frequency, startDate, endDate } = config;\r\n\r\n    this.payment = payment;\r\n    this.frequency = frequency;\r\n    this.startDate = new Date(startDate);\r\n    this.endDate = new Date(endDate);\r\n\r\n    // calculate the number of months between the start date and end date\r\n    let years = this.endDate.getFullYear() - this.startDate.getFullYear();\r\n    let months =\r\n      years * 12 + (this.endDate.getMonth() - this.startDate.getMonth()) + 1;\r\n\r\n    if (months <= 0) {\r\n      this.payments = 0;\r\n    } else {\r\n      this.payments = months;\r\n    }\r\n  }\r\n\r\n  getPaymentInformation() {\r\n    return {\r\n      payment: this.payment,\r\n      frequency: this.frequency,\r\n      startDate: this.startDate.toLocaleDateString(),\r\n      endDate: this.endDate.toLocaleDateString(),\r\n      payments: this.payments\r\n    };\r\n  }\r\n\r\n  sumPayments(): number {\r\n    return this.payment * this.payments;\r\n  }\r\n\r\n  getPayments() {\r\n    return this.payments;\r\n  }\r\n}\r\n","import { PaymentStream } from '../../interfaces';\r\nimport { monthlyCalculation } from '../../utils';\r\nimport { Payment } from './Payment';\r\nimport { PaymentInformation } from '../../interfaces/PaymentInformation';\r\n\r\nexport class Payments {\r\n  payments: Payment[];\r\n  constructor(payments: Payment[]) {\r\n    this.payments = payments;\r\n  }\r\n\r\n  sumAllPayments(): number {\r\n    let result = 0;\r\n    this.payments.forEach((payment) => {\r\n      result += payment.sumPayments();\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  paymentInformation(): PaymentInformation[] {\r\n    return this.payments.map((payment) => payment.getPaymentInformation());\r\n  }\r\n\r\n  quantityOfPayments(): number {\r\n    return this.payments.reduce((a, b) => a + b.getPayments(), 0);\r\n  }\r\n\r\n  paymentStream(): PaymentStream[] {\r\n    let arr = [];\r\n    // loop through all payment streams\r\n    for (let i = 0; i < this.payments.length; i++) {\r\n      const { startDate } = this.payments[i].getPaymentInformation();\r\n      const streamLength = this.payments[i].getPaymentInformation().payments;\r\n\r\n      // loop through payments to create an array of payments with dates to pass to the liability\r\n      for (let y = 0; y < streamLength; y++) {\r\n        const { payment, frequency } = this.payments[i].getPaymentInformation();\r\n        const { nextMonth, monthlyPayment } = monthlyCalculation(\r\n          y,\r\n          startDate,\r\n          payment,\r\n          frequency\r\n        );\r\n\r\n        arr.push({\r\n          month: nextMonth,\r\n          payment: monthlyPayment,\r\n          frequency: frequency\r\n        });\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  }\r\n}\r\n","import { LeaseClassification } from '../enums';\r\nimport { AssetFinance } from './Asset/AssetFinance';\r\nimport { AssetOperating } from './Asset/AssetOperating';\r\nimport { Liability } from './Liability/Liability';\r\nimport { Payment } from './Payments/Payment';\r\nimport { LeaseValues } from '../interfaces/LeaseValues';\r\nimport { PaymentFrequency } from '../enums';\r\nimport { Payments } from './Payments/Payments';\r\nimport { AssetSchedulePrint } from '../interfaces/AssetSchedulePrint';\r\nimport { LiabilitySchedulePrint } from '../interfaces/LiabilitySchedulePrint';\r\nimport { PaymentInformation } from '../interfaces/PaymentInformation';\r\nimport { PaymentStream } from '../interfaces/PaymentStream';\r\n\r\ninterface LeaseInformation {\r\n  lease: string;\r\n  prepaid: boolean;\r\n  description: string;\r\n  classification: string;\r\n  interestRate: number;\r\n  totalPayments: number;\r\n  quantityOfPayments: number;\r\n  presentValue: number;\r\n  startDate: string;\r\n  endDate: string;\r\n}\r\n\r\ninterface AllLeaseInformation {\r\n  lease: string;\r\n  prepaid: boolean;\r\n  description: string;\r\n  classification: string;\r\n  interestRate: number;\r\n  totalPayments: number;\r\n  quantityOfPayments: number;\r\n  presentValue: number;\r\n  startDate: string;\r\n  endDate: string;\r\n  payments: any[];\r\n  asset: AssetSchedulePrint[];\r\n  liability: LiabilitySchedulePrint[];\r\n}\r\n\r\ninterface PropertiesJSON {\r\n  lease: string;\r\n  prepaid: boolean;\r\n  description: string;\r\n  classification: string;\r\n  interestRate: number;\r\n  presentValue: number;\r\n  startDate: string;\r\n  endDate: string;\r\n  payments: {\r\n    payment: number;\r\n    frequency: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    payments: number;\r\n  }[];\r\n  asset: {}[];\r\n  liability: any[];\r\n}\r\n\r\n// parent class\r\nexport class Lease implements LeaseValues {\r\n  name: string;\r\n  description: string;\r\n  classification!: LeaseClassification;\r\n  interestRate: number;\r\n  payments!: Payments;\r\n  prepaid: boolean;\r\n  liability?: any;\r\n  asset?: any;\r\n  totalPayments: number;\r\n  paymentStream!: PaymentStream[];\r\n  quantityOfPayments: number;\r\n  presentValue: number;\r\n  startDate: string;\r\n  endDate: string;\r\n  deferredRent: number;\r\n  leaseIncentive: number;\r\n  initialDirectCosts: number;\r\n  useEconomicLife: boolean;\r\n  economicLife: number;\r\n\r\n  constructor() {\r\n    this.name = '';\r\n    this.description = '';\r\n    this.totalPayments = 0;\r\n    this.quantityOfPayments = 0;\r\n    this.presentValue = 0;\r\n    this.startDate = '';\r\n    this.endDate = '';\r\n    this.interestRate = 0;\r\n    this.prepaid = false;\r\n  }\r\n\r\n  setProperties(\r\n    name: string,\r\n    description: string,\r\n    classification: LeaseClassification,\r\n    interestRate: number,\r\n    payments: Payments,\r\n    prepaid: boolean,\r\n    deferredRent?: number,\r\n    leaseIncentive?: number,\r\n    initialDirectCosts?: number,\r\n    useEconomicLife?: boolean,\r\n    economicLife?: number\r\n  ): void {\r\n    this.name = name;\r\n    this.description = description;\r\n    this.classification = classification;\r\n    this.payments = payments;\r\n    this.totalPayments = this.getSumOfPayments();\r\n    this.interestRate = interestRate / 100;\r\n    this.prepaid = prepaid;\r\n    this.quantityOfPayments = this.getQuantityOfPayments();\r\n    this.deferredRent = deferredRent;\r\n    this.leaseIncentive = leaseIncentive;\r\n    this.initialDirectCosts = initialDirectCosts;\r\n    this.useEconomicLife = useEconomicLife;\r\n    this.economicLife = economicLife;\r\n\r\n    // create and sort the payments array to get the start and end dates of the lease\r\n    const paymentsArray = this.payments\r\n      .paymentInformation()\r\n      .sort(\r\n        (a, b) =>\r\n          new Date(a.startDate).valueOf() - new Date(b.startDate).valueOf()\r\n      );\r\n\r\n    this.startDate = paymentsArray[0].startDate;\r\n    this.endDate = paymentsArray[paymentsArray.length - 1].endDate;\r\n    this.paymentStream = this.getPaymentStream();\r\n\r\n    this.presentValue = this.calculatePresentValue();\r\n\r\n    // Liability is calculated first because it is needed to calculate the\r\n    // operating lease asset schedule\r\n    this.liability = new Liability();\r\n\r\n    this.liability.setProperties(\r\n      this.startDate,\r\n      this.getSumOfPayments(),\r\n      this.paymentStream,\r\n      this.interestRate,\r\n      this.presentValue,\r\n      this.quantityOfPayments,\r\n      this.prepaid,\r\n      this.classification\r\n    );\r\n\r\n    const liabilityBalance = this.liability.getLiabilityData()[0]\r\n      .beginningBalance;\r\n\r\n    // create and calculate a new asset based off of classification\r\n    if (this.classification === LeaseClassification.FINANCE) {\r\n      this.asset = new AssetFinance();\r\n\r\n      this.asset.setPropertiesFinance(\r\n        this.startDate,\r\n        liabilityBalance,\r\n        this.paymentStream.length,\r\n        this.useEconomicLife,\r\n        this.economicLife\r\n      );\r\n    } else if (this.classification === LeaseClassification.OPERATING) {\r\n      this.asset = new AssetOperating();\r\n\r\n      this.asset.setPropertiesOperating(\r\n        this.startDate,\r\n        liabilityBalance,\r\n        this.deferredRent,\r\n        this.leaseIncentive,\r\n        this.initialDirectCosts,\r\n        this.paymentStream.length,\r\n        this.getLiabilitySchedule()\r\n      );\r\n    } else {\r\n      throw new Error(\r\n        'Lease must be classified as either an operating or finance'\r\n      );\r\n    }\r\n  }\r\n\r\n  setPropertiesFromJSON(data: PropertiesJSON): void {\r\n    const {\r\n      lease,\r\n      prepaid,\r\n      description,\r\n      classification,\r\n      interestRate,\r\n      payments,\r\n      asset,\r\n      liability\r\n    } = data;\r\n\r\n    const leaseClassification =\r\n      classification === 'operating'\r\n        ? LeaseClassification.OPERATING\r\n        : LeaseClassification.FINANCE;\r\n\r\n    const paymentArray = payments.map((el) => {\r\n      let frequency;\r\n      if (el.frequency === 'annual') {\r\n        frequency = PaymentFrequency.Annual;\r\n      } else if (el.frequency === 'semiannual') {\r\n        frequency = PaymentFrequency.SemiAnnual;\r\n      } else if (el.frequency === 'quarterly') {\r\n        frequency = PaymentFrequency.Quarterly;\r\n      } else {\r\n        frequency = PaymentFrequency.Monthly;\r\n      }\r\n      return new Payment({\r\n        payment: el.payment,\r\n        frequency: frequency,\r\n        startDate: new Date(el.startDate).toLocaleDateString(),\r\n        endDate: new Date(el.endDate).toLocaleDateString()\r\n      });\r\n    });\r\n\r\n    const paymentObjects = new Payments(paymentArray);\r\n\r\n    this.name = lease;\r\n    this.description = description;\r\n    this.classification = leaseClassification;\r\n    this.interestRate = interestRate;\r\n    this.payments = paymentObjects;\r\n    this.prepaid = prepaid;\r\n    this.totalPayments = this.getSumOfPayments();\r\n    this.quantityOfPayments = this.getQuantityOfPayments();\r\n\r\n    const paymentsArray = this.payments\r\n      .paymentInformation()\r\n      .sort(\r\n        (a, b) =>\r\n          new Date(a.startDate).valueOf() - new Date(b.startDate).valueOf()\r\n      );\r\n\r\n    this.startDate = paymentsArray[0].startDate;\r\n    this.endDate = paymentsArray[paymentsArray.length - 1].endDate;\r\n    this.paymentStream = this.getPaymentStream();\r\n\r\n    this.liability = new Liability();\r\n    this.liability.setPropertiesJSON(\r\n      liability,\r\n      this.paymentStream,\r\n      this.interestRate,\r\n      liability.length,\r\n      this.prepaid\r\n    );\r\n\r\n    // create and calculate a new asset based off of classification\r\n    if (this.classification === LeaseClassification.FINANCE) {\r\n      this.asset = new AssetFinance();\r\n      this.asset.setPropertiesFromJSON(asset);\r\n    } else if (this.classification === LeaseClassification.OPERATING) {\r\n      this.asset = new AssetOperating();\r\n      this.asset.setPropertiesFromJSON(asset);\r\n    } else {\r\n      throw new Error(\r\n        'Lease must be classified as either an operating or finance'\r\n      );\r\n    }\r\n\r\n    this.presentValue = this.liability.getLiabilityData()[0].beginningBalance;\r\n  }\r\n\r\n  /**\r\n   * gets an array of payments\r\n   */\r\n  getPayments(): PaymentInformation[] {\r\n    return this.payments.paymentInformation();\r\n  }\r\n  /**\r\n   * gets the lease data\r\n   */\r\n  getLeaseInformation(): LeaseInformation {\r\n    return {\r\n      lease: this.name,\r\n      prepaid: this.prepaid,\r\n      description: this.description,\r\n      classification: this.classification,\r\n      interestRate: this.interestRate,\r\n      totalPayments: this.totalPayments,\r\n      quantityOfPayments: this.quantityOfPayments,\r\n      presentValue: this.presentValue,\r\n      startDate: this.startDate,\r\n      endDate: this.endDate\r\n    };\r\n  }\r\n\r\n  /**\r\n   * gets all of the lease data\r\n   */\r\n  getAllLeaseInformation(): AllLeaseInformation {\r\n    return {\r\n      lease: this.name,\r\n      prepaid: this.prepaid,\r\n      description: this.description,\r\n      classification: this.classification,\r\n      interestRate: this.interestRate,\r\n      totalPayments: this.totalPayments,\r\n      quantityOfPayments: this.quantityOfPayments,\r\n      presentValue: this.presentValue,\r\n      startDate: this.startDate,\r\n      endDate: this.endDate,\r\n      payments: this.getPayments(),\r\n      asset: this.getAssetSchedule(),\r\n      liability: this.getLiabilitySchedule()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves the current month asset and liability schedules by providing the month requested as a string\r\n   * @param month\r\n   */\r\n  getCurrentMonth(\r\n    month: string\r\n  ): { lease: string; schedules: { asset; liability } } {\r\n    const asset = this.getAssetSchedule().filter(\r\n      (el) => new Date(month).valueOf() === new Date(el.date).valueOf()\r\n    );\r\n\r\n    const liability = this.getLiabilitySchedule().filter(\r\n      (el) => new Date(month).valueOf() === new Date(el.date).valueOf()\r\n    );\r\n\r\n    return {\r\n      lease: this.name,\r\n      schedules: {\r\n        asset,\r\n        liability\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * gets the total payments\r\n   */\r\n  getSumOfPayments(): number {\r\n    return this.payments.sumAllPayments();\r\n  }\r\n\r\n  /**\r\n   * gets the quantitiy of payments\r\n   */\r\n  getQuantityOfPayments(): number {\r\n    return this.payments.quantityOfPayments();\r\n  }\r\n  /**\r\n   * gets all of the payments as an array\r\n   */\r\n  getPaymentStream(): PaymentStream[] {\r\n    return this.payments.paymentStream();\r\n  }\r\n  /**\r\n   * gets the asset schedule as an array\r\n   */\r\n  getAssetSchedule(): AssetSchedulePrint[] {\r\n    return this.asset.getAssetData();\r\n  }\r\n  /**\r\n   * gets the liability schedule as an array\r\n   */\r\n  getLiabilitySchedule(): LiabilitySchedulePrint[] {\r\n    return this.liability.getLiabilityData();\r\n  }\r\n  /**\r\n   * Private function that calculates the present value of all payments\r\n   */\r\n  private calculatePresentValue(): number {\r\n    const paymentStream = this.paymentStream.map((month) => {\r\n      return { payment: month.payment, frequency: month.frequency };\r\n    });\r\n\r\n    const correctedPaymentStream = this.correctPaymentStreamForPVCalc(\r\n      paymentStream\r\n    );\r\n\r\n    const reducerFunction = this.calcPresentValue(\r\n      this.interestRate,\r\n      this.prepaid\r\n    );\r\n\r\n    return correctedPaymentStream.reduce(reducerFunction, 0);\r\n  }\r\n\r\n  private presentValueInterestRate(interestRate, frequency) {\r\n    let rateOfReturn = interestRate;\r\n    if (frequency === PaymentFrequency.Monthly) {\r\n      rateOfReturn = interestRate / 12;\r\n    } else if (frequency === PaymentFrequency.Quarterly) {\r\n      rateOfReturn = interestRate / 4;\r\n    } else if (frequency === PaymentFrequency.SemiAnnual) {\r\n      rateOfReturn = interestRate / 2;\r\n    }\r\n\r\n    return rateOfReturn;\r\n  }\r\n\r\n  /**\r\n   * corrects the payment stream due to payment frequency\r\n   * @param paymentStream\r\n   * @returns\r\n   */\r\n  private correctPaymentStreamForPVCalc(\r\n    paymentStream: { payment: number; frequency: string }[]\r\n  ) {\r\n    return paymentStream.filter((payment) => payment.payment !== 0);\r\n  }\r\n\r\n  /**\r\n   * Generates the reducer function for PV calculation\r\n   * @param interestRate\r\n   * @returns\r\n   */\r\n  private calcPresentValue(interestRate: number, prepaid: boolean) {\r\n    return (\r\n      accumulator: number,\r\n      currentValue: { payment: number; frequency: string },\r\n      index: number\r\n    ) => {\r\n      const { payment, frequency } = currentValue;\r\n      const rateOfReturn = this.presentValueInterestRate(\r\n        interestRate,\r\n        frequency\r\n      );\r\n      if (prepaid) {\r\n        if (index === 0) return payment;\r\n\r\n        return accumulator + payment / Math.pow(1 + rateOfReturn, index);\r\n      } else {\r\n        return accumulator + payment / Math.pow(1 + rateOfReturn, index + 1);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { formatDate } from '.';\r\nimport {\r\n  Lease,\r\n  LeaseClassification,\r\n  Payment,\r\n  PaymentFrequency,\r\n  Payments\r\n} from '../leases';\r\n\r\ninterface LeaseInfo {\r\n  classification: string;\r\n  deferredRent: number;\r\n  description: string;\r\n  economicLife: number;\r\n  initialDirectCosts: number;\r\n  interestRate: number;\r\n  leaseIncentive: number;\r\n  name: string;\r\n  prepaid: string;\r\n  useEconomicLife: string;\r\n}\r\n\r\nconst generatePaymentStream = (payments) => {\r\n  const paymentStream = payments.map((el) => {\r\n    const { amount, frequency, startDate, endDate } = el;\r\n    const stDate = formatDate(startDate);\r\n    const edDate = formatDate(endDate);\r\n\r\n    return new Payment({\r\n      payment: amount,\r\n      frequency:\r\n        frequency === 'monthly'\r\n          ? PaymentFrequency.Monthly\r\n          : frequency === 'quarterly'\r\n          ? PaymentFrequency.Quarterly\r\n          : frequency === 'semiannual'\r\n          ? PaymentFrequency.SemiAnnual\r\n          : PaymentFrequency.Annual,\r\n      startDate: stDate,\r\n      endDate: edDate\r\n    });\r\n  });\r\n\r\n  return paymentStream;\r\n};\r\n\r\nexport const createLease = (payments, leaseInfo: LeaseInfo) => {\r\n  const {\r\n    name,\r\n    description,\r\n    interestRate,\r\n    deferredRent,\r\n    leaseIncentive,\r\n    initialDirectCosts,\r\n    economicLife\r\n  } = leaseInfo;\r\n\r\n  const paymentStream = generatePaymentStream(payments);\r\n\r\n  const leasePayments = new Payments(paymentStream);\r\n\r\n  const lease = new Lease();\r\n\r\n  const leaseClassification =\r\n    leaseInfo.classification === 'operating'\r\n      ? LeaseClassification.OPERATING\r\n      : LeaseClassification.FINANCE;\r\n\r\n  const prepaid = leaseInfo.prepaid === 'true' ? true : false;\r\n  const useEconomicLife = leaseInfo.useEconomicLife === 'true' ? true : false;\r\n\r\n  lease.setProperties(\r\n    name,\r\n    description,\r\n    leaseClassification,\r\n    interestRate,\r\n    leasePayments,\r\n    prepaid,\r\n    Number(deferredRent),\r\n    Number(leaseIncentive),\r\n    Number(initialDirectCosts),\r\n    useEconomicLife,\r\n    Number(economicLife)\r\n  );\r\n\r\n  return lease;\r\n};\r\n","import { useState } from 'react';\r\nimport { checkDateIsAfter, getFirstDay, getLastDay } from '../helpers/utils';\r\n\r\nconst Payments = ({ onChange, onClickAdd, onClickDelete, paymentsArr }) => {\r\n  const [error, setError] = useState('');\r\n\r\n  const handleChange = (\r\n    e: React.FormEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n  ) => {\r\n    const { name, id, value } = e.currentTarget;\r\n    const indexValue = id.split(' ')[1];\r\n\r\n    setError('');\r\n\r\n    let updatedValue: string | number;\r\n\r\n    if (name === 'startDate') {\r\n      updatedValue = getFirstDay(value);\r\n    } else if (name === 'endDate') {\r\n      updatedValue = getLastDay(value);\r\n\r\n      if (!checkDateIsAfter(paymentsArr[indexValue].startDate, updatedValue)) {\r\n        setError('End date must be after start date');\r\n        updatedValue = '';\r\n        return;\r\n      }\r\n    } else if (name === 'amount') {\r\n      updatedValue = Number(value);\r\n    } else {\r\n      updatedValue = value;\r\n    }\r\n\r\n    const oldPayment: {\r\n      startDate: string;\r\n      endDate: string;\r\n      frequency: string;\r\n      amount: number;\r\n    } = paymentsArr[indexValue];\r\n\r\n    const updatedPayment = {\r\n      ...oldPayment,\r\n      [name]: updatedValue\r\n    };\r\n\r\n    const oldArray = [...paymentsArr];\r\n\r\n    oldArray[indexValue] = updatedPayment;\r\n\r\n    onChange(oldArray);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <button onClick={onClickAdd}>Add Payment</button>\r\n        <button onClick={onClickDelete}>Delete Payment</button>\r\n      </div>\r\n      {/* TODO create error component */}\r\n      {error !== '' ? <p>{error}</p> : null}\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Start Date</th>\r\n            <th>End Date</th>\r\n            <th>Frequency</th>\r\n            <th>Amount</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {paymentsArr.map((payment, index) => (\r\n            <tr key={index}>\r\n              <td>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"startDate\"\r\n                  id={`payment ${index}`}\r\n                  value={payment.startDate}\r\n                  onChange={handleChange}\r\n                  min={payment.min}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"endDate\"\r\n                  id={`payment ${index}`}\r\n                  value={payment.endDate}\r\n                  onChange={handleChange}\r\n                  min={getLastDay(payment.min)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <select\r\n                  name=\"frequency\"\r\n                  id={`payment ${index}`}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"monthly\">Monthly</option>\r\n                  <option value=\"quarterly\">Quarterly</option>\r\n                  <option value=\"semiAnnual\">Semi Annual</option>\r\n                  <option value=\"annual\">Annual</option>\r\n                </select>\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"amount\"\r\n                  id={`payment ${index}`}\r\n                  value={payment.amount}\r\n                  onChange={handleChange}\r\n                />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Payments;\r\n","/**\r\n * Checks if the start date is after the end date\r\n * @param startDate\r\n * @param endDate\r\n */\r\nexport const checkDateIsAfter = (\r\n  startDate: string,\r\n  endDate: string\r\n): boolean => {\r\n  const start = new Date(startDate);\r\n  const end = new Date(endDate);\r\n\r\n  return end.valueOf() > start.valueOf();\r\n};\r\n","import ReactExport from 'react-export-excel';\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n\r\nconst Download = ({ lease }) => {\r\n  return (\r\n    <ExcelFile element={<button>Download Schedules</button>}>\r\n      <ExcelSheet dataSet={lease} name=\"Organization\" />\r\n    </ExcelFile>\r\n  );\r\n};\r\n\r\nexport default Download;\r\n","import { InputTypes } from '../../App';\r\n\r\ninterface ConfigObject {\r\n  label: string;\r\n  type: InputTypes;\r\n  id: string;\r\n  name: string;\r\n  value: string | number;\r\n  onChange: (\r\n    event:\r\n      | React.FormEvent<HTMLInputElement>\r\n      | React.ChangeEvent<HTMLSelectElement>\r\n  ) => void;\r\n  options?: { text: string; value: string }[];\r\n  show?: boolean;\r\n  required?: boolean;\r\n}\r\n\r\ninterface InputProps {\r\n  config: ConfigObject;\r\n}\r\n\r\nconst Input = (props: InputProps) => {\r\n  const {\r\n    label,\r\n    type,\r\n    name,\r\n    id,\r\n    value,\r\n    onChange,\r\n    options,\r\n    show,\r\n    required\r\n  } = props.config;\r\n\r\n  if (show === undefined || show) {\r\n    if (type === InputTypes.Select) {\r\n      return (\r\n        <>\r\n          <label htmlFor={id}>{label}</label>\r\n          <select name={name} id={id} value={value} onChange={onChange}>\r\n            {options.map((option, index) => (\r\n              <option key={`${option}-${index}`} value={option.value}>\r\n                {option.text}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <label htmlFor={id}>{label}</label>\r\n        <input\r\n          type={type}\r\n          name={name}\r\n          id={id}\r\n          value={value}\r\n          onChange={onChange}\r\n          required={required}\r\n        />\r\n      </>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default Input;\r\n","import styled from 'styled-components';\r\n\r\nconst DataTableStyled = styled.table`\r\n  border-collapse: collapse;\r\n  width: 50%;\r\n  margin-bottom: 5rem;\r\n  box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);\r\n  overflow: auto;\r\n\r\n  tr {\r\n    background: #f7f9f9;\r\n  }\r\n  td {\r\n    vertical-align: bottom;\r\n    text-align: center;\r\n    padding: 2rem;\r\n    padding-bottom: 0.5rem;\r\n    padding-top: 0.5rem;\r\n  }\r\n\r\n  th {\r\n    vertical-align: bottom;\r\n    text-align: center;\r\n    padding-bottom: 0;\r\n    background-color: #2ecc71;\r\n    color: #ffffff;\r\n  }\r\n`;\r\n\r\nconst DataTableBodyStyled = styled.tbody`\r\n  /* tr:hover {\r\n    background-color: #f5f5f5;\r\n    cursor: pointer;\r\n  } */\r\n`;\r\nexport { DataTableStyled, DataTableBodyStyled };\r\n","import { capitalizeFirstLetter } from '../../helpers/utils';\r\nimport { DataTableStyled, DataTableBodyStyled } from './DataTableStyles';\r\n\r\ninterface Config {\r\n  data: {}[];\r\n}\r\n\r\n/**\r\n * Generates the rows for the data table\r\n * @param dataArray\r\n * @returns\r\n */\r\nconst createTableRows = (dataArray: {}[]) => (\r\n  <DataTableBodyStyled>\r\n    {dataArray.map((row, index) => (\r\n      <tr key={`${row}-${index}`}>\r\n        {Object.keys(row).map((key) => {\r\n          if (typeof row[key] === 'number') {\r\n            return (\r\n              <td key={key}>\r\n                {new Intl.NumberFormat('en-US', {\r\n                  minimumFractionDigits: 2\r\n                }).format(row[key])}\r\n              </td>\r\n            );\r\n          }\r\n          return <td key={key}>{row[key]}</td>;\r\n        })}\r\n      </tr>\r\n    ))}\r\n  </DataTableBodyStyled>\r\n);\r\n\r\n/**\r\n * Generates the headers from an array of objects\r\n * @param dataArray\r\n * @returns\r\n */\r\nconst createTableHeaders = (dataArray: {}[]) => {\r\n  const headers = Object.keys(dataArray[0]);\r\n  let result = [];\r\n  headers\r\n    .map((header) => header.split(/(?=[A-Z])/))\r\n    .forEach((el) => {\r\n      let combinedText = '';\r\n      for (let i = 0; i < el.length; i++) {\r\n        combinedText = combinedText + ' ' + capitalizeFirstLetter(el[i]);\r\n      }\r\n      result.push(combinedText);\r\n    });\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {result.map((word, index) => (\r\n          <th key={`${word}-${index}`}>{word}</th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\n/**\r\n * Datatable that automatically converts and array of objects to a table\r\n * with headers\r\n * @param props\r\n * @returns\r\n */\r\nconst DataTable = (props: Config) => {\r\n  const { data } = props;\r\n\r\n  const tableRows = createTableRows(data);\r\n  const tableHeader = createTableHeaders(data);\r\n\r\n  return (\r\n    <DataTableStyled>\r\n      {tableHeader}\r\n      {tableRows}\r\n    </DataTableStyled>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n","export const capitalizeFirstLetter = (word: string) =>\r\n  word[0].toUpperCase() + word.substring(1);\r\n","import styled from 'styled-components';\r\n\r\nconst FormStyled = styled.form`\r\n  font-family: inherit;\r\n  border: thin solid lightgrey;\r\n  box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);\r\n  max-width: 50rem;\r\n  box-sizing: border-box;\r\n  border-radius: 10px;\r\n\r\n  h1 {\r\n    text-align: center;\r\n    border-bottom: 1px solid black;\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n    background-color: #2ecc71;\r\n    background-size: 100% 100%;\r\n    color: white;\r\n    padding-bottom: 1rem;\r\n  }\r\n\r\n  .input-container {\r\n    width: 75%;\r\n    margin: auto;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .payments-container {\r\n    width: 75%;\r\n    margin: auto;\r\n    display: flex;\r\n    margin-top: 1rem;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .payments-container > div {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n  }\r\n\r\n  .input-container > input,\r\n  .input-container > label,\r\n  .input-container > select {\r\n    margin-top: 0.5rem;\r\n    width: 50%;\r\n    font: inherit;\r\n    padding: 2px 2px;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  input,\r\n  select {\r\n    border: 1px solid grey;\r\n    border-radius: 4px;\r\n    text-align: right;\r\n  }\r\n\r\n  input:focus,\r\n  select:focus {\r\n    background: #55efc4;\r\n  }\r\n\r\n  input[type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n\r\n  button {\r\n    display: block;\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    border-radius: 10px;\r\n    border: none;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    color: white;\r\n    background-color: #2ecc71;\r\n    font-size: 14px;\r\n    padding: 10px;\r\n    padding-left: 16px;\r\n    padding-right: 16px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  button:hover {\r\n    background-color: #81ecec;\r\n  }\r\n\r\n  button[type='submit'] {\r\n    margin: auto;\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  @media (min-width: 40rem) {\r\n    margin: auto;\r\n    margin-top: 2.5rem;\r\n    width: 40rem;\r\n  }\r\n`;\r\n\r\nexport { FormStyled };\r\n","import React, { useState } from 'react';\r\n\r\ninterface Lease {\r\n  economicLife: number;\r\n  useEconomicLife: string;\r\n  name: string;\r\n  description: string;\r\n  classification: string;\r\n  prepaid: string;\r\n  interestRate: number;\r\n  deferredRent: number;\r\n  leaseIncentive: number;\r\n  initialDirectCosts: number;\r\n}\r\n\r\nconst useForm = (\r\n  initialValues: Lease\r\n): [\r\n  Lease,\r\n  (\r\n    event:\r\n      | React.FormEvent<HTMLInputElement>\r\n      | React.ChangeEvent<HTMLSelectElement>\r\n  ) => void\r\n] => {\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const handleChange = (\r\n    event:\r\n      | React.FormEvent<HTMLInputElement>\r\n      | React.ChangeEvent<HTMLSelectElement>\r\n  ): void => {\r\n    const { id, value } = event.currentTarget;\r\n\r\n    setValues({ ...values, [id]: value });\r\n  };\r\n\r\n  return [values, handleChange];\r\n};\r\n\r\nexport { useForm };\r\n","import { GeneratedLease } from '../../interfaces';\r\n\r\nexport const createExcelData = (lease: GeneratedLease): any[] => {\r\n  const obj = { ...lease };\r\n\r\n  const assetSchedule = obj.asset.map((month) => [\r\n    month.date,\r\n    month.beginningBalance,\r\n    month.depreciation,\r\n    month.endingBalance\r\n  ]);\r\n\r\n  const liabilitySchedule = obj.liability.map((month) => [\r\n    month.date,\r\n    month.beginningBalance,\r\n    month.payment,\r\n    month.interestExpense,\r\n    month.interestPayment,\r\n    month.principal,\r\n    month.endingBalance\r\n  ]);\r\n\r\n  const result = [\r\n    {\r\n      columns: [''],\r\n      data: [\r\n        ['Name: ', obj.lease],\r\n        ['Description: ', obj.description],\r\n        ['Classificatoin: ', obj.classification],\r\n        ['Prepaid', obj.prepaid],\r\n        ['Discount Rate: ', obj.interestRate * 100],\r\n        ['Total Payments: ', obj.totalPayments],\r\n        ['Present Value: ', obj.presentValue],\r\n        ['Start Date: ', obj.startDate],\r\n        ['End Date: ', obj.endDate]\r\n      ]\r\n    },\r\n    { ySteps: 5, columns: ['Asset Schedule'], data: [['']] },\r\n    {\r\n      // xSteps: 1, // Will start putting cell with 1 empty cell on left most\r\n      ySteps: -1, //will put space of 5 rows,\r\n      columns: ['Date', 'Beginning Balance', 'Depreciation', 'Ending Balance'],\r\n      data: assetSchedule\r\n    },\r\n    {\r\n      ySteps: -assetSchedule.length - 2,\r\n      xSteps: 6,\r\n      columns: ['Liability Schedule'],\r\n      data: [['']]\r\n    },\r\n    {\r\n      ySteps: -1,\r\n      xSteps: 6,\r\n      columns: [\r\n        'Date',\r\n        'Beginning Balance',\r\n        'Payment',\r\n        'Interest Expense',\r\n        'Interest Payment',\r\n        'Principal',\r\n        'Ending Balance'\r\n      ],\r\n      data: liabilitySchedule\r\n    }\r\n  ];\r\n\r\n  return result;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}